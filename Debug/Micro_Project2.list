
Micro_Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000278c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028ec  080028ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002900  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002900  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005eef  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000168b  00000000  00000000  00025f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  000275f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000479  00000000  00000000  00027c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ddc  00000000  00000000  00028089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007818  00000000  00000000  0003be65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fbe7  00000000  00000000  0004367d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016dc  00000000  00000000  000c3264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c4940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080028b0 	.word	0x080028b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080028b0 	.word	0x080028b0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <stopWheels>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void stopWheels(void) {
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    // Stop both motors
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9) << 16;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <stopWheels+0x14>)
 8000482:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
 8000486:	619a      	str	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40020800 	.word	0x40020800

08000494 <moveForward>:
void moveForward(void) {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
    // Move both motors forward
    GPIOC->BSRR = GPIO_PIN_6 | GPIO_PIN_8;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <moveForward+0x1c>)
 800049a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800049e:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7 | GPIO_PIN_9) << 16;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <moveForward+0x1c>)
 80004a2:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 80004a6:	619a      	str	r2, [r3, #24]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40020800 	.word	0x40020800

080004b4 <turnRight>:

void turnRight(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    // Turn right by moving right motor forward and left motor backward
    GPIOC->BSRR = GPIO_PIN_6 | GPIO_PIN_9;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <turnRight+0x24>)
 80004ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 80004be:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7) << 16;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <turnRight+0x24>)
 80004c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80004c6:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_8) << 16;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <turnRight+0x24>)
 80004ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ce:	619a      	str	r2, [r3, #24]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40020800 	.word	0x40020800

080004dc <turnLeft>:

void turnLeft(void) {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
    // Turn left by moving left motor forward and right motor backward
    GPIOC->BSRR = GPIO_PIN_7 | GPIO_PIN_8;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <turnLeft+0x24>)
 80004e2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80004e6:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_6) << 16;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <turnLeft+0x24>)
 80004ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004ee:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_9) << 16;
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <turnLeft+0x24>)
 80004f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80004f6:	619a      	str	r2, [r3, #24]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40020800 	.word	0x40020800

08000504 <TIM4_Init>:
void moveBackward(void) {
    // Move both motors backward
    GPIOC->BSRR = GPIO_PIN_7 | GPIO_PIN_9;
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_8) << 16;
}
void TIM4_Init(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
    // Habilitar el reloj para TIM4
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <TIM4_Init+0x58>)
 800050a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <TIM4_Init+0x58>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6253      	str	r3, [r2, #36]	; 0x24

    // Configurar el temporizador TIM4
    TIM4->CR1 &= ~TIM_CR1_DIR; // Conteo ascendente
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <TIM4_Init+0x5c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <TIM4_Init+0x5c>)
 800051a:	f023 0310 	bic.w	r3, r3, #16
 800051e:	6013      	str	r3, [r2, #0]
    TIM4->PSC = 7999; // Prescaler para que el temporizador cuente cada milisegundo (80 MHz / (7999 + 1) = 10 kHz)
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <TIM4_Init+0x5c>)
 8000522:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = TIM4_PERIOD - 1; // Cargar el valor de autorecarga para alcanzar el periodo deseado
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <TIM4_Init+0x5c>)
 800052a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CR1 |= TIM_CR1_URS; // Habilitar la actualización solo para desbordamiento de contador
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <TIM4_Init+0x5c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <TIM4_Init+0x5c>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6013      	str	r3, [r2, #0]
    TIM4->DIER |= TIM_DIER_UIE; // Habilitar la interrupción de actualización
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <TIM4_Init+0x5c>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <TIM4_Init+0x5c>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	60d3      	str	r3, [r2, #12]
    TIM4->CR1 |= TIM_CR1_CEN; // Habilitar el contador
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <TIM4_Init+0x5c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <TIM4_Init+0x5c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40023800 	.word	0x40023800
 8000560:	40000800 	.word	0x40000800

08000564 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) { // Comprobar si el flag de interrupción de actualización está activo
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <TIM4_IRQHandler+0x24>)
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d007      	beq.n	8000584 <TIM4_IRQHandler+0x20>
        TIM4->SR &= ~TIM_SR_UIF; // Limpiar el flag de interrupción de actualización
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <TIM4_IRQHandler+0x24>)
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <TIM4_IRQHandler+0x24>)
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6113      	str	r3, [r2, #16]

        // Aquí colocar el código para manejar la interrupción del temporizador TIM4
        // Por ejemplo, detener los motores
        stopWheels();
 8000580:	f7ff ff7c 	bl	800047c <stopWheels>
    }
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40000800 	.word	0x40000800

0800058c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
    if ((EXTI->PR & 0x0002) != 0) {         // Check if the interrupt was triggered by EXTI1
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <EXTI1_IRQHandler+0x40>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f003 0302 	and.w	r3, r3, #2
 8000598:	2b00      	cmp	r3, #0
 800059a:	d012      	beq.n	80005c2 <EXTI1_IRQHandler+0x36>
        if ((GPIOC->IDR & 0x0002) == 0) {   // Check if the sensor is detecting black
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <EXTI1_IRQHandler+0x44>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d103      	bne.n	80005b0 <EXTI1_IRQHandler+0x24>
            IR_SENSOR_1_STATE = 1;          //Set the state to black
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <EXTI1_IRQHandler+0x48>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e002      	b.n	80005b6 <EXTI1_IRQHandler+0x2a>
        } else {
            IR_SENSOR_1_STATE = 0;          // Set the state to white
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <EXTI1_IRQHandler+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
        }
        EXTI->PR |= 0x0002;                 // Clear the EXTI1 flag
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <EXTI1_IRQHandler+0x40>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a04      	ldr	r2, [pc, #16]	; (80005cc <EXTI1_IRQHandler+0x40>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	6153      	str	r3, [r2, #20]
    }
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40010400 	.word	0x40010400
 80005d0:	40020800 	.word	0x40020800
 80005d4:	20000028 	.word	0x20000028

080005d8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void) {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if ((EXTI->PR & 0x0004) != 0) {         // Check if the interrupt was triggered by EXTI2
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <EXTI2_IRQHandler+0x40>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d012      	beq.n	800060e <EXTI2_IRQHandler+0x36>
        if ((GPIOC->IDR & 0x0004) == 0) {   // Check if the sensor is detecting black
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <EXTI2_IRQHandler+0x44>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <EXTI2_IRQHandler+0x24>
            IR_SENSOR_2_STATE = 1;          //Set the state to black
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <EXTI2_IRQHandler+0x48>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e002      	b.n	8000602 <EXTI2_IRQHandler+0x2a>
        } else {
            IR_SENSOR_2_STATE = 0;          // Set the state to white
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <EXTI2_IRQHandler+0x48>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
        }
        EXTI->PR |= 0x0004;                 // Clear the EXTI2 flag
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <EXTI2_IRQHandler+0x40>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <EXTI2_IRQHandler+0x40>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6153      	str	r3, [r2, #20]
    }
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40010400 	.word	0x40010400
 800061c:	40020800 	.word	0x40020800
 8000620:	20000029 	.word	0x20000029

08000624 <activateBuzzer>:
void activateBuzzer(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
    //Activate the buzzer
    GPIOB->BSRR = BUZZER_PIN;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <activateBuzzer+0x14>)
 800062a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800062e:	619a      	str	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40020400 	.word	0x40020400

0800063c <deactivateBuzzer>:
void deactivateBuzzer(void) {
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
    // Deactivate the buzzer
    GPIOB->BSRR = BUZZER_PIN << 16;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <deactivateBuzzer+0x14>)
 8000642:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000646:	619a      	str	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40020400 	.word	0x40020400

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fbcf 	bl	8000dfa <HAL_Init>
  TIM4_Init();
 800065c:	f7ff ff52 	bl	8000504 <TIM4_Init>
  EXTI1_IRQHandler();
 8000660:	f7ff ff94 	bl	800058c <EXTI1_IRQHandler>
  EXTI2_IRQHandler();
 8000664:	f7ff ffb8 	bl	80005d8 <EXTI2_IRQHandler>
  activateBuzzer();
 8000668:	f7ff ffdc 	bl	8000624 <activateBuzzer>
  deactivateBuzzer();
 800066c:	f7ff ffe6 	bl	800063c <deactivateBuzzer>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f922 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 fa1c 	bl	8000ab0 <MX_GPIO_Init>
  MX_ADC_Init();
 8000678:	f000 f986 	bl	8000988 <MX_ADC_Init>
  MX_LCD_Init();
 800067c:	f000 f9de 	bl	8000a3c <MX_LCD_Init>
  MX_TS_Init();
 8000680:	f000 fa10 	bl	8000aa4 <MX_TS_Init>
  /* USER CODE BEGIN 2 */
  // PC6, PC7, PC8, and PC9 as digital outputs (01)
  GPIOC->MODER &= ~(1 << (6*2+1));
 8000684:	4b84      	ldr	r3, [pc, #528]	; (8000898 <main+0x244>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a83      	ldr	r2, [pc, #524]	; (8000898 <main+0x244>)
 800068a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800068e:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (1 << (6*2));
 8000690:	4b81      	ldr	r3, [pc, #516]	; (8000898 <main+0x244>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a80      	ldr	r2, [pc, #512]	; (8000898 <main+0x244>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800069a:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1 << (7*2+1));
 800069c:	4b7e      	ldr	r3, [pc, #504]	; (8000898 <main+0x244>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a7d      	ldr	r2, [pc, #500]	; (8000898 <main+0x244>)
 80006a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006a6:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (1 << (7*2));
 80006a8:	4b7b      	ldr	r3, [pc, #492]	; (8000898 <main+0x244>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a7a      	ldr	r2, [pc, #488]	; (8000898 <main+0x244>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1 << (8*2+1));
 80006b4:	4b78      	ldr	r3, [pc, #480]	; (8000898 <main+0x244>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a77      	ldr	r2, [pc, #476]	; (8000898 <main+0x244>)
 80006ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006be:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (1 << (8*2));
 80006c0:	4b75      	ldr	r3, [pc, #468]	; (8000898 <main+0x244>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a74      	ldr	r2, [pc, #464]	; (8000898 <main+0x244>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1 << (9*2+1));
 80006cc:	4b72      	ldr	r3, [pc, #456]	; (8000898 <main+0x244>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a71      	ldr	r2, [pc, #452]	; (8000898 <main+0x244>)
 80006d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80006d6:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (1 << (9*2));
 80006d8:	4b6f      	ldr	r3, [pc, #444]	; (8000898 <main+0x244>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a6e      	ldr	r2, [pc, #440]	; (8000898 <main+0x244>)
 80006de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e2:	6013      	str	r3, [r2, #0]

  // PC1 & PC2 as digital input (00)
  GPIOC->MODER &= ~(1 << (1*2+1));
 80006e4:	4b6c      	ldr	r3, [pc, #432]	; (8000898 <main+0x244>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a6b      	ldr	r2, [pc, #428]	; (8000898 <main+0x244>)
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1 << (1*2));
 80006f0:	4b69      	ldr	r3, [pc, #420]	; (8000898 <main+0x244>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a68      	ldr	r2, [pc, #416]	; (8000898 <main+0x244>)
 80006f6:	f023 0304 	bic.w	r3, r3, #4
 80006fa:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1 << (2*2+1));
 80006fc:	4b66      	ldr	r3, [pc, #408]	; (8000898 <main+0x244>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a65      	ldr	r2, [pc, #404]	; (8000898 <main+0x244>)
 8000702:	f023 0320 	bic.w	r3, r3, #32
 8000706:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1 << (2*2));
 8000708:	4b63      	ldr	r3, [pc, #396]	; (8000898 <main+0x244>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a62      	ldr	r2, [pc, #392]	; (8000898 <main+0x244>)
 800070e:	f023 0310 	bic.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]

  //Configure the EXTI1
  EXTI->FTSR |= 0x0002;                      //Set off the falling edge trigger
 8000714:	4b61      	ldr	r3, [pc, #388]	; (800089c <main+0x248>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a60      	ldr	r2, [pc, #384]	; (800089c <main+0x248>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	60d3      	str	r3, [r2, #12]
  EXTI->RTSR |= 0x0002;                      //Set on the rising edge trigger
 8000720:	4b5e      	ldr	r3, [pc, #376]	; (800089c <main+0x248>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	4a5d      	ldr	r2, [pc, #372]	; (800089c <main+0x248>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	6093      	str	r3, [r2, #8]
  SYSCFG->EXTICR[0] &= 0xFF0F;               //Set the EXTI1 to PC1
 800072c:	4b5c      	ldr	r3, [pc, #368]	; (80008a0 <main+0x24c>)
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	495b      	ldr	r1, [pc, #364]	; (80008a0 <main+0x24c>)
 8000732:	f64f 730f 	movw	r3, #65295	; 0xff0f
 8000736:	4013      	ands	r3, r2
 8000738:	608b      	str	r3, [r1, #8]
  SYSCFG->EXTICR[0] |= 0x0020;               // Set PC1 as EXTI1
 800073a:	4b59      	ldr	r3, [pc, #356]	; (80008a0 <main+0x24c>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a58      	ldr	r2, [pc, #352]	; (80008a0 <main+0x24c>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	6093      	str	r3, [r2, #8]
  EXTI->IMR |= 0x02;                         //Unmask the EXTI1
 8000746:	4b55      	ldr	r3, [pc, #340]	; (800089c <main+0x248>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a54      	ldr	r2, [pc, #336]	; (800089c <main+0x248>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6013      	str	r3, [r2, #0]
  NVIC->ISER[0] |= (1 << 7);
 8000752:	4b54      	ldr	r3, [pc, #336]	; (80008a4 <main+0x250>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a53      	ldr	r2, [pc, #332]	; (80008a4 <main+0x250>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6013      	str	r3, [r2, #0]

  //Configure the EXTI2
  EXTI->FTSR |= 0x0004;                      //Set off the falling edge trigger
 800075e:	4b4f      	ldr	r3, [pc, #316]	; (800089c <main+0x248>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	4a4e      	ldr	r2, [pc, #312]	; (800089c <main+0x248>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	60d3      	str	r3, [r2, #12]
  EXTI->RTSR |= 0x0004;                      //Set on the rising edge trigger
 800076a:	4b4c      	ldr	r3, [pc, #304]	; (800089c <main+0x248>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4a4b      	ldr	r2, [pc, #300]	; (800089c <main+0x248>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6093      	str	r3, [r2, #8]
  SYSCFG->EXTICR[0] &= 0xF0FF;               //Set the EXTI2 to PC2
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <main+0x24c>)
 8000778:	689a      	ldr	r2, [r3, #8]
 800077a:	4949      	ldr	r1, [pc, #292]	; (80008a0 <main+0x24c>)
 800077c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8000780:	4013      	ands	r3, r2
 8000782:	608b      	str	r3, [r1, #8]
  SYSCFG->EXTICR[0] |= 0x0200;               // Set PC2 as EXTI2
 8000784:	4b46      	ldr	r3, [pc, #280]	; (80008a0 <main+0x24c>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	4a45      	ldr	r2, [pc, #276]	; (80008a0 <main+0x24c>)
 800078a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800078e:	6093      	str	r3, [r2, #8]
  EXTI->IMR |= 0x0004;                       //Unmask the EXTI2
 8000790:	4b42      	ldr	r3, [pc, #264]	; (800089c <main+0x248>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a41      	ldr	r2, [pc, #260]	; (800089c <main+0x248>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6013      	str	r3, [r2, #0]
  NVIC->ISER[0] |= (1 << 8);
 800079c:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <main+0x250>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a40      	ldr	r2, [pc, #256]	; (80008a4 <main+0x250>)
 80007a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a6:	6013      	str	r3, [r2, #0]

  //PC8 as digital output(01)
  GPIOB->MODER &= ~(1 << (8*2 +1));
 80007a8:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <main+0x254>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a3e      	ldr	r2, [pc, #248]	; (80008a8 <main+0x254>)
 80007ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007b2:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (1 << (8*2));
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <main+0x254>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a3b      	ldr	r2, [pc, #236]	; (80008a8 <main+0x254>)
 80007ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007be:	6013      	str	r3, [r2, #0]

  //Config buzzer
  GPIOB->MODER &= ~(0x03 << (8 * 2)); // Limpiar los bits
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <main+0x254>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <main+0x254>)
 80007c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007ca:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (0x01 << (8 * 2)); // Configurar como salida
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <main+0x254>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a35      	ldr	r2, [pc, #212]	; (80008a8 <main+0x254>)
 80007d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (IR_SENSOR_1_STATE == 1 || IR_SENSOR_2_STATE == 1) {
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <main+0x258>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d003      	beq.n	80007e8 <main+0x194>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <main+0x25c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d102      	bne.n	80007ee <main+0x19a>
	        activateBuzzer();
 80007e8:	f7ff ff1c 	bl	8000624 <activateBuzzer>
 80007ec:	e001      	b.n	80007f2 <main+0x19e>
	    } else {
	        deactivateBuzzer();
 80007ee:	f7ff ff25 	bl	800063c <deactivateBuzzer>
	    }
    if (IR_SENSOR_1_STATE == 1 && IR_SENSOR_2_STATE == 1) {
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <main+0x258>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d107      	bne.n	800080a <main+0x1b6>
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <main+0x25c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d103      	bne.n	800080a <main+0x1b6>
        state = 0;
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <main+0x260>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e026      	b.n	8000858 <main+0x204>
    } else if (IR_SENSOR_1_STATE == 0 && IR_SENSOR_2_STATE == 1) {
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <main+0x258>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d107      	bne.n	8000822 <main+0x1ce>
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <main+0x25c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d103      	bne.n	8000822 <main+0x1ce>
        state = 3;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <main+0x260>)
 800081c:	2203      	movs	r2, #3
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e01a      	b.n	8000858 <main+0x204>
    } else if (IR_SENSOR_1_STATE == 1 && IR_SENSOR_2_STATE == 0) {
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <main+0x258>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d107      	bne.n	800083a <main+0x1e6>
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <main+0x25c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <main+0x1e6>
        state = 2;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <main+0x260>)
 8000834:	2202      	movs	r2, #2
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e00e      	b.n	8000858 <main+0x204>
    } else if (IR_SENSOR_1_STATE == 0 && IR_SENSOR_2_STATE == 0) {
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <main+0x258>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d107      	bne.n	8000852 <main+0x1fe>
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <main+0x25c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d103      	bne.n	8000852 <main+0x1fe>
        state = 1;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <main+0x260>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e002      	b.n	8000858 <main+0x204>
    } else {
        state = 1;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <main+0x260>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
    }
      switch (state) {
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <main+0x260>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d817      	bhi.n	8000890 <main+0x23c>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <main+0x214>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	08000879 	.word	0x08000879
 800086c:	0800087f 	.word	0x0800087f
 8000870:	08000885 	.word	0x08000885
 8000874:	0800088b 	.word	0x0800088b
          case 0:
              moveForward();
 8000878:	f7ff fe0c 	bl	8000494 <moveForward>
              break;
 800087c:	e00b      	b.n	8000896 <main+0x242>
          case 1:
              stopWheels();
 800087e:	f7ff fdfd 	bl	800047c <stopWheels>
              break;
 8000882:	e008      	b.n	8000896 <main+0x242>
          case 2:
              turnLeft();
 8000884:	f7ff fe2a 	bl	80004dc <turnLeft>
              break;
 8000888:	e005      	b.n	8000896 <main+0x242>
          case 3:
              turnRight();
 800088a:	f7ff fe13 	bl	80004b4 <turnRight>
              break;
 800088e:	e002      	b.n	8000896 <main+0x242>
          default:
              stopWheels();
 8000890:	f7ff fdf4 	bl	800047c <stopWheels>
              break;
 8000894:	bf00      	nop
	if (IR_SENSOR_1_STATE == 1 || IR_SENSOR_2_STATE == 1) {
 8000896:	e79f      	b.n	80007d8 <main+0x184>
 8000898:	40020800 	.word	0x40020800
 800089c:	40010400 	.word	0x40010400
 80008a0:	40010000 	.word	0x40010000
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	40020400 	.word	0x40020400
 80008ac:	20000028 	.word	0x20000028
 80008b0:	20000029 	.word	0x20000029
 80008b4:	2000002a 	.word	0x2000002a

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b096      	sub	sp, #88	; 0x58
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 ffc6 	bl	8002858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <SystemClock_Config+0xcc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80008ee:	4a25      	ldr	r2, [pc, #148]	; (8000984 <SystemClock_Config+0xcc>)
 80008f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008f6:	2306      	movs	r3, #6
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090a:	2300      	movs	r3, #0
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800090e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000912:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000914:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f8cc 	bl	8001abc <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800092a:	f000 f91b 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2101      	movs	r1, #1
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fbe7 	bl	800211c <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000954:	f000 f906 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LCD;
 8000958:	2303      	movs	r3, #3
 800095a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800095c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000960:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000966:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fe6a 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000976:	f000 f8f5 	bl	8000b64 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3758      	adds	r7, #88	; 0x58
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40007000 	.word	0x40007000

08000988 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_ADC_Init+0xac>)
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <MX_ADC_Init+0xb0>)
 800099c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_ADC_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_ADC_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_ADC_Init+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_ADC_Init+0xac>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC_Init+0xac>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ADC_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC_Init+0xac>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC_Init+0xac>)
 80009d8:	2201      	movs	r2, #1
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ADC_Init+0xac>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_ADC_Init+0xac>)
 80009e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ADC_Init+0xac>)
 80009ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC_Init+0xac>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_ADC_Init+0xac>)
 80009fe:	f000 fa6b 	bl	8000ed8 <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000a08:	f000 f8ac 	bl	8000b64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_ADC_Init+0xac>)
 8000a1e:	f000 fba1 	bl	8001164 <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000a28:	f000 f89c 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	40012400 	.word	0x40012400

08000a3c <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <MX_LCD_Init+0x64>)
 8000a44:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a54:	220c      	movs	r2, #12
 8000a56:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_LCD_Init+0x60>)
 8000a8a:	f000 ff37 	bl	80018fc <HAL_LCD_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 f866 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000080 	.word	0x20000080
 8000aa0:	40002400 	.word	0x40002400

08000aa4 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	21c0      	movs	r1, #192	; 0xc0
 8000b12:	4812      	ldr	r0, [pc, #72]	; (8000b5c <MX_GPIO_Init+0xac>)
 8000b14:	f000 feda 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_GPIO_Init+0xb0>)
 8000b2e:	f000 fd4d 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000b32:	23c0      	movs	r3, #192	; 0xc0
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0xac>)
 8000b4a:	f000 fd3f 	bl	80015cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40020000 	.word	0x40020000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b80:	6253      	str	r3, [r2, #36]	; 0x24
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6213      	str	r3, [r2, #32]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x5c>)
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x5c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6253      	str	r3, [r2, #36]	; 0x24
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x5c>)
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bbe:	2007      	movs	r0, #7
 8000bc0:	f000 fcd0 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_ADC_MspInit+0x74>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d123      	bne.n	8000c3a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfc:	6213      	str	r3, [r2, #32]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_ADC_MspInit+0x78>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8000c22:	2310      	movs	r3, #16
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_ADC_MspInit+0x7c>)
 8000c36:	f000 fcc9 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40012400 	.word	0x40012400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <HAL_LCD_MspInit+0xf0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d162      	bne.n	8000d38 <HAL_LCD_MspInit+0xe8>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c7e:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_LCD_MspInit+0xf4>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    PB3     ------> LCD_SEG7
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG17_Pin|SEG22_Pin|SEG23_Pin;
 8000cd2:	f640 4309 	movw	r3, #3081	; 0xc09
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ce4:	230b      	movs	r3, #11
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <HAL_LCD_MspInit+0xf8>)
 8000cf0:	f000 fc6c 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 8000cf4:	f248 730e 	movw	r3, #34574	; 0x870e
 8000cf8:	61fb      	str	r3, [r7, #28]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000d06:	230b      	movs	r3, #11
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480e      	ldr	r0, [pc, #56]	; (8000d4c <HAL_LCD_MspInit+0xfc>)
 8000d12:	f000 fc5b 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 8000d16:	f64f 6338 	movw	r3, #65080	; 0xfe38
 8000d1a:	61fb      	str	r3, [r7, #28]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4807      	ldr	r0, [pc, #28]	; (8000d50 <HAL_LCD_MspInit+0x100>)
 8000d34:	f000 fc4a 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40002400 	.word	0x40002400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f881 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fff7 	bl	8000da2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dcc:	4c09      	ldr	r4, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 fd45 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fc39 	bl	8000654 <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dec:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df4:	200000c0 	.word	0x200000c0

08000df8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_IRQHandler>

08000dfa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fbad 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fea8 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_InitTick+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d022      	beq.n	8000e86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_InitTick+0x68>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fbac 	bl	80015b2 <HAL_SYSTICK_Config>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d809      	bhi.n	8000e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	f000 fb84 	bl	800157a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_InitTick+0x70>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e004      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x1c>)
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000bc 	.word	0x200000bc
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200000bc 	.word	0x200000bc

08000ed8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e127      	b.n	8001148 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d115      	bne.n	8000f32 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b8e      	ldr	r3, [pc, #568]	; (8001150 <HAL_ADC_Init+0x278>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a8d      	ldr	r2, [pc, #564]	; (8001150 <HAL_ADC_Init+0x278>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6213      	str	r3, [r2, #32]
 8000f20:	4b8b      	ldr	r3, [pc, #556]	; (8001150 <HAL_ADC_Init+0x278>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fe4f 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 80ff 	bne.w	800113e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	f043 0202 	orr.w	r2, r3, #2
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000f54:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <HAL_ADC_Init+0x27c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	497c      	ldr	r1, [pc, #496]	; (8001154 <HAL_ADC_Init+0x27c>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f6e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f76:	4619      	mov	r1, r3
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000f92:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000fba:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d007      	beq.n	8000fda <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe4:	2b40      	cmp	r3, #64	; 0x40
 8000fe6:	d04f      	beq.n	8001088 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ffa:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6912      	ldr	r2, [r2, #16]
 8001000:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001004:	d003      	beq.n	800100e <HAL_ADC_Init+0x136>
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6912      	ldr	r2, [r2, #16]
 800100a:	2a01      	cmp	r2, #1
 800100c:	d102      	bne.n	8001014 <HAL_ADC_Init+0x13c>
 800100e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001012:	e000      	b.n	8001016 <HAL_ADC_Init+0x13e>
 8001014:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001016:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101a:	4313      	orrs	r3, r2
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001024:	2b01      	cmp	r3, #1
 8001026:	d125      	bne.n	8001074 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d114      	bne.n	800105c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	3b01      	subs	r3, #1
 8001038:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800103c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	fa92 f2a2 	rbit	r2, r2
 8001044:	617a      	str	r2, [r7, #20]
  return result;
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	4093      	lsls	r3, r2
 8001050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001056:	4313      	orrs	r3, r2
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
 800105a:	e00b      	b.n	8001074 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f043 0220 	orr.w	r2, r3, #32
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_ADC_Init+0x280>)
 800107c:	4013      	ands	r3, r2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001084:	430b      	orrs	r3, r1
 8001086:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_ADC_Init+0x284>)
 8001090:	4013      	ands	r3, r2
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001098:	430b      	orrs	r3, r1
 800109a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a4:	d003      	beq.n	80010ae <HAL_ADC_Init+0x1d6>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d119      	bne.n	80010e2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	3b01      	subs	r3, #1
 80010be:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80010c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	60fa      	str	r2, [r7, #12]
  return result;
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	fab2 f282 	clz	r2, r2
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	fa03 f202 	lsl.w	r2, r3, r2
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
 80010e0:	e007      	b.n	80010f2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_ADC_Init+0x288>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010fe:	429a      	cmp	r2, r3
 8001100:	d10b      	bne.n	800111a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f023 0303 	bic.w	r3, r3, #3
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	64da      	str	r2, [r3, #76]	; 0x4c
 8001118:	e014      	b.n	8001144 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f023 0312 	bic.w	r3, r3, #18
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800113c:	e002      	b.n	8001144 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001148:	4618      	mov	r0, r3
 800114a:	3738      	adds	r7, #56	; 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40012700 	.word	0x40012700
 8001158:	fcfc16ff 	.word	0xfcfc16ff
 800115c:	c0fff18d 	.word	0xc0fff18d
 8001160:	bf80fffe 	.word	0xbf80fffe

08001164 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x20>
 8001180:	2302      	movs	r3, #2
 8001182:	e134      	b.n	80013ee <HAL_ADC_ConfigChannel+0x28a>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b06      	cmp	r3, #6
 8001192:	d81c      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b05      	subs	r3, #5
 80011a6:	221f      	movs	r2, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b05      	subs	r3, #5
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
 80011cc:	e07e      	b.n	80012cc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d81c      	bhi.n	8001210 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b23      	subs	r3, #35	; 0x23
 80011e8:	221f      	movs	r2, #31
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4019      	ands	r1, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b23      	subs	r3, #35	; 0x23
 8001202:	fa00 f203 	lsl.w	r2, r0, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	63da      	str	r2, [r3, #60]	; 0x3c
 800120e:	e05d      	b.n	80012cc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b12      	cmp	r3, #18
 8001216:	d81c      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b41      	subs	r3, #65	; 0x41
 800122a:	221f      	movs	r2, #31
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b41      	subs	r3, #65	; 0x41
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
 8001250:	e03c      	b.n	80012cc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b18      	cmp	r3, #24
 8001258:	d81c      	bhi.n	8001294 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b5f      	subs	r3, #95	; 0x5f
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	4019      	ands	r1, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3b5f      	subs	r3, #95	; 0x5f
 8001286:	fa00 f203 	lsl.w	r2, r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
 8001292:	e01b      	b.n	80012cc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b7d      	subs	r3, #125	; 0x7d
 80012a6:	221f      	movs	r2, #31
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4019      	ands	r1, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b7d      	subs	r3, #125	; 0x7d
 80012c0:	fa00 f203 	lsl.w	r2, r0, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b09      	cmp	r3, #9
 80012d2:	d81a      	bhi.n	800130a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6959      	ldr	r1, [r3, #20]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	2207      	movs	r2, #7
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4019      	ands	r1, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	6898      	ldr	r0, [r3, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	e042      	b.n	8001390 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b13      	cmp	r3, #19
 8001310:	d81c      	bhi.n	800134c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6919      	ldr	r1, [r3, #16]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	3b1e      	subs	r3, #30
 8001324:	2207      	movs	r2, #7
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	4019      	ands	r1, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6898      	ldr	r0, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	3b1e      	subs	r3, #30
 800133e:	fa00 f203 	lsl.w	r2, r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	e021      	b.n	8001390 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b1a      	cmp	r3, #26
 8001352:	d81c      	bhi.n	800138e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68d9      	ldr	r1, [r3, #12]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	3b3c      	subs	r3, #60	; 0x3c
 8001366:	2207      	movs	r2, #7
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4019      	ands	r1, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6898      	ldr	r0, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	3b3c      	subs	r3, #60	; 0x3c
 8001380:	fa00 f203 	lsl.w	r2, r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	e000      	b.n	8001390 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800138e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b10      	cmp	r3, #16
 8001396:	d003      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139c:	2b11      	cmp	r3, #17
 800139e:	d121      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_ADC_ConfigChannel+0x294>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d11b      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_ADC_ConfigChannel+0x294>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_ADC_ConfigChannel+0x294>)
 80013b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b6:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d111      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_ADC_ConfigChannel+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_ADC_ConfigChannel+0x29c>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9a      	lsrs	r2, r3, #18
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013d6:	e002      	b.n	80013de <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3b01      	subs	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f9      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40012700 	.word	0x40012700
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff90 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff49 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff5e 	bl	800144c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff90 	bl	80014bc <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5f 	bl	8001468 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffb0 	bl	8001520 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015e2:	e154      	b.n	800188e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8146 	beq.w	8001888 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d005      	beq.n	8001614 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001610:	2b02      	cmp	r3, #2
 8001612:	d130      	bne.n	8001676 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800164a:	2201      	movs	r2, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 0201 	and.w	r2, r3, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b03      	cmp	r3, #3
 8001680:	d017      	beq.n	80016b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d123      	bne.n	8001706 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	6939      	ldr	r1, [r7, #16]
 8001702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0203 	and.w	r2, r3, #3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a0 	beq.w	8001888 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HAL_GPIO_Init+0x2e0>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a57      	ldr	r2, [pc, #348]	; (80018ac <HAL_GPIO_Init+0x2e0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	4b55      	ldr	r3, [pc, #340]	; (80018ac <HAL_GPIO_Init+0x2e0>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001760:	4a53      	ldr	r2, [pc, #332]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a4b      	ldr	r2, [pc, #300]	; (80018b4 <HAL_GPIO_Init+0x2e8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d019      	beq.n	80017c0 <HAL_GPIO_Init+0x1f4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_GPIO_Init+0x1f0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a49      	ldr	r2, [pc, #292]	; (80018bc <HAL_GPIO_Init+0x2f0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00d      	beq.n	80017b8 <HAL_GPIO_Init+0x1ec>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <HAL_GPIO_Init+0x2f4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d007      	beq.n	80017b4 <HAL_GPIO_Init+0x1e8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <HAL_GPIO_Init+0x2f8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_GPIO_Init+0x1e4>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e008      	b.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017b0:	2305      	movs	r3, #5
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e004      	b.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017c0:	2300      	movs	r3, #0
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	f002 0203 	and.w	r2, r2, #3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4093      	lsls	r3, r2
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017d2:	4937      	ldr	r1, [pc, #220]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001804:	4a30      	ldr	r2, [pc, #192]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f aea3 	bne.w	80015e4 <HAL_GPIO_Init+0x18>
  }
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0a8      	b.n	8001a68 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff f990 	bl	8000c50 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e00a      	b.n	8001964 <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3304      	adds	r3, #4
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	3301      	adds	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b0f      	cmp	r3, #15
 8001968:	d9f1      	bls.n	800194e <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0204 	orr.w	r2, r2, #4
 8001978:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_LCD_Init+0x174>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6851      	ldr	r1, [r2, #4]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6892      	ldr	r2, [r2, #8]
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	69d2      	ldr	r2, [r2, #28]
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6a12      	ldr	r2, [r2, #32]
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6992      	ldr	r2, [r2, #24]
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6053      	str	r3, [r2, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f85a 	bl	8001a74 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 80019f8:	f7ff fa64 	bl	8000ec4 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80019fe:	e00c      	b.n	8001a1a <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001a00:	f7ff fa60 	bl	8000ec4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a0e:	d904      	bls.n	8001a1a <HAL_LCD_Init+0x11e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2208      	movs	r2, #8
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e026      	b.n	8001a68 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d1eb      	bne.n	8001a00 <HAL_LCD_Init+0x104>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001a28:	f7ff fa4c 	bl	8000ec4 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001a2e:	e00c      	b.n	8001a4a <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001a30:	f7ff fa48 	bl	8000ec4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3e:	d904      	bls.n	8001a4a <HAL_LCD_Init+0x14e>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2210      	movs	r2, #16
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e00e      	b.n	8001a68 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d1eb      	bne.n	8001a30 <HAL_LCD_Init+0x134>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	fc00000f 	.word	0xfc00000f

08001a74 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fa20 	bl	8000ec4 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001a86:	e00c      	b.n	8001aa2 <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001a88:	f7ff fa1c 	bl	8000ec4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a96:	d904      	bls.n	8001aa2 <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e007      	b.n	8001ab2 <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d1eb      	bne.n	8001a88 <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e31d      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ace:	4b94      	ldr	r3, [pc, #592]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad8:	4b91      	ldr	r3, [pc, #580]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d07b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d006      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b87      	ldr	r3, [pc, #540]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x128>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d166      	bne.n	8001be4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e2f7      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x74>
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7e      	ldr	r2, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e02d      	b.n	8001b8c <HAL_RCC_OscConfig+0xd0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x96>
 8001b38:	4b79      	ldr	r3, [pc, #484]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a78      	ldr	r2, [pc, #480]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a75      	ldr	r2, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0xd0>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0xb8>
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a70      	ldr	r2, [pc, #448]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6d      	ldr	r2, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xd0>
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a69      	ldr	r2, [pc, #420]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a66      	ldr	r2, [pc, #408]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff f996 	bl	8000ec4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f992 	bl	8000ec4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e2ad      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe0>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f982 	bl	8000ec4 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f97e 	bl	8000ec4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e299      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bd6:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x108>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d05a      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d119      	bne.n	8001c32 <HAL_RCC_OscConfig+0x176>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d116      	bne.n	8001c32 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x160>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e276      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	493d      	ldr	r1, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c30:	e03a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_OscConfig+0x268>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f940 	bl	8000ec4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f93c 	bl	8000ec4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e257      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	492a      	ldr	r1, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e015      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x268>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff f91f 	bl	8000ec4 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f91b 	bl	8000ec4 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e236      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80b8 	beq.w	8001e26 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d170      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x218>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e21a      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d921      	bls.n	8001d28 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fc4b 	bl	8002584 <RCC_SetFlashLatencyFromMSIRange>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e208      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4906      	ldr	r1, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	061b      	lsls	r3, r3, #24
 8001d18:	4901      	ldr	r1, [pc, #4]	; (8001d20 <HAL_RCC_OscConfig+0x264>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	e020      	b.n	8001d62 <HAL_RCC_OscConfig+0x2a6>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d28:	4b99      	ldr	r3, [pc, #612]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4996      	ldr	r1, [pc, #600]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3a:	4b95      	ldr	r3, [pc, #596]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	061b      	lsls	r3, r3, #24
 8001d48:	4991      	ldr	r1, [pc, #580]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fc16 	bl	8002584 <RCC_SetFlashLatencyFromMSIRange>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1d3      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	0b5b      	lsrs	r3, r3, #13
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d72:	4a87      	ldr	r2, [pc, #540]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001d74:	6892      	ldr	r2, [r2, #8]
 8001d76:	0912      	lsrs	r2, r2, #4
 8001d78:	f002 020f 	and.w	r2, r2, #15
 8001d7c:	4985      	ldr	r1, [pc, #532]	; (8001f94 <HAL_RCC_OscConfig+0x4d8>)
 8001d7e:	5c8a      	ldrb	r2, [r1, r2]
 8001d80:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d82:	4a85      	ldr	r2, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x4dc>)
 8001d84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d86:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <HAL_RCC_OscConfig+0x4e0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f84e 	bl	8000e2c <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d045      	beq.n	8001e26 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	e1b5      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d029      	beq.n	8001dfa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001da6:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x4e4>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff f88a 	bl	8000ec4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db4:	f7ff f886 	bl	8000ec4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1a1      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dc6:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	496c      	ldr	r1, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	4967      	ldr	r1, [pc, #412]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dfa:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <HAL_RCC_OscConfig+0x4e4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f860 	bl	8000ec4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e08:	f7ff f85c 	bl	8000ec4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e177      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <HAL_RCC_OscConfig+0x4e8>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e40:	f7ff f840 	bl	8000ec4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff f83c 	bl	8000ec4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e157      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x38c>
 8001e66:	e015      	b.n	8001e94 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f829 	bl	8000ec4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f825 	bl	8000ec4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e140      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80b5 	beq.w	800200c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	4a36      	ldr	r2, [pc, #216]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6253      	str	r3, [r2, #36]	; 0x24
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_OscConfig+0x4ec>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d118      	bne.n	8001f0c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_RCC_OscConfig+0x4ec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x4ec>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe ffed 	bl	8000ec4 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7fe ffe9 	bl	8000ec4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	; 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e104      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_RCC_OscConfig+0x4ec>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x466>
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6353      	str	r3, [r2, #52]	; 0x34
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_OscConfig+0x4c2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x488>
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f34:	6353      	str	r3, [r2, #52]	; 0x34
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f40:	6353      	str	r3, [r2, #52]	; 0x34
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x4c2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6353      	str	r3, [r2, #52]	; 0x34
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6353      	str	r3, [r2, #52]	; 0x34
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x4c2>
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f70:	6353      	str	r3, [r2, #52]	; 0x34
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x4d4>)
 8001f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f7c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d024      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe ff9d 	bl	8000ec4 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f8c:	e019      	b.n	8001fc2 <HAL_RCC_OscConfig+0x506>
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	080028d4 	.word	0x080028d4
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	42470020 	.word	0x42470020
 8001fa4:	42470680 	.word	0x42470680
 8001fa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7fe ff8a 	bl	8000ec4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0a3      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc2:	4b54      	ldr	r3, [pc, #336]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ee      	beq.n	8001fac <HAL_RCC_OscConfig+0x4f0>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7fe ff78 	bl	8000ec4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7fe ff74 	bl	8000ec4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e08d      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ee      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	4a43      	ldr	r2, [pc, #268]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d079      	beq.n	8002108 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d056      	beq.n	80020c8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	2b02      	cmp	r3, #2
 8002020:	d13b      	bne.n	800209a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_RCC_OscConfig+0x65c>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe ff4c 	bl	8000ec4 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe ff48 	bl	8000ec4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e063      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204e:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	4319      	orrs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	430b      	orrs	r3, r1
 8002066:	492b      	ldr	r1, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x65c>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe ff27 	bl	8000ec4 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207a:	f7fe ff23 	bl	8000ec4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e03e      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x5be>
 8002098:	e036      	b.n	8002108 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_RCC_OscConfig+0x65c>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe ff10 	bl	8000ec4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe ff0c 	bl	8000ec4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e027      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5ec>
 80020c6:	e01f      	b.n	8002108 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e01a      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_OscConfig+0x658>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	42470060 	.word	0x42470060

0800211c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e11a      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d919      	bls.n	8002172 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_ClockConfig+0x34>
 8002144:	4b8a      	ldr	r3, [pc, #552]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a89      	ldr	r2, [pc, #548]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b87      	ldr	r3, [pc, #540]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 0201 	bic.w	r2, r3, #1
 8002158:	4985      	ldr	r1, [pc, #532]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002160:	4b83      	ldr	r3, [pc, #524]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0f9      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217e:	4b7d      	ldr	r3, [pc, #500]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	497a      	ldr	r1, [pc, #488]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 808e 	beq.w	80022ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d121      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0d7      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021be:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d115      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0cb      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0bf      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0b7      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b5f      	ldr	r3, [pc, #380]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	495c      	ldr	r1, [pc, #368]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fe5c 	bl	8000ec4 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d112      	bne.n	800223c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7fe fe54 	bl	8000ec4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e09b      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b08      	cmp	r3, #8
 8002238:	d1ee      	bne.n	8002218 <HAL_RCC_ClockConfig+0xfc>
 800223a:	e03e      	b.n	80022ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d112      	bne.n	800226a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	e00a      	b.n	800225c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002246:	f7fe fe3d 	bl	8000ec4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e084      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_ClockConfig+0x12a>
 8002268:	e027      	b.n	80022ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d11d      	bne.n	80022ae <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe fe26 	bl	8000ec4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e06d      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800228a:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d1ee      	bne.n	8002274 <HAL_RCC_ClockConfig+0x158>
 8002296:	e010      	b.n	80022ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fe14 	bl	8000ec4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e05b      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ee      	bne.n	8002298 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d219      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d105      	bne.n	80022da <HAL_RCC_ClockConfig+0x1be>
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0201 	bic.w	r2, r3, #1
 80022e2:	4923      	ldr	r1, [pc, #140]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_ClockConfig+0x254>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e034      	b.n	8002366 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4917      	ldr	r1, [pc, #92]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490f      	ldr	r1, [pc, #60]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f823 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCC_ClockConfig+0x258>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490b      	ldr	r1, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x25c>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x260>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fd66 	bl	8000e2c <HAL_InitTick>
 8002360:	4603      	mov	r3, r0
 8002362:	72fb      	strb	r3, [r7, #11]

  return status;
 8002364:	7afb      	ldrb	r3, [r7, #11]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	080028d4 	.word	0x080028d4
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b092      	sub	sp, #72	; 0x48
 800238a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800238c:	4b79      	ldr	r3, [pc, #484]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d00d      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 800239c:	2b0c      	cmp	r3, #12
 800239e:	f200 80d5 	bhi.w	800254c <HAL_RCC_GetSysClockFreq+0x1c8>
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x28>
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x2e>
 80023aa:	e0cf      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80023b0:	e0da      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80023b6:	e0d7      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	0c9b      	lsrs	r3, r3, #18
 80023bc:	f003 020f 	and.w	r2, r3, #15
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023c2:	5c9b      	ldrb	r3, [r3, r2]
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c8:	0d9b      	lsrs	r3, r3, #22
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d2:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d05d      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	2200      	movs	r2, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	4611      	mov	r1, r2
 80023e6:	4604      	mov	r4, r0
 80023e8:	460d      	mov	r5, r1
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	f04f 0000 	mov.w	r0, #0
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	0159      	lsls	r1, r3, #5
 80023f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023fc:	0150      	lsls	r0, r2, #5
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4621      	mov	r1, r4
 8002404:	1a51      	subs	r1, r2, r1
 8002406:	6139      	str	r1, [r7, #16]
 8002408:	4629      	mov	r1, r5
 800240a:	eb63 0301 	sbc.w	r3, r3, r1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800241c:	4659      	mov	r1, fp
 800241e:	018b      	lsls	r3, r1, #6
 8002420:	4651      	mov	r1, sl
 8002422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002426:	4651      	mov	r1, sl
 8002428:	018a      	lsls	r2, r1, #6
 800242a:	46d4      	mov	ip, sl
 800242c:	ebb2 080c 	subs.w	r8, r2, ip
 8002430:	4659      	mov	r1, fp
 8002432:	eb63 0901 	sbc.w	r9, r3, r1
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244a:	4690      	mov	r8, r2
 800244c:	4699      	mov	r9, r3
 800244e:	4623      	mov	r3, r4
 8002450:	eb18 0303 	adds.w	r3, r8, r3
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	462b      	mov	r3, r5
 8002458:	eb49 0303 	adc.w	r3, r9, r3
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800246a:	4629      	mov	r1, r5
 800246c:	024b      	lsls	r3, r1, #9
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	4604      	mov	r4, r0
 8002474:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002478:	4601      	mov	r1, r0
 800247a:	024a      	lsls	r2, r1, #9
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	2200      	movs	r2, #0
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
 8002486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800248c:	f7fd fe76 	bl	800017c <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4613      	mov	r3, r2
 8002496:	647b      	str	r3, [r7, #68]	; 0x44
 8002498:	e055      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	2200      	movs	r2, #0
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	627a      	str	r2, [r7, #36]	; 0x24
 80024a2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024a6:	4642      	mov	r2, r8
 80024a8:	464b      	mov	r3, r9
 80024aa:	f04f 0000 	mov.w	r0, #0
 80024ae:	f04f 0100 	mov.w	r1, #0
 80024b2:	0159      	lsls	r1, r3, #5
 80024b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b8:	0150      	lsls	r0, r2, #5
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	46c4      	mov	ip, r8
 80024c0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80024c4:	4640      	mov	r0, r8
 80024c6:	4649      	mov	r1, r9
 80024c8:	468c      	mov	ip, r1
 80024ca:	eb63 0b0c 	sbc.w	fp, r3, ip
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024e2:	ebb2 040a 	subs.w	r4, r2, sl
 80024e6:	eb63 050b 	sbc.w	r5, r3, fp
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	00eb      	lsls	r3, r5, #3
 80024f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f8:	00e2      	lsls	r2, r4, #3
 80024fa:	4614      	mov	r4, r2
 80024fc:	461d      	mov	r5, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	18e3      	adds	r3, r4, r3
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	460b      	mov	r3, r1
 8002506:	eb45 0303 	adc.w	r3, r5, r3
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002518:	4629      	mov	r1, r5
 800251a:	028b      	lsls	r3, r1, #10
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	4604      	mov	r4, r0
 8002522:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002526:	4601      	mov	r1, r0
 8002528:	028a      	lsls	r2, r1, #10
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	2200      	movs	r2, #0
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	61fa      	str	r2, [r7, #28]
 8002536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800253a:	f7fd fe1f 	bl	800017c <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4613      	mov	r3, r2
 8002544:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002548:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800254a:	e00d      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0b5b      	lsrs	r3, r3, #13
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	3301      	adds	r3, #1
 800255c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800256a:	4618      	mov	r0, r3
 800256c:	3748      	adds	r7, #72	; 0x48
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	00f42400 	.word	0x00f42400
 800257c:	007a1200 	.word	0x007a1200
 8002580:	080028c8 	.word	0x080028c8

08002584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d12c      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e016      	b.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6253      	str	r3, [r2, #36]	; 0x24
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80025d4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	4a17      	ldr	r2, [pc, #92]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80025e8:	d105      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025f0:	d101      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80025f2:	2301      	movs	r3, #1
 80025f4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 0201 	bic.w	r2, r3, #1
 8002610:	490b      	ldr	r1, [pc, #44]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40007000 	.word	0x40007000
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80ed 	beq.w	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	4a74      	ldr	r2, [pc, #464]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6253      	str	r3, [r2, #36]	; 0x24
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6b      	ldr	r2, [pc, #428]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc0b 	bl	8000ec4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe fc07 	bl	8000ec4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0be      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026d0:	4b5e      	ldr	r3, [pc, #376]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80026d8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d00f      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002702:	d108      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002704:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002710:	d101      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e095      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002716:	4b4d      	ldr	r3, [pc, #308]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800271e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d041      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d005      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	429a      	cmp	r2, r3
 800274c:	d02d      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d027      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800275a:	4b3c      	ldr	r3, [pc, #240]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002762:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002770:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d014      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fba0 	bl	8000ec4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002786:	e00a      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fb9c 	bl	8000ec4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e051      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027c2:	d10a      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80027d4:	491d      	ldr	r1, [pc, #116]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e6:	4919      	ldr	r1, [pc, #100]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002804:	d10a      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002816:	490d      	ldr	r1, [pc, #52]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800281e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	4908      	ldr	r1, [pc, #32]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800282a:	4313      	orrs	r3, r2
 800282c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40007000 	.word	0x40007000
 8002854:	424706dc 	.word	0x424706dc

08002858 <memset>:
 8002858:	4603      	mov	r3, r0
 800285a:	4402      	add	r2, r0
 800285c:	4293      	cmp	r3, r2
 800285e:	d100      	bne.n	8002862 <memset+0xa>
 8002860:	4770      	bx	lr
 8002862:	f803 1b01 	strb.w	r1, [r3], #1
 8002866:	e7f9      	b.n	800285c <memset+0x4>

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	2600      	movs	r6, #0
 800286c:	4d0c      	ldr	r5, [pc, #48]	; (80028a0 <__libc_init_array+0x38>)
 800286e:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 8002870:	1b64      	subs	r4, r4, r5
 8002872:	10a4      	asrs	r4, r4, #2
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	f000 f81a 	bl	80028b0 <_init>
 800287c:	2600      	movs	r6, #0
 800287e:	4d0a      	ldr	r5, [pc, #40]	; (80028a8 <__libc_init_array+0x40>)
 8002880:	4c0a      	ldr	r4, [pc, #40]	; (80028ac <__libc_init_array+0x44>)
 8002882:	1b64      	subs	r4, r4, r5
 8002884:	10a4      	asrs	r4, r4, #2
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002890:	4798      	blx	r3
 8002892:	3601      	adds	r6, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f855 3b04 	ldr.w	r3, [r5], #4
 800289a:	4798      	blx	r3
 800289c:	3601      	adds	r6, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	080028ec 	.word	0x080028ec
 80028a4:	080028ec 	.word	0x080028ec
 80028a8:	080028ec 	.word	0x080028ec
 80028ac:	080028f0 	.word	0x080028f0

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
