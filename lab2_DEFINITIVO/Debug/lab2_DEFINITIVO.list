
lab2_DEFINITIVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800386c  0800386c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000020  08003894  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003894  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c462  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e1b  00000000  00000000  0002c4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000973  00000000  00000000  0002ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014622  00000000  00000000  0002f8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddf3  00000000  00000000  00043edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082e5b  00000000  00000000  00051cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032cc  00000000  00000000  000d4b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d7df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08003828 	.word	0x08003828

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08003828 	.word	0x08003828

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <stopWheels>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void stopWheels(void) {
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    // Stop both motors
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9) << 16;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <stopWheels+0x14>)
 8000482:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
 8000486:	619a      	str	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40020800 	.word	0x40020800

08000494 <moveForward>:

void moveForward(void) {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
    // Move both motors forward
    GPIOC->BSRR = GPIO_PIN_6 | GPIO_PIN_8;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <moveForward+0x1c>)
 800049a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800049e:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7 | GPIO_PIN_9) << 16;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <moveForward+0x1c>)
 80004a2:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 80004a6:	619a      	str	r2, [r3, #24]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40020800 	.word	0x40020800

080004b4 <rightWheel>:

void rightWheel(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    // Turn right by moving right motor forward and left motor backward
    GPIOC->BSRR = GPIO_PIN_6;  // Activar el pin de dirección del motor izquierdo hacia adelante
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <rightWheel+0x24>)
 80004ba:	2240      	movs	r2, #64	; 0x40
 80004bc:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = GPIO_PIN_9;  // Activar el pin de dirección del motor derecho hacia atrás
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <rightWheel+0x24>)
 80004c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c4:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7 | GPIO_PIN_8) << 16; // Desactivar los pines de dirección opuestos
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <rightWheel+0x24>)
 80004c8:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80004cc:	619a      	str	r2, [r3, #24]
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40020800 	.word	0x40020800

080004dc <leftWheel>:

void leftWheel(void) {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
    // Turn left by moving left motor forward and right motor backward
    GPIOC->BSRR = GPIO_PIN_7;  // Activar el pin de dirección del motor izquierdo hacia adelante
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <leftWheel+0x24>)
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = GPIO_PIN_8;  // Activar el pin de dirección del motor derecho hacia atrás
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <leftWheel+0x24>)
 80004e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ec:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_9) << 16; // Desactivar los pines de dirección opuestos
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <leftWheel+0x24>)
 80004f0:	f04f 7210 	mov.w	r2, #37748736	; 0x2400000
 80004f4:	619a      	str	r2, [r3, #24]
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40020800 	.word	0x40020800

08000504 <moveBackward>:

void moveBackward(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
    // Move both motors backward by reversing the direction logic
	 GPIOC->BSRR = GPIO_PIN_7 | GPIO_PIN_9;  // Activar los pines de dirección opuestos
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <moveBackward+0x1c>)
 800050a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800050e:	619a      	str	r2, [r3, #24]
	    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_8) << 16;  // Desactivar los pines de dirección hacia adelante
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <moveBackward+0x1c>)
 8000512:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8000516:	619a      	str	r2, [r3, #24]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40020800 	.word	0x40020800

08000524 <autonomousMode>:


void autonomousMode(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
		if(SENSOR_1 == 1 && SENSOR_2 == 0){
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <autonomousMode+0x90>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10a      	bne.n	8000546 <autonomousMode+0x22>
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <autonomousMode+0x94>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d106      	bne.n	8000546 <autonomousMode+0x22>
				leftWheel();
 8000538:	f7ff ffd0 	bl	80004dc <leftWheel>
				GPIOB->MODER = (1<<(8*2));
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <autonomousMode+0x98>)
 800053e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	e033      	b.n	80005ae <autonomousMode+0x8a>
			} else if(SENSOR_1 == 0 && SENSOR_2 == 1){
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <autonomousMode+0x90>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10a      	bne.n	8000564 <autonomousMode+0x40>
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <autonomousMode+0x94>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d106      	bne.n	8000564 <autonomousMode+0x40>
				rightWheel();
 8000556:	f7ff ffad 	bl	80004b4 <rightWheel>
				GPIOB->MODER = (1<<(8*2));
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <autonomousMode+0x98>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	e024      	b.n	80005ae <autonomousMode+0x8a>
			} else if(SENSOR_1 == 1 && SENSOR_2 == 1){
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <autonomousMode+0x90>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d10a      	bne.n	8000582 <autonomousMode+0x5e>
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <autonomousMode+0x94>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d106      	bne.n	8000582 <autonomousMode+0x5e>
				stopWheels();
 8000574:	f7ff ff82 	bl	800047c <stopWheels>
				GPIOB->MODER = (1<<(8*2));
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <autonomousMode+0x98>)
 800057a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	e015      	b.n	80005ae <autonomousMode+0x8a>
			} else if(SENSOR_1 == 0 && SENSOR_2 == 0){
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <autonomousMode+0x90>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d10a      	bne.n	80005a0 <autonomousMode+0x7c>
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <autonomousMode+0x94>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d106      	bne.n	80005a0 <autonomousMode+0x7c>
				moveForward();
 8000592:	f7ff ff7f 	bl	8000494 <moveForward>
				GPIOB->MODER = ~(1<<(8*2));
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <autonomousMode+0x98>)
 8000598:	f46f 3280 	mvn.w	r2, #65536	; 0x10000
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	e006      	b.n	80005ae <autonomousMode+0x8a>
			} else {
				stopWheels();
 80005a0:	f7ff ff6c 	bl	800047c <stopWheels>
				GPIOB->MODER = (1<<(8*2));
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <autonomousMode+0x98>)
 80005a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005aa:	601a      	str	r2, [r3, #0]
			}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000194 	.word	0x20000194
 80005b8:	20000195 	.word	0x20000195
 80005bc:	40020400 	.word	0x40020400

080005c0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){  //for the right sensor
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	if(EXTI -> PR == (1<<1)){
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <EXTI1_IRQHandler+0x30>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d10c      	bne.n	80005e6 <EXTI1_IRQHandler+0x26>
		if(carState == 1){
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <EXTI1_IRQHandler+0x34>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d102      	bne.n	80005da <EXTI1_IRQHandler+0x1a>
			SENSOR_1 = 1;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <EXTI1_IRQHandler+0x38>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
		}
		EXTI -> PR |= (1<<1); // clean the flags with a 1
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <EXTI1_IRQHandler+0x30>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <EXTI1_IRQHandler+0x30>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6153      	str	r3, [r2, #20]
	}

}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000197 	.word	0x20000197
 80005f8:	20000194 	.word	0x20000194

080005fc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){  //for the left sensor
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	if(EXTI -> PR == (1<<2)){
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <EXTI2_IRQHandler+0x30>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d10c      	bne.n	8000622 <EXTI2_IRQHandler+0x26>
		if(carState == 1){
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <EXTI2_IRQHandler+0x34>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <EXTI2_IRQHandler+0x1a>
			SENSOR_2 = 1;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <EXTI2_IRQHandler+0x38>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
		}
		EXTI -> PR |= (1<<2); //clean the flags with a 1
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI2_IRQHandler+0x30>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI2_IRQHandler+0x30>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6153      	str	r3, [r2, #20]
	}

}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	20000197 	.word	0x20000197
 8000634:	20000195 	.word	0x20000195

08000638 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	if((TIM4->SR & (1<<1))!=0){ // Check if Timer 4 interrupt flag is set
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <TIM4_IRQHandler+0x44>)
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	f003 0302 	and.w	r3, r3, #2
 8000644:	2b00      	cmp	r3, #0
 8000646:	d015      	beq.n	8000674 <TIM4_IRQHandler+0x3c>
		if(state == 0){
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <TIM4_IRQHandler+0x48>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <TIM4_IRQHandler+0x20>
			state = 1;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <TIM4_IRQHandler+0x48>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e002      	b.n	800065e <TIM4_IRQHandler+0x26>
		}
		else{
			state = 0;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <TIM4_IRQHandler+0x48>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		}

		TIM4->CCR1 += 250; // Increment the value in the capture/compare register 1 of Timer 4 by 250
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <TIM4_IRQHandler+0x44>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <TIM4_IRQHandler+0x44>)
 8000664:	33fa      	adds	r3, #250	; 0xfa
 8000666:	6353      	str	r3, [r2, #52]	; 0x34

		TIM4->SR &= ~(1<<1); // Clear the interrupt flag of Timer 4
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <TIM4_IRQHandler+0x44>)
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <TIM4_IRQHandler+0x44>)
 800066e:	f023 0302 	bic.w	r3, r3, #2
 8000672:	6113      	str	r3, [r2, #16]
	}
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40000800 	.word	0x40000800
 8000680:	20000196 	.word	0x20000196

08000684 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
    if ((ADC1->SR & (1<<1)) != 0) {
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <ADC1_IRQHandler+0x24>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <ADC1_IRQHandler+0x1a>
        value = ADC1->DR; //Read the value of the ADC
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <ADC1_IRQHandler+0x24>)
 8000696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <ADC1_IRQHandler+0x28>)
 800069c:	801a      	strh	r2, [r3, #0]


    }
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40012400 	.word	0x40012400
 80006ac:	20000198 	.word	0x20000198

080006b0 <adjustSpeed>:


void adjustSpeed(unsigned int value) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	unsigned int speed = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]

	// Loop through the speeds array until the appropriate speed range is found
	for(unsigned int i = 0; i < selection; i++){
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e03a      	b.n	8000738 <adjustSpeed+0x88>

	    // Check if the input value falls within the current speed range
	    if(speeds[i] <= value && value <= speeds[i+1]){
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <adjustSpeed+0x9c>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d330      	bcc.n	8000732 <adjustSpeed+0x82>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a1d      	ldr	r2, [pc, #116]	; (800074c <adjustSpeed+0x9c>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d828      	bhi.n	8000732 <adjustSpeed+0x82>
	    	if (value <= speeds[1]) {
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <adjustSpeed+0x9c>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d808      	bhi.n	80006fc <adjustSpeed+0x4c>
                // Set speed to 50 and update the PWM duty cycle for both motors
    		    speed = 50;
 80006ea:	2332      	movs	r3, #50	; 0x32
 80006ec:	60bb      	str	r3, [r7, #8]
    		    TIM3->CCR2 = speed;
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <adjustSpeed+0xa0>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	6393      	str	r3, [r2, #56]	; 0x38
    		    TIM3->CCR4 = speed;
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <adjustSpeed+0xa0>)
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	e01a      	b.n	8000732 <adjustSpeed+0x82>

    		} else if (value <= speeds[2]) {
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <adjustSpeed+0x9c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	429a      	cmp	r2, r3
 8000704:	d808      	bhi.n	8000718 <adjustSpeed+0x68>
                // Set speed to 70 and update the PWM duty cycle for both motors
    		    speed = 70;
 8000706:	2346      	movs	r3, #70	; 0x46
 8000708:	60bb      	str	r3, [r7, #8]
    		    TIM3->CCR2 = speed;
 800070a:	4a11      	ldr	r2, [pc, #68]	; (8000750 <adjustSpeed+0xa0>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	6393      	str	r3, [r2, #56]	; 0x38
    		    TIM3->CCR4 = speed;
 8000710:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <adjustSpeed+0xa0>)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	e00c      	b.n	8000732 <adjustSpeed+0x82>

    		} else if (value <= speeds[3]) {
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <adjustSpeed+0x9c>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d807      	bhi.n	8000732 <adjustSpeed+0x82>
                // Set speed to 100 and update the PWM duty cycle for both motors
    		    speed = 100;
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	60bb      	str	r3, [r7, #8]
    		    TIM3->CCR2 = speed;
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <adjustSpeed+0xa0>)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	6393      	str	r3, [r2, #56]	; 0x38
    		    TIM3->CCR4 = speed;
 800072c:	4a08      	ldr	r2, [pc, #32]	; (8000750 <adjustSpeed+0xa0>)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
	for(unsigned int i = 0; i < selection; i++){
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d9c1      	bls.n	80006c2 <adjustSpeed+0x12>
    		}
	    }
	}
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000
 8000750:	40000400 	.word	0x40000400

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fddd 	bl	8001316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 fa14 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 fbd4 	bl	8000f0c <MX_GPIO_Init>
  MX_ADC_Init();
 8000764:	f000 fa78 	bl	8000c58 <MX_ADC_Init>
  MX_LCD_Init();
 8000768:	f000 fad0 	bl	8000d0c <MX_LCD_Init>
  MX_TS_Init();
 800076c:	f000 fb9e 	bl	8000eac <MX_TS_Init>
  MX_TIM4_Init();
 8000770:	f000 fb4e 	bl	8000e10 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000774:	f000 fba0 	bl	8000eb8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000778:	f000 fafc 	bl	8000d74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Put PC6 PC7 PC8 PC9 as digital outputs (00)
  GPIOC->MODER &= ~(1 << (6*2+1));
 800077c:	4b98      	ldr	r3, [pc, #608]	; (80009e0 <main+0x28c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a97      	ldr	r2, [pc, #604]	; (80009e0 <main+0x28c>)
 8000782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000786:	6013      	str	r3, [r2, #0]
     GPIOC->MODER |= (1 << (6*2));
 8000788:	4b95      	ldr	r3, [pc, #596]	; (80009e0 <main+0x28c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a94      	ldr	r2, [pc, #592]	; (80009e0 <main+0x28c>)
 800078e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000792:	6013      	str	r3, [r2, #0]

     GPIOC->MODER &= ~(1 << (7*2+1));
 8000794:	4b92      	ldr	r3, [pc, #584]	; (80009e0 <main+0x28c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a91      	ldr	r2, [pc, #580]	; (80009e0 <main+0x28c>)
 800079a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800079e:	6013      	str	r3, [r2, #0]
     GPIOC->MODER |= (1 << (7*2));
 80007a0:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <main+0x28c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a8e      	ldr	r2, [pc, #568]	; (80009e0 <main+0x28c>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]

     GPIOC->MODER &= ~(1 << (8*2+1));
 80007ac:	4b8c      	ldr	r3, [pc, #560]	; (80009e0 <main+0x28c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a8b      	ldr	r2, [pc, #556]	; (80009e0 <main+0x28c>)
 80007b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007b6:	6013      	str	r3, [r2, #0]
     GPIOC->MODER |= (1 << (8*2));
 80007b8:	4b89      	ldr	r3, [pc, #548]	; (80009e0 <main+0x28c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a88      	ldr	r2, [pc, #544]	; (80009e0 <main+0x28c>)
 80007be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c2:	6013      	str	r3, [r2, #0]

     GPIOC->MODER &= ~(1 << (9*2+1));
 80007c4:	4b86      	ldr	r3, [pc, #536]	; (80009e0 <main+0x28c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a85      	ldr	r2, [pc, #532]	; (80009e0 <main+0x28c>)
 80007ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80007ce:	6013      	str	r3, [r2, #0]
     GPIOC->MODER |= (1 << (9*2));
 80007d0:	4b83      	ldr	r3, [pc, #524]	; (80009e0 <main+0x28c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a82      	ldr	r2, [pc, #520]	; (80009e0 <main+0x28c>)
 80007d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007da:	6013      	str	r3, [r2, #0]

     // PC1 & PC2 as digital input (00)
        GPIOC->MODER &= ~(1 << (1*2+1));
 80007dc:	4b80      	ldr	r3, [pc, #512]	; (80009e0 <main+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a7f      	ldr	r2, [pc, #508]	; (80009e0 <main+0x28c>)
 80007e2:	f023 0308 	bic.w	r3, r3, #8
 80007e6:	6013      	str	r3, [r2, #0]
        GPIOC->MODER &= ~(1 << (1*2));
 80007e8:	4b7d      	ldr	r3, [pc, #500]	; (80009e0 <main+0x28c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a7c      	ldr	r2, [pc, #496]	; (80009e0 <main+0x28c>)
 80007ee:	f023 0304 	bic.w	r3, r3, #4
 80007f2:	6013      	str	r3, [r2, #0]

        GPIOC->MODER &= ~(1 << (2*2+1));
 80007f4:	4b7a      	ldr	r3, [pc, #488]	; (80009e0 <main+0x28c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a79      	ldr	r2, [pc, #484]	; (80009e0 <main+0x28c>)
 80007fa:	f023 0320 	bic.w	r3, r3, #32
 80007fe:	6013      	str	r3, [r2, #0]
        GPIOC->MODER &= ~(1 << (2*2));
 8000800:	4b77      	ldr	r3, [pc, #476]	; (80009e0 <main+0x28c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a76      	ldr	r2, [pc, #472]	; (80009e0 <main+0x28c>)
 8000806:	f023 0310 	bic.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]

        GPIOA->MODER &= ~(1 << (0*2+1));
 800080c:	4b75      	ldr	r3, [pc, #468]	; (80009e4 <main+0x290>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a74      	ldr	r2, [pc, #464]	; (80009e4 <main+0x290>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	6013      	str	r3, [r2, #0]
        GPIOA->MODER &= ~(1 << (0*2));
 8000818:	4b72      	ldr	r3, [pc, #456]	; (80009e4 <main+0x290>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a71      	ldr	r2, [pc, #452]	; (80009e4 <main+0x290>)
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]

    	    //Configure the EXTI1
        //We make the first infrared interruption
      SYSCFG -> EXTICR[0] = 0;
 8000824:	4b70      	ldr	r3, [pc, #448]	; (80009e8 <main+0x294>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  	    EXTI -> IMR |= (1<<1);
 800082a:	4b70      	ldr	r3, [pc, #448]	; (80009ec <main+0x298>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a6f      	ldr	r2, [pc, #444]	; (80009ec <main+0x298>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6013      	str	r3, [r2, #0]
  	    EXTI -> RTSR |= (1<<1);
 8000836:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <main+0x298>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	4a6c      	ldr	r2, [pc, #432]	; (80009ec <main+0x298>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6093      	str	r3, [r2, #8]
   	    EXTI -> FTSR |= (1<<1);
 8000842:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <main+0x298>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4a69      	ldr	r2, [pc, #420]	; (80009ec <main+0x298>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	60d3      	str	r3, [r2, #12]
   	    NVIC->ISER[0] |= (1 << 7);  //EXTI1 position 7
 800084e:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <main+0x29c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <main+0x29c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6013      	str	r3, [r2, #0]


    	     //Configure the EXTI2
  	    SYSCFG -> EXTICR[0] = 0;
 800085a:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <main+0x294>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
   	    EXTI -> IMR |= (1<<2);
 8000860:	4b62      	ldr	r3, [pc, #392]	; (80009ec <main+0x298>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a61      	ldr	r2, [pc, #388]	; (80009ec <main+0x298>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6013      	str	r3, [r2, #0]
   	    EXTI -> RTSR |= (1<<2);
 800086c:	4b5f      	ldr	r3, [pc, #380]	; (80009ec <main+0x298>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a5e      	ldr	r2, [pc, #376]	; (80009ec <main+0x298>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6093      	str	r3, [r2, #8]
   	    EXTI -> FTSR |= (1<<2);
 8000878:	4b5c      	ldr	r3, [pc, #368]	; (80009ec <main+0x298>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a5b      	ldr	r2, [pc, #364]	; (80009ec <main+0x298>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	60d3      	str	r3, [r2, #12]
   	    NVIC->ISER[0] |= (1 << 8); //EXTI2 position 8
 8000884:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <main+0x29c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <main+0x29c>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088e:	6013      	str	r3, [r2, #0]


       //Configure buzzer
       GPIOB->MODER &= ~(1 << (8 * 2));
 8000890:	4b58      	ldr	r3, [pc, #352]	; (80009f4 <main+0x2a0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a57      	ldr	r2, [pc, #348]	; (80009f4 <main+0x2a0>)
 8000896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089a:	6013      	str	r3, [r2, #0]
       GPIOB->MODER |= (1 << (8 * 2+1));
 800089c:	4b55      	ldr	r3, [pc, #340]	; (80009f4 <main+0x2a0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a54      	ldr	r2, [pc, #336]	; (80009f4 <main+0x2a0>)
 80008a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a6:	6013      	str	r3, [r2, #0]

       //Configuration TIM4
       TIM4->CR1 = 0;
 80008a8:	4b53      	ldr	r3, [pc, #332]	; (80009f8 <main+0x2a4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
       TIM4->CR2 = 0;
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <main+0x2a4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
       TIM4->SMCR = 0;
 80008b4:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <main+0x2a4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]

       TIM4->CNT = 0;
 80008ba:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <main+0x2a4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
       TIM4->PSC = 31999;
 80008c0:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <main+0x2a4>)
 80008c2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
       TIM4->ARR = 0xFFFF;
 80008c8:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <main+0x2a4>)
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
       TIM4->CCR1 = 250;
 80008d0:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <main+0x2a4>)
 80008d2:	22fa      	movs	r2, #250	; 0xfa
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34

       TIM4->CCMR1 = 0;
 80008d6:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <main+0x2a4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
       TIM4->CCMR2 = 0;
 80008dc:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <main+0x2a4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
       TIM4->CCER = 0;
 80008e2:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <main+0x2a4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]

       TIM4->DIER = (1<<1);
 80008e8:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <main+0x2a4>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	60da      	str	r2, [r3, #12]

       TIM4->EGR |= 0x0001;
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <main+0x2a4>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a41      	ldr	r2, [pc, #260]	; (80009f8 <main+0x2a4>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6153      	str	r3, [r2, #20]
       TIM4->SR = 0;
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <main+0x2a4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
       TIM4->CR1 |= 0x0001;
 8000900:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <main+0x2a4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a3c      	ldr	r2, [pc, #240]	; (80009f8 <main+0x2a4>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6013      	str	r3, [r2, #0]

       NVIC->ISER[0] |= (1 << 30);
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <main+0x29c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a37      	ldr	r2, [pc, #220]	; (80009f0 <main+0x29c>)
 8000912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000916:	6013      	str	r3, [r2, #0]

       //PA5 as an input(00)
       GPIOA->MODER |= 0x00000C00;
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <main+0x290>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <main+0x290>)
 800091e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000922:	6013      	str	r3, [r2, #0]


       ADC1 -> CR2 &= ~(0x00000001);//MAKE SURE THE POWER IS OFF
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <main+0x2a8>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	4a34      	ldr	r2, [pc, #208]	; (80009fc <main+0x2a8>)
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6093      	str	r3, [r2, #8]
       ADC1 -> CR1 = 0x00000020;
 8000930:	4b32      	ldr	r3, [pc, #200]	; (80009fc <main+0x2a8>)
 8000932:	2220      	movs	r2, #32
 8000934:	605a      	str	r2, [r3, #4]
       ADC1 -> CR2 = 0x00000412;
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <main+0x2a8>)
 8000938:	f240 4212 	movw	r2, #1042	; 0x412
 800093c:	609a      	str	r2, [r3, #8]
       ADC1 -> SQR1 = 0x00000000;//I JUST WANT ONE CONVERSION
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <main+0x2a8>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
       ADC1 -> SQR5 = 0x00000005;
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <main+0x2a8>)
 8000946:	2205      	movs	r2, #5
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
       ADC1 -> CR2 |= 0x00000001;//POWER ON
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <main+0x2a8>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <main+0x2a8>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6093      	str	r3, [r2, #8]
       	 while ((ADC1->SR&0x0040)==0); // If ADCONS = 0, I wait till converter is ready
 8000956:	bf00      	nop
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <main+0x2a8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <main+0x204>
       ADC1->CR2 |= 0x40000000;
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <main+0x2a8>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	4a24      	ldr	r2, [pc, #144]	; (80009fc <main+0x2a8>)
 800096a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800096e:	6093      	str	r3, [r2, #8]
       NVIC->ISER[0] |= (1<<18);
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <main+0x29c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <main+0x29c>)
 8000976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097a:	6013      	str	r3, [r2, #0]
         	// PWM Configuration for pin PC6 and channel 1 of TIM3
       TIM3->CR1 = 0x0000; // Disable TIM3
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <main+0x2ac>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
       TIM3->CR2 = 0x0000; // Trigger mode configuration
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <main+0x2ac>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
       TIM3->SMCR = 0; // Synchronization control configuration
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <main+0x2ac>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]

       TIM3->PSC = 319; // Prescaler configuration
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <main+0x2ac>)
 8000990:	f240 123f 	movw	r2, #319	; 0x13f
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
       TIM3->CNT = 0; // Initialize counter
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <main+0x2ac>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
       TIM3->ARR = 99; // Auto-reload value configuration
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <main+0x2ac>)
 800099e:	2263      	movs	r2, #99	; 0x63
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
       TIM3->CCR2 = 1; // Duty cycle configuration (DC debe estar definido previamente)
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <main+0x2ac>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
       TIM3->CCR4 = 1;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <main+0x2ac>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40

       TIM3->DIER = 0x0000; // Disable interrupts
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <main+0x2ac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
       TIM3->DCR = 0;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <main+0x2ac>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	649a      	str	r2, [r3, #72]	; 0x48
         	//PC7 ch2

       TIM3->CCMR1 |= (1<<(5*2+1)); // Clear channel 1 configuration bits
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <main+0x2ac>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <main+0x2ac>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c4:	6193      	str	r3, [r2, #24]
       TIM3->CCMR1 |= (1<<(7*2));	//1
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <main+0x2ac>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <main+0x2ac>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6193      	str	r3, [r2, #24]
       TIM3->CCMR1 |= (1<<(6*2+1));	//1
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <main+0x2ac>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <main+0x2ac>)
 80009d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	e011      	b.n	8000a04 <main+0x2b0>
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40010000 	.word	0x40010000
 80009ec:	40010400 	.word	0x40010400
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40000800 	.word	0x40000800
 80009fc:	40012400 	.word	0x40012400
 8000a00:	40000400 	.word	0x40000400
       TIM3->CCMR1 &= ~(1<<(6*2));	//0
 8000a04:	4b5a      	ldr	r3, [pc, #360]	; (8000b70 <main+0x41c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a59      	ldr	r2, [pc, #356]	; (8000b70 <main+0x41c>)
 8000a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a0e:	6193      	str	r3, [r2, #24]
       //PC9 ch4
       TIM3->CCMR2 |= (1<<(5*2+1));	//PE
 8000a10:	4b57      	ldr	r3, [pc, #348]	; (8000b70 <main+0x41c>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	4a56      	ldr	r2, [pc, #344]	; (8000b70 <main+0x41c>)
 8000a16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a1a:	61d3      	str	r3, [r2, #28]
       //Los 3 siguientes para PWM (ver manual)
       	TIM3->CCMR2 |= (1<<(7*2));	//1
 8000a1c:	4b54      	ldr	r3, [pc, #336]	; (8000b70 <main+0x41c>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a53      	ldr	r2, [pc, #332]	; (8000b70 <main+0x41c>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	61d3      	str	r3, [r2, #28]
       	TIM3->CCMR2 |= (1<<(6*2+1));	//1
 8000a28:	4b51      	ldr	r3, [pc, #324]	; (8000b70 <main+0x41c>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <main+0x41c>)
 8000a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a32:	61d3      	str	r3, [r2, #28]
       	TIM3->CCMR2 &= ~(1<<(6*2));	//0
 8000a34:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <main+0x41c>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a4d      	ldr	r2, [pc, #308]	; (8000b70 <main+0x41c>)
 8000a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a3e:	61d3      	str	r3, [r2, #28]



       	TIM3->CCER |= (1<<(2*2));		//CC1E
 8000a40:	4b4b      	ldr	r3, [pc, #300]	; (8000b70 <main+0x41c>)
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	4a4a      	ldr	r2, [pc, #296]	; (8000b70 <main+0x41c>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6213      	str	r3, [r2, #32]
       	TIM3->CCER |= (1<<(6*2));		//CC1E
 8000a4c:	4b48      	ldr	r3, [pc, #288]	; (8000b70 <main+0x41c>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a47      	ldr	r2, [pc, #284]	; (8000b70 <main+0x41c>)
 8000a52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a56:	6213      	str	r3, [r2, #32]
       	TIM3->CR1 |= (1<<(3*2+1));		//HW (bit ARPE)
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <main+0x41c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <main+0x41c>)
 8000a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a62:	6013      	str	r3, [r2, #0]
       	TIM3->EGR |= (1<<0);		//UG
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <main+0x41c>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a41      	ldr	r2, [pc, #260]	; (8000b70 <main+0x41c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6153      	str	r3, [r2, #20]
       	TIM3->CR1 |= (1<<0);		//ON
 8000a70:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <main+0x41c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a3e      	ldr	r2, [pc, #248]	; (8000b70 <main+0x41c>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]
       	TIM3->SR = 0;				//FLAG
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <main+0x41c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]


       	TIM3->CCR2 = 20;
 8000a82:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <main+0x41c>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
      	TIM3->CCR4 = 20;
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <main+0x41c>)
 8000a8a:	2214      	movs	r2, #20
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40


        NVIC->ISER[0] |= (1 << 29);
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <main+0x420>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a38      	ldr	r2, [pc, #224]	; (8000b74 <main+0x420>)
 8000a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a98:	6013      	str	r3, [r2, #0]

        HAL_UART_Transmit(&huart1, &data[0], 1, 10000);
 8000a9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4935      	ldr	r1, [pc, #212]	; (8000b78 <main+0x424>)
 8000aa2:	4836      	ldr	r0, [pc, #216]	; (8000b7c <main+0x428>)
 8000aa4:	f002 fc2c 	bl	8003300 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  adjustSpeed(value);
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <main+0x42c>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdff 	bl	80006b0 <adjustSpeed>
	  if (HAL_UART_Receive(&huart1, data, 1, 10000) == HAL_OK) {
 8000ab2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	492f      	ldr	r1, [pc, #188]	; (8000b78 <main+0x424>)
 8000aba:	4830      	ldr	r0, [pc, #192]	; (8000b7c <main+0x428>)
 8000abc:	f002 fca3 	bl	8003406 <HAL_UART_Receive>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f0      	bne.n	8000aa8 <main+0x354>

		          switch (data[0]) {
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <main+0x424>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	3b41      	subs	r3, #65	; 0x41
 8000acc:	2b12      	cmp	r3, #18
 8000ace:	d84c      	bhi.n	8000b6a <main+0x416>
 8000ad0:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <main+0x384>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000b61 	.word	0x08000b61
 8000adc:	08000b55 	.word	0x08000b55
 8000ae0:	08000b6b 	.word	0x08000b6b
 8000ae4:	08000b6b 	.word	0x08000b6b
 8000ae8:	08000b6b 	.word	0x08000b6b
 8000aec:	08000b25 	.word	0x08000b25
 8000af0:	08000b6b 	.word	0x08000b6b
 8000af4:	08000b6b 	.word	0x08000b6b
 8000af8:	08000b6b 	.word	0x08000b6b
 8000afc:	08000b6b 	.word	0x08000b6b
 8000b00:	08000b6b 	.word	0x08000b6b
 8000b04:	08000b49 	.word	0x08000b49
 8000b08:	08000b6b 	.word	0x08000b6b
 8000b0c:	08000b6b 	.word	0x08000b6b
 8000b10:	08000b6b 	.word	0x08000b6b
 8000b14:	08000b6b 	.word	0x08000b6b
 8000b18:	08000b6b 	.word	0x08000b6b
 8000b1c:	08000b3d 	.word	0x08000b3d
 8000b20:	08000b31 	.word	0x08000b31
		              case 'F':
		            	  carState=0;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <main+0x430>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
		                  moveForward();
 8000b2a:	f7ff fcb3 	bl	8000494 <moveForward>
		                  break;
 8000b2e:	e01d      	b.n	8000b6c <main+0x418>
		              case 'S':
		            	  carState=0;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <main+0x430>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
		                  stopWheels();
 8000b36:	f7ff fca1 	bl	800047c <stopWheels>
		                  break;
 8000b3a:	e017      	b.n	8000b6c <main+0x418>
		              case 'R':
		            	  carState=0;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <main+0x430>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	             	  rightWheel();
 8000b42:	f7ff fcb7 	bl	80004b4 <rightWheel>
	              	 break;
 8000b46:	e011      	b.n	8000b6c <main+0x418>
	                 case 'L':
	                	 carState=0;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <main+0x430>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	           	      leftWheel();
 8000b4e:	f7ff fcc5 	bl	80004dc <leftWheel>
	           	     break;
 8000b52:	e00b      	b.n	8000b6c <main+0x418>
	                 case 'B':
	                	 carState=0;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <main+0x430>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
	           	     moveBackward();
 8000b5a:	f7ff fcd3 	bl	8000504 <moveBackward>
		               break;
 8000b5e:	e005      	b.n	8000b6c <main+0x418>
	                 case 'A':
	                	 carState=1;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <main+0x430>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
	                	 autonomousMode();
 8000b66:	f7ff fcdd 	bl	8000524 <autonomousMode>
		              default:
		                  // Handle any unexpected commands
		                  break;
 8000b6a:	bf00      	nop
	  adjustSpeed(value);
 8000b6c:	e79c      	b.n	8000aa8 <main+0x354>
 8000b6e:	bf00      	nop
 8000b70:	40000400 	.word	0x40000400
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	2000019c 	.word	0x2000019c
 8000b7c:	2000014c 	.word	0x2000014c
 8000b80:	20000198 	.word	0x20000198
 8000b84:	20000197 	.word	0x20000197

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	2234      	movs	r2, #52	; 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fe1a 	bl	80037d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000bbe:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bde:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000be8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f9da 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bfa:	f000 f9cb 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fcf5 	bl	8002608 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c24:	f000 f9b6 	bl	8000f94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LCD;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c30:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c36:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ffaa 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c46:	f000 f9a5 	bl	8000f94 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3758      	adds	r7, #88	; 0x58
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40007000 	.word	0x40007000

08000c58 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <MX_ADC_Init+0xb0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_ADC_Init+0xac>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_ADC_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_ADC_Init+0xac>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_ADC_Init+0xac>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_ADC_Init+0xac>)
 8000cb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_ADC_Init+0xac>)
 8000cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_ADC_Init+0xac>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_ADC_Init+0xac>)
 8000cce:	f000 fb91 	bl	80013f4 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000cd8:	f000 f95c 	bl	8000f94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_ADC_Init+0xac>)
 8000cee:	f000 fcc7 	bl	8001680 <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000cf8:	f000 f94c 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000003c 	.word	0x2000003c
 8000d08:	40012400 	.word	0x40012400

08000d0c <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <MX_LCD_Init+0x64>)
 8000d14:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d24:	220c      	movs	r2, #12
 8000d26:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_LCD_Init+0x60>)
 8000d5a:	f001 f845 	bl	8001de8 <HAL_LCD_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f000 f916 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000090 	.word	0x20000090
 8000d70:	40002400 	.word	0x40002400

08000d74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <MX_TIM3_Init+0x98>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000db8:	f001 fff6 	bl	8002da8 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000dc2:	f000 f8e7 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000dd4:	f002 f827 	bl	8002e26 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 f8d9 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_TIM3_Init+0x94>)
 8000df0:	f002 f9d8 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000dfa:	f000 f8cb 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000cc 	.word	0x200000cc
 8000e0c:	40000400 	.word	0x40000400

08000e10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <MX_TIM4_Init+0x98>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e54:	f001 ffa8 	bl	8002da8 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e5e:	f000 f899 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e70:	f001 ffd9 	bl	8002e26 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f88b 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e8c:	f002 f98a 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e96:	f000 f87d 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000010c 	.word	0x2000010c
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_USART1_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	f002 f9b6 	bl	8003260 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000efa:	f000 f84b 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000014c 	.word	0x2000014c
 8000f08:	40013800 	.word	0x40013800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_GPIO_Init+0x80>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_GPIO_Init+0x84>)
 8000f80:	f000 fdb2 	bl	8001ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	6253      	str	r3, [r2, #36]	; 0x24
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6213      	str	r3, [r2, #32]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6253      	str	r3, [r2, #36]	; 0x24
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fd46 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_ADC_MspInit>:
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x74>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d123      	bne.n	800106a <HAL_ADC_MspInit+0x6a>
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_ADC_MspInit+0x78>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_ADC_MspInit+0x78>)
 8001028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_ADC_MspInit+0x78>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_ADC_MspInit+0x78>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_ADC_MspInit+0x78>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_ADC_MspInit+0x78>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2310      	movs	r3, #16
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	2303      	movs	r3, #3
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_ADC_MspInit+0x7c>)
 8001066:	f000 fd3f 	bl	8001ae8 <HAL_GPIO_Init>
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012400 	.word	0x40012400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_LCD_MspInit>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a34      	ldr	r2, [pc, #208]	; (8001170 <HAL_LCD_MspInit+0xf0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d162      	bne.n	8001168 <HAL_LCD_MspInit+0xe8>
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ac:	6253      	str	r3, [r2, #36]	; 0x24
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_LCD_MspInit+0xf4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
 8001114:	230b      	movs	r3, #11
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <HAL_LCD_MspInit+0xf8>)
 8001120:	f000 fce2 	bl	8001ae8 <HAL_GPIO_Init>
 8001124:	f248 730e 	movw	r3, #34574	; 0x870e
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	2302      	movs	r3, #2
 800112c:	623b      	str	r3, [r7, #32]
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
 8001136:	230b      	movs	r3, #11
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <HAL_LCD_MspInit+0xfc>)
 8001142:	f000 fcd1 	bl	8001ae8 <HAL_GPIO_Init>
 8001146:	f64f 7338 	movw	r3, #65336	; 0xff38
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
 8001158:	230b      	movs	r3, #11
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_LCD_MspInit+0x100>)
 8001164:	f000 fcc0 	bl	8001ae8 <HAL_GPIO_Init>
 8001168:	bf00      	nop
 800116a:	3730      	adds	r7, #48	; 0x30
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40002400 	.word	0x40002400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400

08001184 <HAL_TIM_Base_MspInit>:
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_TIM_Base_MspInit+0x58>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10c      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x2c>
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	e010      	b.n	80011d2 <HAL_TIM_Base_MspInit+0x4e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_TIM_Base_MspInit+0x60>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10b      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x4e>
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6253      	str	r3, [r2, #36]	; 0x24
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_TIM_Base_MspInit+0x5c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	40000400 	.word	0x40000400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40000800 	.word	0x40000800

080011e8 <HAL_UART_MspInit>:
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x7c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d127      	bne.n	800125a <HAL_UART_MspInit+0x72>
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_UART_MspInit+0x80>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6213      	str	r3, [r2, #32]
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	2307      	movs	r3, #7
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_UART_MspInit+0x84>)
 8001256:	f000 fc47 	bl	8001ae8 <HAL_GPIO_Init>
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40013800 	.word	0x40013800
 8001268:	40023800 	.word	0x40023800
 800126c:	40020400 	.word	0x40020400

08001270 <NMI_Handler>:
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	f000 f881 	bl	80013bc <HAL_IncTick>
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <SystemInit>:
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
	...

080012cc <Reset_Handler>:
 80012cc:	f7ff fff7 	bl	80012be <SystemInit>
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopFillZerobss+0xe>)
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <LoopFillZerobss+0x12>)
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <LoopFillZerobss+0x16>)
 80012d6:	2300      	movs	r3, #0
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:
 80012da:	58d4      	ldr	r4, [r2, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:
 80012e0:	18c4      	adds	r4, r0, r3
 80012e2:	428c      	cmp	r4, r1
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <LoopFillZerobss+0x1a>)
 80012e8:	4c09      	ldr	r4, [pc, #36]	; (8001310 <LoopFillZerobss+0x1e>)
 80012ea:	2300      	movs	r3, #0
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:
 80012f2:	42a2      	cmp	r2, r4
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>
 80012f6:	f002 fa73 	bl	80037e0 <__libc_init_array>
 80012fa:	f7ff fa2b 	bl	8000754 <main>
 80012fe:	4770      	bx	lr
 8001300:	20000000 	.word	0x20000000
 8001304:	20000020 	.word	0x20000020
 8001308:	08003874 	.word	0x08003874
 800130c:	20000020 	.word	0x20000020
 8001310:	200001a8 	.word	0x200001a8

08001314 <COMP_IRQHandler>:
 8001314:	e7fe      	b.n	8001314 <COMP_IRQHandler>

08001316 <HAL_Init>:
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	2003      	movs	r0, #3
 8001322:	f000 fbad 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f80e 	bl	8001348 <HAL_InitTick>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_Init+0x22>
 8001332:	2301      	movs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e001      	b.n	800133c <HAL_Init+0x26>
 8001338:	f7ff fe32 	bl	8000fa0 <HAL_MspInit>
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_InitTick>:
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_InitTick+0x68>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d022      	beq.n	80013a2 <HAL_InitTick+0x5a>
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_InitTick+0x6c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_InitTick+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001368:	fbb1 f3f3 	udiv	r3, r1, r3
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fbac 	bl	8001ace <HAL_SYSTICK_Config>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10f      	bne.n	800139c <HAL_InitTick+0x54>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d809      	bhi.n	8001396 <HAL_InitTick+0x4e>
 8001382:	2200      	movs	r2, #0
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	f04f 30ff 	mov.w	r0, #4294967295
 800138a:	f000 fb84 	bl	8001a96 <HAL_NVIC_SetPriority>
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_InitTick+0x70>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e007      	b.n	80013a6 <HAL_InitTick+0x5e>
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e004      	b.n	80013a6 <HAL_InitTick+0x5e>
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e001      	b.n	80013a6 <HAL_InitTick+0x5e>
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000001c 	.word	0x2000001c
 80013b4:	20000014 	.word	0x20000014
 80013b8:	20000018 	.word	0x20000018

080013bc <HAL_IncTick>:
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_IncTick+0x1c>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200001a4 	.word	0x200001a4
 80013dc:	2000001c 	.word	0x2000001c

080013e0 <HAL_GetTick>:
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	200001a4 	.word	0x200001a4

080013f4 <HAL_ADC_Init>:
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_ADC_Init+0x20>
 8001410:	2301      	movs	r3, #1
 8001412:	e127      	b.n	8001664 <HAL_ADC_Init+0x270>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	2b00      	cmp	r3, #0
 8001420:	d115      	bne.n	800144e <HAL_ADC_Init+0x5a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	651a      	str	r2, [r3, #80]	; 0x50
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001430:	4b8e      	ldr	r3, [pc, #568]	; (800166c <HAL_ADC_Init+0x278>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a8d      	ldr	r2, [pc, #564]	; (800166c <HAL_ADC_Init+0x278>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_ADC_Init+0x278>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fdd9 	bl	8001000 <HAL_ADC_MspInit>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 80ff 	bne.w	800165a <HAL_ADC_Init+0x266>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	f043 0202 	orr.w	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001470:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_ADC_Init+0x27c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	497c      	ldr	r1, [pc, #496]	; (8001670 <HAL_ADC_Init+0x27c>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001492:	4619      	mov	r1, r3
 8001494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001498:	623b      	str	r3, [r7, #32]
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014da:	4313      	orrs	r3, r2
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d007      	beq.n	80014f6 <HAL_ADC_Init+0x102>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f2:	4313      	orrs	r3, r2
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001500:	2b40      	cmp	r3, #64	; 0x40
 8001502:	d04f      	beq.n	80015a4 <HAL_ADC_Init+0x1b0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150a:	4313      	orrs	r3, r2
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4313      	orrs	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6912      	ldr	r2, [r2, #16]
 800151c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001520:	d003      	beq.n	800152a <HAL_ADC_Init+0x136>
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6912      	ldr	r2, [r2, #16]
 8001526:	2a01      	cmp	r2, #1
 8001528:	d102      	bne.n	8001530 <HAL_ADC_Init+0x13c>
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	e000      	b.n	8001532 <HAL_ADC_Init+0x13e>
 8001530:	2200      	movs	r2, #0
 8001532:	4313      	orrs	r3, r2
 8001534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001536:	4313      	orrs	r3, r2
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001540:	2b01      	cmp	r3, #1
 8001542:	d125      	bne.n	8001590 <HAL_ADC_Init+0x19c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	d114      	bne.n	8001578 <HAL_ADC_Init+0x184>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	3b01      	subs	r3, #1
 8001554:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001558:	61ba      	str	r2, [r7, #24]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	fa92 f2a2 	rbit	r2, r2
 8001560:	617a      	str	r2, [r7, #20]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	fab2 f282 	clz	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	4093      	lsls	r3, r2
 800156c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001572:	4313      	orrs	r3, r2
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
 8001576:	e00b      	b.n	8001590 <HAL_ADC_Init+0x19c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	f043 0220 	orr.w	r2, r3, #32
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	64da      	str	r2, [r3, #76]	; 0x4c
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	651a      	str	r2, [r3, #80]	; 0x50
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_ADC_Init+0x280>)
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6053      	str	r3, [r2, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_ADC_Init+0x284>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6093      	str	r3, [r2, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c0:	d003      	beq.n	80015ca <HAL_ADC_Init+0x1d6>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d119      	bne.n	80015fe <HAL_ADC_Init+0x20a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	3b01      	subs	r3, #1
 80015da:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80015de:	613a      	str	r2, [r7, #16]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	fa92 f2a2 	rbit	r2, r2
 80015e6:	60fa      	str	r2, [r7, #12]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	fab2 f282 	clz	r2, r2
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	fa03 f202 	lsl.w	r2, r3, r2
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	e007      	b.n	800160e <HAL_ADC_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_ADC_Init+0x288>)
 8001616:	4013      	ands	r3, r2
 8001618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161a:	429a      	cmp	r2, r3
 800161c:	d10b      	bne.n	8001636 <HAL_ADC_Init+0x242>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	651a      	str	r2, [r3, #80]	; 0x50
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	f023 0303 	bic.w	r3, r3, #3
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	64da      	str	r2, [r3, #76]	; 0x4c
 8001634:	e014      	b.n	8001660 <HAL_ADC_Init+0x26c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f023 0312 	bic.w	r3, r3, #18
 800163e:	f043 0210 	orr.w	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	64da      	str	r2, [r3, #76]	; 0x4c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	651a      	str	r2, [r3, #80]	; 0x50
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001658:	e002      	b.n	8001660 <HAL_ADC_Init+0x26c>
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001664:	4618      	mov	r0, r3
 8001666:	3738      	adds	r7, #56	; 0x38
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40012700 	.word	0x40012700
 8001674:	fcfc16ff 	.word	0xfcfc16ff
 8001678:	c0fff18d 	.word	0xc0fff18d
 800167c:	bf80fffe 	.word	0xbf80fffe

08001680 <HAL_ADC_ConfigChannel>:
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x20>
 800169c:	2302      	movs	r3, #2
 800169e:	e134      	b.n	800190a <HAL_ADC_ConfigChannel+0x28a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b06      	cmp	r3, #6
 80016ae:	d81c      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x6a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b05      	subs	r3, #5
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4019      	ands	r1, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b05      	subs	r3, #5
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
 80016e8:	e07e      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x168>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d81c      	bhi.n	800172c <HAL_ADC_ConfigChannel+0xac>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b23      	subs	r3, #35	; 0x23
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b23      	subs	r3, #35	; 0x23
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	63da      	str	r2, [r3, #60]	; 0x3c
 800172a:	e05d      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x168>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d81c      	bhi.n	800176e <HAL_ADC_ConfigChannel+0xee>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b41      	subs	r3, #65	; 0x41
 8001746:	221f      	movs	r2, #31
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	; 0x41
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	639a      	str	r2, [r3, #56]	; 0x38
 800176c:	e03c      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x168>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b18      	cmp	r3, #24
 8001774:	d81c      	bhi.n	80017b0 <HAL_ADC_ConfigChannel+0x130>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b5f      	subs	r3, #95	; 0x5f
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	4019      	ands	r1, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b5f      	subs	r3, #95	; 0x5f
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
 80017ae:	e01b      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x168>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b7d      	subs	r3, #125	; 0x7d
 80017c2:	221f      	movs	r2, #31
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b7d      	subs	r3, #125	; 0x7d
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d81a      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x1a6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6959      	ldr	r1, [r3, #20]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	2207      	movs	r2, #7
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	4019      	ands	r1, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6898      	ldr	r0, [r3, #8]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	e042      	b.n	80018ac <HAL_ADC_ConfigChannel+0x22c>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b13      	cmp	r3, #19
 800182c:	d81c      	bhi.n	8001868 <HAL_ADC_ConfigChannel+0x1e8>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6919      	ldr	r1, [r3, #16]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	3b1e      	subs	r3, #30
 8001840:	2207      	movs	r2, #7
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	4019      	ands	r1, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6898      	ldr	r0, [r3, #8]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	3b1e      	subs	r3, #30
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	e021      	b.n	80018ac <HAL_ADC_ConfigChannel+0x22c>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b1a      	cmp	r3, #26
 800186e:	d81c      	bhi.n	80018aa <HAL_ADC_ConfigChannel+0x22a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b3c      	subs	r3, #60	; 0x3c
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	3b3c      	subs	r3, #60	; 0x3c
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	e000      	b.n	80018ac <HAL_ADC_ConfigChannel+0x22c>
 80018aa:	bf00      	nop
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d003      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x23c>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d121      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x280>
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_ADC_ConfigChannel+0x294>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11b      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x280>
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_ADC_ConfigChannel+0x294>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_ADC_ConfigChannel+0x294>)
 80018ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018d2:	6053      	str	r3, [r2, #4]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b10      	cmp	r3, #16
 80018da:	d111      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x280>
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_ADC_ConfigChannel+0x298>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_ADC_ConfigChannel+0x29c>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	0c9a      	lsrs	r2, r3, #18
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	e002      	b.n	80018fa <HAL_ADC_ConfigChannel+0x27a>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f9      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x274>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40012700 	.word	0x40012700
 8001918:	20000014 	.word	0x20000014
 800191c:	431bde83 	.word	0x431bde83

08001920 <__NVIC_SetPriorityGrouping>:
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_SetPriority>:
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
 8001a30:	4313      	orrs	r3, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Config>:
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff90 	bl	8001984 <__NVIC_SetPriority>
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff49 	bl	8001920 <__NVIC_SetPriorityGrouping>
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	f7ff ff5e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffb0 	bl	8001a3c <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e154      	b.n	8001daa <HAL_GPIO_Init+0x2c2>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8146 	beq.w	8001da4 <HAL_GPIO_Init+0x2bc>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <HAL_GPIO_Init+0x48>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d130      	bne.n	8001b92 <HAL_GPIO_Init+0xaa>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	2201      	movs	r2, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 0201 	and.w	r2, r3, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d017      	beq.n	8001bce <HAL_GPIO_Init+0xe6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d123      	bne.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0203 	and.w	r2, r3, #3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a0 	beq.w	8001da4 <HAL_GPIO_Init+0x2bc>
 8001c64:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_GPIO_Init+0x2e0>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_GPIO_Init+0x2e0>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <HAL_GPIO_Init+0x2e0>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d019      	beq.n	8001cdc <HAL_GPIO_Init+0x1f4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a4a      	ldr	r2, [pc, #296]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a49      	ldr	r2, [pc, #292]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a48      	ldr	r2, [pc, #288]	; (8001ddc <HAL_GPIO_Init+0x2f4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <HAL_GPIO_Init+0x2f8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e008      	b.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001ccc:	2305      	movs	r3, #5
 8001cce:	e006      	b.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4937      	ldr	r1, [pc, #220]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001cfc:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x238>
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6093      	str	r3, [r2, #8]
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x262>
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	60d3      	str	r3, [r2, #12]
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x28c>
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6053      	str	r3, [r2, #4]
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2b6>
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f aea3 	bne.w	8001b00 <HAL_GPIO_Init+0x18>
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_LCD_Init>:
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_LCD_Init+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0a8      	b.n	8001f54 <HAL_LCD_Init+0x16c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_LCD_Init+0x34>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff f932 	bl	8001080 <HAL_LCD_MspInit>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e00a      	b.n	8001e50 <HAL_LCD_Init+0x68>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	3304      	adds	r3, #4
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	d9f1      	bls.n	8001e3a <HAL_LCD_Init+0x52>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0204 	orr.w	r2, r2, #4
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_LCD_Init+0x174>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6851      	ldr	r1, [r2, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6892      	ldr	r2, [r2, #8]
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	69d2      	ldr	r2, [r2, #28]
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6a12      	ldr	r2, [r2, #32]
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6992      	ldr	r2, [r2, #24]
 8001e96:	4311      	orrs	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	6053      	str	r3, [r2, #4]
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f85a 	bl	8001f60 <LCD_WaitForSynchro>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f7ff fa7c 	bl	80013e0 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
 8001eea:	e00c      	b.n	8001f06 <HAL_LCD_Init+0x11e>
 8001eec:	f7ff fa78 	bl	80013e0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001efa:	d904      	bls.n	8001f06 <HAL_LCD_Init+0x11e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2208      	movs	r2, #8
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
 8001f02:	2303      	movs	r3, #3
 8001f04:	e026      	b.n	8001f54 <HAL_LCD_Init+0x16c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d1eb      	bne.n	8001eec <HAL_LCD_Init+0x104>
 8001f14:	f7ff fa64 	bl	80013e0 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
 8001f1a:	e00c      	b.n	8001f36 <HAL_LCD_Init+0x14e>
 8001f1c:	f7ff fa60 	bl	80013e0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2a:	d904      	bls.n	8001f36 <HAL_LCD_Init+0x14e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
 8001f32:	2303      	movs	r3, #3
 8001f34:	e00e      	b.n	8001f54 <HAL_LCD_Init+0x16c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b10      	cmp	r3, #16
 8001f42:	d1eb      	bne.n	8001f1c <HAL_LCD_Init+0x134>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001f52:	2300      	movs	r3, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	fc00000f 	.word	0xfc00000f

08001f60 <LCD_WaitForSynchro>:
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	f7ff fa38 	bl	80013e0 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	e00c      	b.n	8001f8e <LCD_WaitForSynchro+0x2e>
 8001f74:	f7ff fa34 	bl	80013e0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f82:	d904      	bls.n	8001f8e <LCD_WaitForSynchro+0x2e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e007      	b.n	8001f9e <LCD_WaitForSynchro+0x3e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d1eb      	bne.n	8001f74 <LCD_WaitForSynchro+0x14>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_RCC_OscConfig>:
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e31d      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8001fba:	4b94      	ldr	r3, [pc, #592]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	4b91      	ldr	r3, [pc, #580]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x12a>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d006      	beq.n	8001fee <HAL_RCC_OscConfig+0x46>
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d10f      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
 8001fee:	4b87      	ldr	r3, [pc, #540]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06a      	beq.n	80020d0 <HAL_RCC_OscConfig+0x128>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d166      	bne.n	80020d0 <HAL_RCC_OscConfig+0x128>
 8002002:	2301      	movs	r3, #1
 8002004:	e2f7      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d106      	bne.n	800201c <HAL_RCC_OscConfig+0x74>
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7e      	ldr	r2, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e02d      	b.n	8002078 <HAL_RCC_OscConfig+0xd0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x96>
 8002024:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a78      	ldr	r2, [pc, #480]	; (800220c <HAL_RCC_OscConfig+0x264>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e01c      	b.n	8002078 <HAL_RCC_OscConfig+0xd0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b05      	cmp	r3, #5
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0xb8>
 8002046:	4b71      	ldr	r3, [pc, #452]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a70      	ldr	r2, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x264>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b6e      	ldr	r3, [pc, #440]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6d      	ldr	r2, [pc, #436]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e00b      	b.n	8002078 <HAL_RCC_OscConfig+0xd0>
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_RCC_OscConfig+0x100>
 8002080:	f7ff f9ae 	bl	80013e0 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xf2>
 8002088:	f7ff f9aa 	bl	80013e0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xf2>
 8002096:	2303      	movs	r3, #3
 8002098:	e2ad      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_RCC_OscConfig+0x264>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0xe0>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x12a>
 80020a8:	f7ff f99a 	bl	80013e0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x11a>
 80020b0:	f7ff f996 	bl	80013e0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x11a>
 80020be:	2303      	movs	r3, #3
 80020c0:	e299      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80020c2:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x108>
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x12a>
 80020d0:	bf00      	nop
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d05a      	beq.n	8002194 <HAL_RCC_OscConfig+0x1ec>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_OscConfig+0x148>
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d119      	bne.n	800211e <HAL_RCC_OscConfig+0x176>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d116      	bne.n	800211e <HAL_RCC_OscConfig+0x176>
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x160>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x160>
 8002104:	2301      	movs	r3, #1
 8002106:	e276      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x264>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	493d      	ldr	r1, [pc, #244]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e03a      	b.n	8002194 <HAL_RCC_OscConfig+0x1ec>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d020      	beq.n	8002168 <HAL_RCC_OscConfig+0x1c0>
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_RCC_OscConfig+0x268>)
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f7ff f958 	bl	80013e0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x19e>
 8002134:	f7ff f954 	bl	80013e0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x19e>
 8002142:	2303      	movs	r3, #3
 8002144:	e257      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002146:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x18c>
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	492a      	ldr	r1, [pc, #168]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
 8002166:	e015      	b.n	8002194 <HAL_RCC_OscConfig+0x1ec>
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_OscConfig+0x268>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f7ff f937 	bl	80013e0 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1e0>
 8002176:	f7ff f933 	bl	80013e0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1e0>
 8002184:	2303      	movs	r3, #3
 8002186:	e236      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_RCC_OscConfig+0x264>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x1ce>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80b8 	beq.w	8002312 <HAL_RCC_OscConfig+0x36a>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d170      	bne.n	800228a <HAL_RCC_OscConfig+0x2e2>
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x218>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x218>
 80021bc:	2301      	movs	r3, #1
 80021be:	e21a      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d921      	bls.n	8002214 <HAL_RCC_OscConfig+0x26c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fc7d 	bl	8002ad4 <RCC_SetFlashLatencyFromMSIRange>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x23c>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e208      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_OscConfig+0x264>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	061b      	lsls	r3, r3, #24
 8002204:	4901      	ldr	r1, [pc, #4]	; (800220c <HAL_RCC_OscConfig+0x264>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
 800220a:	e020      	b.n	800224e <HAL_RCC_OscConfig+0x2a6>
 800220c:	40023800 	.word	0x40023800
 8002210:	42470000 	.word	0x42470000
 8002214:	4b99      	ldr	r3, [pc, #612]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4996      	ldr	r1, [pc, #600]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	4b95      	ldr	r3, [pc, #596]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4991      	ldr	r1, [pc, #580]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fc48 	bl	8002ad4 <RCC_SetFlashLatencyFromMSIRange>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x2a6>
 800224a:	2301      	movs	r3, #1
 800224c:	e1d3      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	0b5b      	lsrs	r3, r3, #13
 8002254:	3301      	adds	r3, #1
 8002256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	4a87      	ldr	r2, [pc, #540]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002260:	6892      	ldr	r2, [r2, #8]
 8002262:	0912      	lsrs	r2, r2, #4
 8002264:	f002 020f 	and.w	r2, r2, #15
 8002268:	4985      	ldr	r1, [pc, #532]	; (8002480 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	5c8a      	ldrb	r2, [r1, r2]
 800226c:	40d3      	lsrs	r3, r2
 800226e:	4a85      	ldr	r2, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x4dc>)
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x4e0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f866 	bl	8001348 <HAL_InitTick>
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d045      	beq.n	8002312 <HAL_RCC_OscConfig+0x36a>
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	e1b5      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d029      	beq.n	80022e6 <HAL_RCC_OscConfig+0x33e>
 8002292:	4b7e      	ldr	r3, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x4e4>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f7ff f8a2 	bl	80013e0 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x30a>
 80022a0:	f7ff f89e 	bl	80013e0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x30a>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1a1      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80022b2:	4b72      	ldr	r3, [pc, #456]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	496c      	ldr	r1, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	4967      	ldr	r1, [pc, #412]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x36a>
 80022e6:	4b69      	ldr	r3, [pc, #420]	; (800248c <HAL_RCC_OscConfig+0x4e4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f7ff f878 	bl	80013e0 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x35e>
 80022f4:	f7ff f874 	bl	80013e0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x35e>
 8002302:	2303      	movs	r3, #3
 8002304:	e177      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x34c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d030      	beq.n	8002380 <HAL_RCC_OscConfig+0x3d8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_RCC_OscConfig+0x3ac>
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f7ff f858 	bl	80013e0 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x39e>
 8002334:	f7ff f854 	bl	80013e0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x39e>
 8002342:	2303      	movs	r3, #3
 8002344:	e157      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002346:	4b4d      	ldr	r3, [pc, #308]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x38c>
 8002352:	e015      	b.n	8002380 <HAL_RCC_OscConfig+0x3d8>
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_OscConfig+0x4e8>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f7ff f841 	bl	80013e0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x3cc>
 8002362:	f7ff f83d 	bl	80013e0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x3cc>
 8002370:	2303      	movs	r3, #3
 8002372:	e140      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002374:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0x3ba>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b5 	beq.w	80024f8 <HAL_RCC_OscConfig+0x550>
 800238e:	2300      	movs	r3, #0
 8002390:	77fb      	strb	r3, [r7, #31]
 8002392:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_RCC_OscConfig+0x412>
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	4a36      	ldr	r2, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6253      	str	r3, [r2, #36]	; 0x24
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2301      	movs	r3, #1
 80023b8:	77fb      	strb	r3, [r7, #31]
 80023ba:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x4ec>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x450>
 80023c6:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x4ec>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_RCC_OscConfig+0x4ec>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	f7ff f805 	bl	80013e0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x444>
 80023da:	f7ff f801 	bl	80013e0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x444>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e104      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_OscConfig+0x4ec>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x432>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x466>
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6353      	str	r3, [r2, #52]	; 0x34
 800240c:	e02d      	b.n	800246a <HAL_RCC_OscConfig+0x4c2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x488>
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 800241c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002420:	6353      	str	r3, [r2, #52]	; 0x34
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800242c:	6353      	str	r3, [r2, #52]	; 0x34
 800242e:	e01c      	b.n	800246a <HAL_RCC_OscConfig+0x4c2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x4aa>
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6353      	str	r3, [r2, #52]	; 0x34
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002448:	4a0c      	ldr	r2, [pc, #48]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6353      	str	r3, [r2, #52]	; 0x34
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x4c2>
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800245c:	6353      	str	r3, [r2, #52]	; 0x34
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	4a06      	ldr	r2, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002468:	6353      	str	r3, [r2, #52]	; 0x34
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_RCC_OscConfig+0x514>
 8002472:	f7fe ffb5 	bl	80013e0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]
 8002478:	e019      	b.n	80024ae <HAL_RCC_OscConfig+0x506>
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	0800384c 	.word	0x0800384c
 8002484:	20000014 	.word	0x20000014
 8002488:	20000018 	.word	0x20000018
 800248c:	42470020 	.word	0x42470020
 8002490:	42470680 	.word	0x42470680
 8002494:	40007000 	.word	0x40007000
 8002498:	f7fe ffa2 	bl	80013e0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x506>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0a3      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80024ae:	4b54      	ldr	r3, [pc, #336]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ee      	beq.n	8002498 <HAL_RCC_OscConfig+0x4f0>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x53e>
 80024bc:	f7fe ff90 	bl	80013e0 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x532>
 80024c4:	f7fe ff8c 	bl	80013e0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x532>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e08d      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80024da:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ee      	bne.n	80024c4 <HAL_RCC_OscConfig+0x51c>
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_RCC_OscConfig+0x550>
 80024ec:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	4a43      	ldr	r2, [pc, #268]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 80024f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6253      	str	r3, [r2, #36]	; 0x24
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d079      	beq.n	80025f4 <HAL_RCC_OscConfig+0x64c>
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d056      	beq.n	80025b4 <HAL_RCC_OscConfig+0x60c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b02      	cmp	r3, #2
 800250c:	d13b      	bne.n	8002586 <HAL_RCC_OscConfig+0x5de>
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_OscConfig+0x65c>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f7fe ff64 	bl	80013e0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x586>
 800251c:	f7fe ff60 	bl	80013e0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x586>
 800252a:	2303      	movs	r3, #3
 800252c:	e063      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x574>
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	4319      	orrs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	430b      	orrs	r3, r1
 8002552:	492b      	ldr	r1, [pc, #172]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_OscConfig+0x65c>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f7fe ff3f 	bl	80013e0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x5d0>
 8002566:	f7fe ff3b 	bl	80013e0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x5d0>
 8002574:	2303      	movs	r3, #3
 8002576:	e03e      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x5be>
 8002584:	e036      	b.n	80025f4 <HAL_RCC_OscConfig+0x64c>
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_RCC_OscConfig+0x65c>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f7fe ff28 	bl	80013e0 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x5fe>
 8002594:	f7fe ff24 	bl	80013e0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x5fe>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e027      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x5ec>
 80025b2:	e01f      	b.n	80025f4 <HAL_RCC_OscConfig+0x64c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x618>
 80025bc:	2301      	movs	r3, #1
 80025be:	e01a      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_RCC_OscConfig+0x658>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d10d      	bne.n	80025f0 <HAL_RCC_OscConfig+0x648>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	429a      	cmp	r2, r3
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x648>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x64c>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x64e>
 80025f4:	2300      	movs	r3, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	42470060 	.word	0x42470060

08002608 <HAL_RCC_ClockConfig>:
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
 8002618:	2301      	movs	r3, #1
 800261a:	e11a      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 800261c:	4b8f      	ldr	r3, [pc, #572]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d919      	bls.n	800265e <HAL_RCC_ClockConfig+0x56>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_ClockConfig+0x34>
 8002630:	4b8a      	ldr	r3, [pc, #552]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a89      	ldr	r2, [pc, #548]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b87      	ldr	r3, [pc, #540]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 0201 	bic.w	r2, r3, #1
 8002644:	4985      	ldr	r1, [pc, #532]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	4b83      	ldr	r3, [pc, #524]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d001      	beq.n	800265e <HAL_RCC_ClockConfig+0x56>
 800265a:	2301      	movs	r3, #1
 800265c:	e0f9      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_RCC_ClockConfig+0x74>
 800266a:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	497a      	ldr	r1, [pc, #488]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 808e 	beq.w	80027a6 <HAL_RCC_ClockConfig+0x19e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x9a>
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d121      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xda>
 800269e:	2301      	movs	r3, #1
 80026a0:	e0d7      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xb2>
 80026aa:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xda>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0cb      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xca>
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xda>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0bf      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 80026d2:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xda>
 80026de:	2301      	movs	r3, #1
 80026e0:	e0b7      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 80026e2:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	495c      	ldr	r1, [pc, #368]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
 80026f4:	f7fe fe74 	bl	80013e0 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d112      	bne.n	8002728 <HAL_RCC_ClockConfig+0x120>
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x112>
 8002704:	f7fe fe6c 	bl	80013e0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x112>
 8002716:	2303      	movs	r3, #3
 8002718:	e09b      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 800271a:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b08      	cmp	r3, #8
 8002724:	d1ee      	bne.n	8002704 <HAL_RCC_ClockConfig+0xfc>
 8002726:	e03e      	b.n	80027a6 <HAL_RCC_ClockConfig+0x19e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d112      	bne.n	8002756 <HAL_RCC_ClockConfig+0x14e>
 8002730:	e00a      	b.n	8002748 <HAL_RCC_ClockConfig+0x140>
 8002732:	f7fe fe55 	bl	80013e0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_ClockConfig+0x140>
 8002744:	2303      	movs	r3, #3
 8002746:	e084      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d1ee      	bne.n	8002732 <HAL_RCC_ClockConfig+0x12a>
 8002754:	e027      	b.n	80027a6 <HAL_RCC_ClockConfig+0x19e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d11d      	bne.n	800279a <HAL_RCC_ClockConfig+0x192>
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x16e>
 8002760:	f7fe fe3e 	bl	80013e0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x16e>
 8002772:	2303      	movs	r3, #3
 8002774:	e06d      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 8002776:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_ClockConfig+0x158>
 8002782:	e010      	b.n	80027a6 <HAL_RCC_ClockConfig+0x19e>
 8002784:	f7fe fe2c 	bl	80013e0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x192>
 8002796:	2303      	movs	r3, #3
 8002798:	e05b      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ee      	bne.n	8002784 <HAL_RCC_ClockConfig+0x17c>
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d219      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x1e0>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1be>
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	4923      	ldr	r1, [pc, #140]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_RCC_ClockConfig+0x254>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x1e0>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e034      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_ClockConfig+0x1fe>
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4917      	ldr	r1, [pc, #92]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x21e>
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	490f      	ldr	r1, [pc, #60]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
 8002826:	f000 f823 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800282a:	4602      	mov	r2, r0
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_RCC_ClockConfig+0x258>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	490b      	ldr	r1, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x25c>)
 8002838:	5ccb      	ldrb	r3, [r1, r3]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fd7e 	bl	8001348 <HAL_InitTick>
 800284c:	4603      	mov	r3, r0
 800284e:	72fb      	strb	r3, [r7, #11]
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023c00 	.word	0x40023c00
 8002860:	40023800 	.word	0x40023800
 8002864:	0800384c 	.word	0x0800384c
 8002868:	20000014 	.word	0x20000014
 800286c:	20000018 	.word	0x20000018

08002870 <HAL_RCC_GetSysClockFreq>:
 8002870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002874:	b092      	sub	sp, #72	; 0x48
 8002876:	af00      	add	r7, sp, #0
 8002878:	4b79      	ldr	r3, [pc, #484]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d00d      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002888:	2b0c      	cmp	r3, #12
 800288a:	f200 80d5 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1c8>
 800288e:	2b04      	cmp	r3, #4
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x28>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x2e>
 8002896:	e0cf      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002898:	4b72      	ldr	r3, [pc, #456]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
 800289c:	e0da      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x1e4>
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80028a0:	643b      	str	r3, [r7, #64]	; 0x40
 80028a2:	e0d7      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x1e4>
 80028a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a6:	0c9b      	lsrs	r3, r3, #18
 80028a8:	f003 020f 	and.w	r2, r3, #15
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028ae:	5c9b      	ldrb	r3, [r3, r2]
 80028b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b4:	0d9b      	lsrs	r3, r3, #22
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	3301      	adds	r3, #1
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
 80028be:	4b68      	ldr	r3, [pc, #416]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d05d      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x116>
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2200      	movs	r2, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	4611      	mov	r1, r2
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
 80028d6:	4622      	mov	r2, r4
 80028d8:	462b      	mov	r3, r5
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	0159      	lsls	r1, r3, #5
 80028e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e8:	0150      	lsls	r0, r2, #5
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4621      	mov	r1, r4
 80028f0:	1a51      	subs	r1, r2, r1
 80028f2:	6139      	str	r1, [r7, #16]
 80028f4:	4629      	mov	r1, r5
 80028f6:	eb63 0301 	sbc.w	r3, r3, r1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002908:	4659      	mov	r1, fp
 800290a:	018b      	lsls	r3, r1, #6
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002912:	4651      	mov	r1, sl
 8002914:	018a      	lsls	r2, r1, #6
 8002916:	46d4      	mov	ip, sl
 8002918:	ebb2 080c 	subs.w	r8, r2, ip
 800291c:	4659      	mov	r1, fp
 800291e:	eb63 0901 	sbc.w	r9, r3, r1
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002936:	4690      	mov	r8, r2
 8002938:	4699      	mov	r9, r3
 800293a:	4623      	mov	r3, r4
 800293c:	eb18 0303 	adds.w	r3, r8, r3
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	462b      	mov	r3, r5
 8002944:	eb49 0303 	adc.w	r3, r9, r3
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002956:	4629      	mov	r1, r5
 8002958:	024b      	lsls	r3, r1, #9
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	4604      	mov	r4, r0
 8002960:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002964:	4601      	mov	r1, r0
 8002966:	024a      	lsls	r2, r1, #9
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296e:	2200      	movs	r2, #0
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002978:	f7fd fc00 	bl	800017c <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
 8002984:	e055      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1c2>
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	2200      	movs	r2, #0
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	627a      	str	r2, [r7, #36]	; 0x24
 800298e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002992:	4642      	mov	r2, r8
 8002994:	464b      	mov	r3, r9
 8002996:	f04f 0000 	mov.w	r0, #0
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	0159      	lsls	r1, r3, #5
 80029a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a4:	0150      	lsls	r0, r2, #5
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	46c4      	mov	ip, r8
 80029ac:	ebb2 0a0c 	subs.w	sl, r2, ip
 80029b0:	4640      	mov	r0, r8
 80029b2:	4649      	mov	r1, r9
 80029b4:	468c      	mov	ip, r1
 80029b6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029ca:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029ce:	ebb2 040a 	subs.w	r4, r2, sl
 80029d2:	eb63 050b 	sbc.w	r5, r3, fp
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	00eb      	lsls	r3, r5, #3
 80029e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e4:	00e2      	lsls	r2, r4, #3
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	18e3      	adds	r3, r4, r3
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	460b      	mov	r3, r1
 80029f2:	eb45 0303 	adc.w	r3, r5, r3
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a04:	4629      	mov	r1, r5
 8002a06:	028b      	lsls	r3, r1, #10
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002a12:	4601      	mov	r1, r0
 8002a14:	028a      	lsls	r2, r1, #10
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a26:	f7fd fba9 	bl	800017c <__aeabi_uldivmod>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
 8002a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
 8002a36:	e00d      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0b5b      	lsrs	r3, r3, #13
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	3301      	adds	r3, #1
 8002a48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40
 8002a52:	bf00      	nop
 8002a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a56:	4618      	mov	r0, r3
 8002a58:	3748      	adds	r7, #72	; 0x48
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200
 8002a6c:	08003840 	.word	0x08003840

08002a70 <HAL_RCC_GetHCLKFreq>:
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000014 	.word	0x20000014

08002a84 <HAL_RCC_GetPCLK1Freq>:
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	f7ff fff2 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4903      	ldr	r1, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	0800385c 	.word	0x0800385c

08002aac <HAL_RCC_GetPCLK2Freq>:
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	f7ff ffde 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	0800385c 	.word	0x0800385c

08002ad4 <RCC_SetFlashLatencyFromMSIRange>:
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d12c      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002aec:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x30>
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e016      	b.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x5e>
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6253      	str	r3, [r2, #36]	; 0x24
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6253      	str	r3, [r2, #36]	; 0x24
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002b38:	d105      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b40:	d101      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002b42:	2301      	movs	r3, #1
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0201 	bic.w	r2, r3, #1
 8002b60:	490b      	ldr	r1, [pc, #44]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0xa8>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80ed 	beq.w	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
 8002bba:	4b78      	ldr	r3, [pc, #480]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002bc6:	4b75      	ldr	r3, [pc, #468]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	4a74      	ldr	r2, [pc, #464]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002bee:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6b      	ldr	r2, [pc, #428]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	f7fe fbf1 	bl	80013e0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]
 8002c00:	e008      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002c02:	f7fe fbed 	bl	80013e0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0be      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002c14:	4b62      	ldr	r3, [pc, #392]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002c20:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d106      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d00f      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c52:	d108      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e095      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d041      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d005      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d02d      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d027      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002caa:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6353      	str	r3, [r2, #52]	; 0x34
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d014      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002cd0:	f7fe fb86 	bl	80013e0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]
 8002cd6:	e00a      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002cd8:	f7fe fb82 	bl	80013e0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e051      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d12:	d10a      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002d24:	491d      	ldr	r1, [pc, #116]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d36:	4919      	ldr	r1, [pc, #100]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	634b      	str	r3, [r1, #52]	; 0x34
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d54:	d10a      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d78:	4908      	ldr	r1, [pc, #32]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	634b      	str	r3, [r1, #52]	; 0x34
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6253      	str	r3, [r2, #36]	; 0x24
 8002d90:	2300      	movs	r3, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40007000 	.word	0x40007000
 8002da4:	424706dc 	.word	0x424706dc

08002da8 <HAL_TIM_Base_Init>:
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_Base_Init+0x12>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e031      	b.n	8002e1e <HAL_TIM_Base_Init+0x76>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_TIM_Base_Init+0x2c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f9d8 	bl	8001184 <HAL_TIM_Base_MspInit>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f000 f8e4 	bl	8002fb4 <TIM_Base_SetConfig>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_ConfigClockSource>:
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_ConfigClockSource+0x1c>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0b4      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x186>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d03e      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0xd4>
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	f200 8087 	bhi.w	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	f000 8086 	beq.w	8002f98 <HAL_TIM_ConfigClockSource+0x172>
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d87f      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002e92:	2b70      	cmp	r3, #112	; 0x70
 8002e94:	d01a      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0xa6>
 8002e96:	2b70      	cmp	r3, #112	; 0x70
 8002e98:	d87b      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9a:	2b60      	cmp	r3, #96	; 0x60
 8002e9c:	d050      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x11a>
 8002e9e:	2b60      	cmp	r3, #96	; 0x60
 8002ea0:	d877      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea2:	2b50      	cmp	r3, #80	; 0x50
 8002ea4:	d03c      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xfa>
 8002ea6:	2b50      	cmp	r3, #80	; 0x50
 8002ea8:	d873      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d058      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0x13a>
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d86f      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb2:	2b30      	cmp	r3, #48	; 0x30
 8002eb4:	d064      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb6:	2b30      	cmp	r3, #48	; 0x30
 8002eb8:	d86b      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d060      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d867      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05c      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x15a>
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d05a      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x15a>
 8002eca:	e062      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f000 f943 	bl	8003166 <TIM_ETR_SetConfig>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	e04f      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f000 f92c 	bl	8003166 <TIM_ETR_SetConfig>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	e03c      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f000 f8a3 	bl	8003078 <TIM_TI1_ConfigInputStage>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2150      	movs	r1, #80	; 0x50
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f8fa 	bl	8003132 <TIM_ITRx_SetConfig>
 8002f3e:	e02c      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f000 f8c1 	bl	80030d4 <TIM_TI2_ConfigInputStage>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2160      	movs	r1, #96	; 0x60
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f8ea 	bl	8003132 <TIM_ITRx_SetConfig>
 8002f5e:	e01c      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f000 f883 	bl	8003078 <TIM_TI1_ConfigInputStage>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f8da 	bl	8003132 <TIM_ITRx_SetConfig>
 8002f7e:	e00c      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 f8d1 	bl	8003132 <TIM_ITRx_SetConfig>
 8002f90:	e003      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x174>
 8002f98:	bf00      	nop
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <TIM_Base_SetConfig>:
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x28>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a25      	ldr	r2, [pc, #148]	; (8003064 <TIM_Base_SetConfig+0xb0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x28>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <TIM_Base_SetConfig+0xb4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x3a>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d013      	beq.n	800301e <TIM_Base_SetConfig+0x6a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <TIM_Base_SetConfig+0xb0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_Base_SetConfig+0x6a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a19      	ldr	r2, [pc, #100]	; (8003068 <TIM_Base_SetConfig+0xb4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0x6a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a18      	ldr	r2, [pc, #96]	; (800306c <TIM_Base_SetConfig+0xb8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0x6a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <TIM_Base_SetConfig+0xbc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0x6a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <TIM_Base_SetConfig+0xc0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <TIM_Base_SetConfig+0x7c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40010800 	.word	0x40010800
 8003070:	40010c00 	.word	0x40010c00
 8003074:	40011000 	.word	0x40011000

08003078 <TIM_TI1_ConfigInputStage>:
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 030a 	bic.w	r3, r3, #10
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	619a      	str	r2, [r3, #24]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	621a      	str	r2, [r3, #32]
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <TIM_TI2_ConfigInputStage>:
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	031b      	lsls	r3, r3, #12
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <TIM_ITRx_SetConfig>:
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	f043 0307 	orr.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <TIM_ETR_SetConfig>:
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_MasterConfigSynchronization>:
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e046      	b.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d00e      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10c      	bne.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003248:	2300      	movs	r3, #0
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40010800 	.word	0x40010800

08003260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e042      	b.n	80032f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd ffae 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f9af 	bl	8003608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b20      	cmp	r3, #32
 800331e:	d16d      	bne.n	80033fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_UART_Transmit+0x2c>
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e066      	b.n	80033fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2221      	movs	r2, #33	; 0x21
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333e:	f7fe f84f 	bl	80013e0 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	88fa      	ldrh	r2, [r7, #6]
 800334e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003358:	d108      	bne.n	800336c <HAL_UART_Transmit+0x6c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e003      	b.n	8003374 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003374:	e02a      	b.n	80033cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f8d2 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e036      	b.n	80033fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	3302      	adds	r3, #2
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e007      	b.n	80033be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	3301      	adds	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1cf      	bne.n	8003376 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	2140      	movs	r1, #64	; 0x40
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f8a2 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e006      	b.n	80033fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b08a      	sub	sp, #40	; 0x28
 800340a:	af02      	add	r7, sp, #8
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b20      	cmp	r3, #32
 8003424:	d17c      	bne.n	8003520 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_UART_Receive+0x2c>
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e075      	b.n	8003522 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2222      	movs	r2, #34	; 0x22
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800344a:	f7fd ffc9 	bl	80013e0 <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d108      	bne.n	8003478 <HAL_UART_Receive+0x72>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003480:	e043      	b.n	800350a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2120      	movs	r1, #32
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f84c 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e042      	b.n	8003522 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	3302      	adds	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e01f      	b.n	80034fc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d007      	beq.n	80034d6 <HAL_UART_Receive+0xd0>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_UART_Receive+0xde>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e008      	b.n	80034f6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1b6      	bne.n	8003482 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b090      	sub	sp, #64	; 0x40
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	e050      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d04c      	beq.n	80035de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <UART_WaitOnFlagUntilTimeout+0x30>
 800354a:	f7fd ff49 	bl	80013e0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003556:	429a      	cmp	r2, r3
 8003558:	d241      	bcs.n	80035de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800357a:	637a      	str	r2, [r7, #52]	; 0x34
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e5      	bne.n	800355a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	613b      	str	r3, [r7, #16]
   return(result);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3314      	adds	r3, #20
 80035ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ae:	623a      	str	r2, [r7, #32]
 80035b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	69f9      	ldr	r1, [r7, #28]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e00f      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d09f      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3740      	adds	r7, #64	; 0x40
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4313      	orrs	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003648:	f023 030c 	bic.w	r3, r3, #12
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	430b      	orrs	r3, r1
 8003654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a55      	ldr	r2, [pc, #340]	; (80037c8 <UART_SetConfig+0x1c0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d103      	bne.n	800367e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003676:	f7ff fa19 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	e002      	b.n	8003684 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800367e:	f7ff fa01 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8003682:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d14c      	bne.n	8003728 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	4a49      	ldr	r2, [pc, #292]	; (80037cc <UART_SetConfig+0x1c4>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	0119      	lsls	r1, r3, #4
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4b41      	ldr	r3, [pc, #260]	; (80037cc <UART_SetConfig+0x1c4>)
 80036c6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	fb00 f303 	mul.w	r3, r0, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <UART_SetConfig+0x1c4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e6:	4419      	add	r1, r3
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009a      	lsls	r2, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <UART_SetConfig+0x1c4>)
 8003700:	fba3 0302 	umull	r0, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2064      	movs	r0, #100	; 0x64
 8003708:	fb00 f303 	mul.w	r3, r0, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <UART_SetConfig+0x1c4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	440a      	add	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003726:	e04a      	b.n	80037be <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009a      	lsls	r2, r3, #2
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <UART_SetConfig+0x1c4>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	0119      	lsls	r1, r3, #4
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	fbb2 f2f3 	udiv	r2, r2, r3
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <UART_SetConfig+0x1c4>)
 8003760:	fba3 0302 	umull	r0, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2064      	movs	r0, #100	; 0x64
 8003768:	fb00 f303 	mul.w	r3, r0, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <UART_SetConfig+0x1c4>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377e:	4419      	add	r1, r3
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	fbb2 f2f3 	udiv	r2, r2, r3
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <UART_SetConfig+0x1c4>)
 8003798:	fba3 0302 	umull	r0, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	2064      	movs	r0, #100	; 0x64
 80037a0:	fb00 f303 	mul.w	r3, r0, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	3332      	adds	r3, #50	; 0x32
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <UART_SetConfig+0x1c4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	440a      	add	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40013800 	.word	0x40013800
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <memset>:
 80037d0:	4603      	mov	r3, r0
 80037d2:	4402      	add	r2, r0
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d100      	bne.n	80037da <memset+0xa>
 80037d8:	4770      	bx	lr
 80037da:	f803 1b01 	strb.w	r1, [r3], #1
 80037de:	e7f9      	b.n	80037d4 <memset+0x4>

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	2600      	movs	r6, #0
 80037e4:	4d0c      	ldr	r5, [pc, #48]	; (8003818 <__libc_init_array+0x38>)
 80037e6:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e8:	1b64      	subs	r4, r4, r5
 80037ea:	10a4      	asrs	r4, r4, #2
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	f000 f81a 	bl	8003828 <_init>
 80037f4:	2600      	movs	r6, #0
 80037f6:	4d0a      	ldr	r5, [pc, #40]	; (8003820 <__libc_init_array+0x40>)
 80037f8:	4c0a      	ldr	r4, [pc, #40]	; (8003824 <__libc_init_array+0x44>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f855 3b04 	ldr.w	r3, [r5], #4
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	0800386c 	.word	0x0800386c
 800381c:	0800386c 	.word	0x0800386c
 8003820:	0800386c 	.word	0x0800386c
 8003824:	08003870 	.word	0x08003870

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
