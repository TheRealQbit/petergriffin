
lab2_DEFINITIVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038dc  080038dc  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e4  080038e4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000020  0800390c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  0800390c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c483  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e1b  00000000  00000000  0002c50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000973  00000000  00000000  0002ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014622  00000000  00000000  0002f8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de87  00000000  00000000  00043efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082e48  00000000  00000000  00051d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032cc  00000000  00000000  000d4bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d7e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	080038a0 	.word	0x080038a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	080038a0 	.word	0x080038a0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <stopWheels>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void stopWheels(void) {
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    // Stop both motors
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9) << 16;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <stopWheels+0x14>)
 8000482:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
 8000486:	619a      	str	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40020800 	.word	0x40020800

08000494 <moveForward>:

void moveForward(void) {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
    // Move both motors forward
    GPIOC->BSRR = GPIO_PIN_8;  // Activar el pin de dirección del motor izquierdo hacia adelante
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <moveForward+0x24>)
 800049a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800049e:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = GPIO_PIN_6;  // Activar el pin de dirección del motor derecho hacia adelante
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <moveForward+0x24>)
 80004a2:	2240      	movs	r2, #64	; 0x40
 80004a4:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7 | GPIO_PIN_9) << 16; // Desactivar los pines de dirección opuestos
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <moveForward+0x24>)
 80004a8:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 80004ac:	619a      	str	r2, [r3, #24]
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020800 	.word	0x40020800

080004bc <rightWheel>:

void rightWheel(void) {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    // Turn right by moving right motor forward and left motor backward
    GPIOC->BSRR = GPIO_PIN_6;  // Activar el pin de dirección del motor izquierdo hacia adelante
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <rightWheel+0x24>)
 80004c2:	2240      	movs	r2, #64	; 0x40
 80004c4:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = GPIO_PIN_9;  // Activar el pin de dirección del motor derecho hacia atrás
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <rightWheel+0x24>)
 80004c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004cc:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7 | GPIO_PIN_8) << 16; // Desactivar los pines de dirección opuestos
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <rightWheel+0x24>)
 80004d0:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80004d4:	619a      	str	r2, [r3, #24]
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40020800 	.word	0x40020800

080004e4 <leftWheel>:

void leftWheel(void) {
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
    // Turn left by moving left motor forward and right motor backward
    GPIOC->BSRR = GPIO_PIN_7;  // Activar el pin de dirección del motor izquierdo hacia adelante
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <leftWheel+0x24>)
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = GPIO_PIN_8;  // Activar el pin de dirección del motor derecho hacia atrás
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <leftWheel+0x24>)
 80004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f4:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_9) << 16; // Desactivar los pines de dirección opuestos
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <leftWheel+0x24>)
 80004f8:	f04f 7210 	mov.w	r2, #37748736	; 0x2400000
 80004fc:	619a      	str	r2, [r3, #24]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40020800 	.word	0x40020800

0800050c <moveBackward>:

void moveBackward(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
    // Move both motors backward by reversing the direction logic
    GPIOC->BSRR = GPIO_PIN_7 | GPIO_PIN_9;  // Activar los pines de dirección opuestos
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <moveBackward+0x1c>)
 8000512:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000516:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_8) << 16;  // Desactivar los pines de dirección hacia adelante
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <moveBackward+0x1c>)
 800051a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 800051e:	619a      	str	r2, [r3, #24]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40020800 	.word	0x40020800

0800052c <EXTI1_IRQHandler>:
		  			            	 	 	  		GPIOB->MODER = ~(1<<(8*2));
		  			            	 	 	  	  }
		  			            	 	 	  SENSOR_1=0;
		  			            	 	 	  SENSOR_2=0;
}
void EXTI1_IRQHandler(void){  //for the right sensor
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	if(EXTI -> PR == (1<<1) && carState == 5){
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <EXTI1_IRQHandler+0x30>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d10c      	bne.n	8000552 <EXTI1_IRQHandler+0x26>
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <EXTI1_IRQHandler+0x34>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b05      	cmp	r3, #5
 800053e:	d108      	bne.n	8000552 <EXTI1_IRQHandler+0x26>
		SENSOR_1 = 1;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <EXTI1_IRQHandler+0x38>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= (1<<1); // clean the flags with a 1
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI1_IRQHandler+0x30>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI1_IRQHandler+0x30>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6153      	str	r3, [r2, #20]
	}

}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	20000197 	.word	0x20000197
 8000564:	20000194 	.word	0x20000194

08000568 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){  //for the left sensor
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	if(EXTI -> PR == (1<<2) && carState == 5){
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <EXTI2_IRQHandler+0x30>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d10c      	bne.n	800058e <EXTI2_IRQHandler+0x26>
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <EXTI2_IRQHandler+0x34>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b05      	cmp	r3, #5
 800057a:	d108      	bne.n	800058e <EXTI2_IRQHandler+0x26>
		SENSOR_2 = 1;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <EXTI2_IRQHandler+0x38>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
			EXTI -> PR |= (1<<2); //clean the flags with a 1
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <EXTI2_IRQHandler+0x30>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <EXTI2_IRQHandler+0x30>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6153      	str	r3, [r2, #20]
		}

}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40010400 	.word	0x40010400
 800059c:	20000197 	.word	0x20000197
 80005a0:	20000195 	.word	0x20000195

080005a4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if((TIM4->SR & (1<<1))!=0){
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <TIM4_IRQHandler+0x44>)
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d015      	beq.n	80005e0 <TIM4_IRQHandler+0x3c>
	if(state == 0){
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <TIM4_IRQHandler+0x48>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d103      	bne.n	80005c4 <TIM4_IRQHandler+0x20>
		state = 1;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <TIM4_IRQHandler+0x48>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	e002      	b.n	80005ca <TIM4_IRQHandler+0x26>
	}
	else{
		state = 0;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <TIM4_IRQHandler+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	}

	TIM4->CCR1 += 250;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <TIM4_IRQHandler+0x44>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <TIM4_IRQHandler+0x44>)
 80005d0:	33fa      	adds	r3, #250	; 0xfa
 80005d2:	6353      	str	r3, [r2, #52]	; 0x34

	TIM4->SR &= ~(1<<1);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <TIM4_IRQHandler+0x44>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <TIM4_IRQHandler+0x44>)
 80005da:	f023 0302 	bic.w	r3, r3, #2
 80005de:	6113      	str	r3, [r2, #16]
    }
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40000800 	.word	0x40000800
 80005ec:	20000196 	.word	0x20000196

080005f0 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
    if ((ADC1->SR & (1<<1)) != 0) {
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <ADC1_IRQHandler+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <ADC1_IRQHandler+0x1a>
        valor = ADC1->DR; // Lee el valor del ADC
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <ADC1_IRQHandler+0x24>)
 8000602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <ADC1_IRQHandler+0x28>)
 8000608:	801a      	strh	r2, [r3, #0]

    }
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40012400 	.word	0x40012400
 8000618:	20000198 	.word	0x20000198

0800061c <ajustarVelocidad>:
void ajustarVelocidad(unsigned short valor) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
	unsigned int velocidad = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
	for(unsigned int i = 0; i<selection; i++){
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	e03a      	b.n	80006a6 <ajustarVelocidad+0x8a>
	    if(velocidades[i]<= valor && valor <=velocidades[i+1]){
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <ajustarVelocidad+0x9c>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	429a      	cmp	r2, r3
 800063c:	d830      	bhi.n	80006a0 <ajustarVelocidad+0x84>
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	491c      	ldr	r1, [pc, #112]	; (80006b8 <ajustarVelocidad+0x9c>)
 8000646:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800064a:	429a      	cmp	r2, r3
 800064c:	d828      	bhi.n	80006a0 <ajustarVelocidad+0x84>
	    	if (valor <= velocidades[1]) {
 800064e:	88fa      	ldrh	r2, [r7, #6]
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <ajustarVelocidad+0x9c>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d808      	bhi.n	800066a <ajustarVelocidad+0x4e>
	    		        velocidad = 50;
 8000658:	2332      	movs	r3, #50	; 0x32
 800065a:	60bb      	str	r3, [r7, #8]
	    		        TIM3->CCR2 = velocidad;
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <ajustarVelocidad+0xa0>)
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	6393      	str	r3, [r2, #56]	; 0x38
	    		        TIM3->CCR4 = velocidad;
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <ajustarVelocidad+0xa0>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	e01a      	b.n	80006a0 <ajustarVelocidad+0x84>

	    		    } else if (valor <= velocidades[2]) {
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <ajustarVelocidad+0x9c>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	429a      	cmp	r2, r3
 8000672:	d808      	bhi.n	8000686 <ajustarVelocidad+0x6a>
	    		        velocidad = 70;
 8000674:	2346      	movs	r3, #70	; 0x46
 8000676:	60bb      	str	r3, [r7, #8]
	    		        TIM3->CCR2 = velocidad;
 8000678:	4a10      	ldr	r2, [pc, #64]	; (80006bc <ajustarVelocidad+0xa0>)
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	6393      	str	r3, [r2, #56]	; 0x38
	    		        TIM3->CCR4 = velocidad;
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <ajustarVelocidad+0xa0>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	e00c      	b.n	80006a0 <ajustarVelocidad+0x84>

	    		    } else if (valor <= velocidades[3]) {
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <ajustarVelocidad+0x9c>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d807      	bhi.n	80006a0 <ajustarVelocidad+0x84>
	    		        velocidad = 100;
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	60bb      	str	r3, [r7, #8]
	    		        TIM3->CCR2 = velocidad;
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <ajustarVelocidad+0xa0>)
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	6393      	str	r3, [r2, #56]	; 0x38
	    		        TIM3->CCR4 = velocidad;
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <ajustarVelocidad+0xa0>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
	for(unsigned int i = 0; i<selection; i++){
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d9c1      	bls.n	8000630 <ajustarVelocidad+0x14>

	    		    }
	    }
	}
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20000000 	.word	0x20000000
 80006bc:	40000400 	.word	0x40000400

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fe05 	bl	80012d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 fa3c 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 fbfc 	bl	8000ec8 <MX_GPIO_Init>
  MX_ADC_Init();
 80006d0:	f000 faa0 	bl	8000c14 <MX_ADC_Init>
  MX_LCD_Init();
 80006d4:	f000 faf8 	bl	8000cc8 <MX_LCD_Init>
  MX_TS_Init();
 80006d8:	f000 fbc6 	bl	8000e68 <MX_TS_Init>
  MX_TIM4_Init();
 80006dc:	f000 fb76 	bl	8000dcc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 fbc8 	bl	8000e74 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80006e4:	f000 fb24 	bl	8000d30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // PC6, PC7, PC8, and PC9 as digital outputs (01)
    GPIOC->MODER &= ~(1 << (6*2+1));
 80006e8:	4b99      	ldr	r3, [pc, #612]	; (8000950 <main+0x290>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a98      	ldr	r2, [pc, #608]	; (8000950 <main+0x290>)
 80006ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006f2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (6*2));
 80006f4:	4b96      	ldr	r3, [pc, #600]	; (8000950 <main+0x290>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a95      	ldr	r2, [pc, #596]	; (8000950 <main+0x290>)
 80006fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fe:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (7*2+1));
 8000700:	4b93      	ldr	r3, [pc, #588]	; (8000950 <main+0x290>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a92      	ldr	r2, [pc, #584]	; (8000950 <main+0x290>)
 8000706:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800070a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (7*2));
 800070c:	4b90      	ldr	r3, [pc, #576]	; (8000950 <main+0x290>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a8f      	ldr	r2, [pc, #572]	; (8000950 <main+0x290>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (8*2+1));
 8000718:	4b8d      	ldr	r3, [pc, #564]	; (8000950 <main+0x290>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a8c      	ldr	r2, [pc, #560]	; (8000950 <main+0x290>)
 800071e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000722:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (8*2));
 8000724:	4b8a      	ldr	r3, [pc, #552]	; (8000950 <main+0x290>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a89      	ldr	r2, [pc, #548]	; (8000950 <main+0x290>)
 800072a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (9*2+1));
 8000730:	4b87      	ldr	r3, [pc, #540]	; (8000950 <main+0x290>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a86      	ldr	r2, [pc, #536]	; (8000950 <main+0x290>)
 8000736:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800073a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (9*2));
 800073c:	4b84      	ldr	r3, [pc, #528]	; (8000950 <main+0x290>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a83      	ldr	r2, [pc, #524]	; (8000950 <main+0x290>)
 8000742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

    // PC1 & PC2 as digital input (00)
    GPIOC->MODER &= ~(1 << (1*2+1));
 8000748:	4b81      	ldr	r3, [pc, #516]	; (8000950 <main+0x290>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a80      	ldr	r2, [pc, #512]	; (8000950 <main+0x290>)
 800074e:	f023 0308 	bic.w	r3, r3, #8
 8000752:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (1*2));
 8000754:	4b7e      	ldr	r3, [pc, #504]	; (8000950 <main+0x290>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a7d      	ldr	r2, [pc, #500]	; (8000950 <main+0x290>)
 800075a:	f023 0304 	bic.w	r3, r3, #4
 800075e:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(1 << (2*2+1));
 8000760:	4b7b      	ldr	r3, [pc, #492]	; (8000950 <main+0x290>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a7a      	ldr	r2, [pc, #488]	; (8000950 <main+0x290>)
 8000766:	f023 0320 	bic.w	r3, r3, #32
 800076a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (2*2));
 800076c:	4b78      	ldr	r3, [pc, #480]	; (8000950 <main+0x290>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a77      	ldr	r2, [pc, #476]	; (8000950 <main+0x290>)
 8000772:	f023 0310 	bic.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]

    //Configure the EXTI1
    //Hacemos la interrupcion del primer infrarrojo
    SYSCFG -> EXTICR[0] = 0;
 8000778:	4b76      	ldr	r3, [pc, #472]	; (8000954 <main+0x294>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
    EXTI -> IMR |= (1<<1);
 800077e:	4b76      	ldr	r3, [pc, #472]	; (8000958 <main+0x298>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a75      	ldr	r2, [pc, #468]	; (8000958 <main+0x298>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6013      	str	r3, [r2, #0]
    EXTI -> RTSR |= (1<<1);
 800078a:	4b73      	ldr	r3, [pc, #460]	; (8000958 <main+0x298>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	4a72      	ldr	r2, [pc, #456]	; (8000958 <main+0x298>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6093      	str	r3, [r2, #8]
    EXTI -> FTSR |= (1<<1);
 8000796:	4b70      	ldr	r3, [pc, #448]	; (8000958 <main+0x298>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a6f      	ldr	r2, [pc, #444]	; (8000958 <main+0x298>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0] |= (1 << 7);  //EXTI1 posicion 7
 80007a2:	4b6e      	ldr	r3, [pc, #440]	; (800095c <main+0x29c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a6d      	ldr	r2, [pc, #436]	; (800095c <main+0x29c>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6013      	str	r3, [r2, #0]


     //Configure the EXTI2
    SYSCFG -> EXTICR[0] = 0;
 80007ae:	4b69      	ldr	r3, [pc, #420]	; (8000954 <main+0x294>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
    EXTI -> IMR |= (1<<2);
 80007b4:	4b68      	ldr	r3, [pc, #416]	; (8000958 <main+0x298>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a67      	ldr	r2, [pc, #412]	; (8000958 <main+0x298>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6013      	str	r3, [r2, #0]
    EXTI -> RTSR |= (1<<2);
 80007c0:	4b65      	ldr	r3, [pc, #404]	; (8000958 <main+0x298>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a64      	ldr	r2, [pc, #400]	; (8000958 <main+0x298>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6093      	str	r3, [r2, #8]
    EXTI -> FTSR |= (1<<2);
 80007cc:	4b62      	ldr	r3, [pc, #392]	; (8000958 <main+0x298>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a61      	ldr	r2, [pc, #388]	; (8000958 <main+0x298>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0] |= (1 << 8); //EXTI2 posicion 8
 80007d8:	4b60      	ldr	r3, [pc, #384]	; (800095c <main+0x29c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a5f      	ldr	r2, [pc, #380]	; (800095c <main+0x29c>)
 80007de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e2:	6013      	str	r3, [r2, #0]

    //Configure buzzer
    GPIOB->MODER &= ~(1 << (8 * 2));
 80007e4:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <main+0x2a0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a5d      	ldr	r2, [pc, #372]	; (8000960 <main+0x2a0>)
 80007ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ee:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (8 * 2+1));
 80007f0:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <main+0x2a0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a5a      	ldr	r2, [pc, #360]	; (8000960 <main+0x2a0>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fa:	6013      	str	r3, [r2, #0]


       //Configure buzzer
       GPIOB->MODER &= ~(1 << (8 * 2));
 80007fc:	4b58      	ldr	r3, [pc, #352]	; (8000960 <main+0x2a0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a57      	ldr	r2, [pc, #348]	; (8000960 <main+0x2a0>)
 8000802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000806:	6013      	str	r3, [r2, #0]
       GPIOB->MODER |= (1 << (8 * 2+1));
 8000808:	4b55      	ldr	r3, [pc, #340]	; (8000960 <main+0x2a0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a54      	ldr	r2, [pc, #336]	; (8000960 <main+0x2a0>)
 800080e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000812:	6013      	str	r3, [r2, #0]
       //Configuration TIM4
       TIM4->CR1 = 0;
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <main+0x2a4>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
       TIM4->CR2 = 0;
 800081a:	4b52      	ldr	r3, [pc, #328]	; (8000964 <main+0x2a4>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
       TIM4->SMCR = 0;
 8000820:	4b50      	ldr	r3, [pc, #320]	; (8000964 <main+0x2a4>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]

       TIM4->CNT = 0;
 8000826:	4b4f      	ldr	r3, [pc, #316]	; (8000964 <main+0x2a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
       TIM4->PSC = 31999;
 800082c:	4b4d      	ldr	r3, [pc, #308]	; (8000964 <main+0x2a4>)
 800082e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
       TIM4->ARR = 0xFFFF;
 8000834:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <main+0x2a4>)
 8000836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
       TIM4->CCR1 = 250;
 800083c:	4b49      	ldr	r3, [pc, #292]	; (8000964 <main+0x2a4>)
 800083e:	22fa      	movs	r2, #250	; 0xfa
 8000840:	635a      	str	r2, [r3, #52]	; 0x34

       TIM4->CCMR1 = 0;
 8000842:	4b48      	ldr	r3, [pc, #288]	; (8000964 <main+0x2a4>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
       TIM4->CCMR2 = 0;
 8000848:	4b46      	ldr	r3, [pc, #280]	; (8000964 <main+0x2a4>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
       TIM4->CCER = 0;
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <main+0x2a4>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]

       TIM4->DIER = (1<<1);
 8000854:	4b43      	ldr	r3, [pc, #268]	; (8000964 <main+0x2a4>)
 8000856:	2202      	movs	r2, #2
 8000858:	60da      	str	r2, [r3, #12]

       TIM4->EGR |= 0x0001;
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <main+0x2a4>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a41      	ldr	r2, [pc, #260]	; (8000964 <main+0x2a4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6153      	str	r3, [r2, #20]
       TIM4->SR = 0;
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <main+0x2a4>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
       TIM4->CR1 |= 0x0001;
 800086c:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <main+0x2a4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a3c      	ldr	r2, [pc, #240]	; (8000964 <main+0x2a4>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]

       NVIC->ISER[0] |= (1 << 30);
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <main+0x29c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a37      	ldr	r2, [pc, #220]	; (800095c <main+0x29c>)
 800087e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000882:	6013      	str	r3, [r2, #0]

    HAL_UART_Receive_IT(&huart1, data, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	4938      	ldr	r1, [pc, #224]	; (8000968 <main+0x2a8>)
 8000888:	4838      	ldr	r0, [pc, #224]	; (800096c <main+0x2ac>)
 800088a:	f002 fe2c 	bl	80034e6 <HAL_UART_Receive_IT>

       //PA5 as an input(00)
             GPIOA->MODER |= 0x00000C00;
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <main+0x2b0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <main+0x2b0>)
 8000894:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000898:	6013      	str	r3, [r2, #0]


    	ADC1 -> CR2 &= ~(0x00000001);//MAKE SURE THE POWER IS OFF
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <main+0x2b4>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	4a35      	ldr	r2, [pc, #212]	; (8000974 <main+0x2b4>)
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	6093      	str	r3, [r2, #8]
      	ADC1 -> CR1 = 0x00000020;
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <main+0x2b4>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	605a      	str	r2, [r3, #4]
       	ADC1 -> CR2 = 0x00000412;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <main+0x2b4>)
 80008ae:	f240 4212 	movw	r2, #1042	; 0x412
 80008b2:	609a      	str	r2, [r3, #8]
       	ADC1 -> SQR1 = 0x00000000;//I JUST WANT ONE CONVERSION
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <main+0x2b4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
       	ADC1 -> SQR5 = 0x00000005;
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <main+0x2b4>)
 80008bc:	2205      	movs	r2, #5
 80008be:	641a      	str	r2, [r3, #64]	; 0x40
       	ADC1 -> CR2 |= 0x00000001;//POWER ON
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <main+0x2b4>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <main+0x2b4>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6093      	str	r3, [r2, #8]
       	 while ((ADC1->SR&0x0040)==0); // If ADCONS = 0, I wait till converter is ready
 80008cc:	bf00      	nop
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <main+0x2b4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f9      	beq.n	80008ce <main+0x20e>
        ADC1->CR2 |= 0x40000000;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <main+0x2b4>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4a25      	ldr	r2, [pc, #148]	; (8000974 <main+0x2b4>)
 80008e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008e4:	6093      	str	r3, [r2, #8]
        NVIC->ISER[0] |= (1<<18);
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <main+0x29c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <main+0x29c>)
 80008ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f0:	6013      	str	r3, [r2, #0]
         	// PWM Configuration for pin PC6 and channel 1 of TIM3
        TIM3->CR1 = 0x0000; // Disable TIM3
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <main+0x2b8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
       	TIM3->CR2 = 0x0000; // Trigger mode configuration
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <main+0x2b8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
       	TIM3->SMCR = 0; // Synchronization control configuration
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <main+0x2b8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]

       	TIM3->PSC = 319; // Prescaler configuration
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <main+0x2b8>)
 8000906:	f240 123f 	movw	r2, #319	; 0x13f
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
       	TIM3->CNT = 0; // Initialize counter
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <main+0x2b8>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
       	TIM3->ARR = 99; // Auto-reload value configuration
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <main+0x2b8>)
 8000914:	2263      	movs	r2, #99	; 0x63
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
       	TIM3->CCR2 = 1; // Duty cycle configuration (DC debe estar definido previamente)
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x2b8>)
 800091a:	2201      	movs	r2, #1
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
       	TIM3->CCR4 = 1;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <main+0x2b8>)
 8000920:	2201      	movs	r2, #1
 8000922:	641a      	str	r2, [r3, #64]	; 0x40

       	TIM3->DIER = 0x0000; // Disable interrupts
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x2b8>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
       	TIM3->DCR = 0;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <main+0x2b8>)
 800092c:	2200      	movs	r2, #0
 800092e:	649a      	str	r2, [r3, #72]	; 0x48
         	//PC7 ch2

       	TIM3->CCMR1 |= (1<<(5*2+1)); // Clear channel 1 configuration bits
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x2b8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <main+0x2b8>)
 8000936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800093a:	6193      	str	r3, [r2, #24]
       	TIM3->CCMR1 |= (1<<(7*2));	//1
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <main+0x2b8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <main+0x2b8>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6193      	str	r3, [r2, #24]
       	TIM3->CCMR1 |= (1<<(6*2+1));	//1
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <main+0x2b8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	e016      	b.n	800097c <main+0x2bc>
 800094e:	bf00      	nop
 8000950:	40020800 	.word	0x40020800
 8000954:	40010000 	.word	0x40010000
 8000958:	40010400 	.word	0x40010400
 800095c:	e000e100 	.word	0xe000e100
 8000960:	40020400 	.word	0x40020400
 8000964:	40000800 	.word	0x40000800
 8000968:	2000019c 	.word	0x2000019c
 800096c:	2000014c 	.word	0x2000014c
 8000970:	40020000 	.word	0x40020000
 8000974:	40012400 	.word	0x40012400
 8000978:	40000400 	.word	0x40000400
 800097c:	4a6b      	ldr	r2, [pc, #428]	; (8000b2c <main+0x46c>)
 800097e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000982:	6193      	str	r3, [r2, #24]
       	TIM3->CCMR1 &= ~(1<<(6*2));	//0
 8000984:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <main+0x46c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a68      	ldr	r2, [pc, #416]	; (8000b2c <main+0x46c>)
 800098a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800098e:	6193      	str	r3, [r2, #24]
       	//PC9 ch4
       	TIM3->CCMR2 |= (1<<(5*2+1));	//PE
 8000990:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <main+0x46c>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	4a65      	ldr	r2, [pc, #404]	; (8000b2c <main+0x46c>)
 8000996:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800099a:	61d3      	str	r3, [r2, #28]
       	//Los 3 siguientes para PWM (ver manual)
       	TIM3->CCMR2 |= (1<<(7*2));	//1
 800099c:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <main+0x46c>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a62      	ldr	r2, [pc, #392]	; (8000b2c <main+0x46c>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a6:	61d3      	str	r3, [r2, #28]
       	TIM3->CCMR2 |= (1<<(6*2+1));	//1
 80009a8:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <main+0x46c>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	4a5f      	ldr	r2, [pc, #380]	; (8000b2c <main+0x46c>)
 80009ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009b2:	61d3      	str	r3, [r2, #28]
       	TIM3->CCMR2 &= ~(1<<(6*2));	//0
 80009b4:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <main+0x46c>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a5c      	ldr	r2, [pc, #368]	; (8000b2c <main+0x46c>)
 80009ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009be:	61d3      	str	r3, [r2, #28]



       	TIM3->CCER |= (1<<(2*2));		//CC1E
 80009c0:	4b5a      	ldr	r3, [pc, #360]	; (8000b2c <main+0x46c>)
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	4a59      	ldr	r2, [pc, #356]	; (8000b2c <main+0x46c>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6213      	str	r3, [r2, #32]
       	TIM3->CCER |= (1<<(6*2));		//CC1E
 80009cc:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <main+0x46c>)
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	4a56      	ldr	r2, [pc, #344]	; (8000b2c <main+0x46c>)
 80009d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d6:	6213      	str	r3, [r2, #32]
       	TIM3->CR1 |= (1<<(3*2+1));		//HW (bit ARPE)
 80009d8:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <main+0x46c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a53      	ldr	r2, [pc, #332]	; (8000b2c <main+0x46c>)
 80009de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e2:	6013      	str	r3, [r2, #0]
       	TIM3->EGR |= (1<<0);		//UG
 80009e4:	4b51      	ldr	r3, [pc, #324]	; (8000b2c <main+0x46c>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <main+0x46c>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6153      	str	r3, [r2, #20]
       	TIM3->CR1 |= (1<<0);		//ON
 80009f0:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <main+0x46c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a4d      	ldr	r2, [pc, #308]	; (8000b2c <main+0x46c>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]
       	TIM3->SR = 0;				//FLAG
 80009fc:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <main+0x46c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]


       	TIM3->CCR2 = 20;
 8000a02:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <main+0x46c>)
 8000a04:	2214      	movs	r2, #20
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
      	TIM3->CCR4 = 20;
 8000a08:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <main+0x46c>)
 8000a0a:	2214      	movs	r2, #20
 8000a0c:	641a      	str	r2, [r3, #64]	; 0x40


        NVIC->ISER[0] |= (1 << 29);
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <main+0x470>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a47      	ldr	r2, [pc, #284]	; (8000b30 <main+0x470>)
 8000a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a18:	6013      	str	r3, [r2, #0]

     HAL_UART_Transmit(&huart1, &data[0], 1, 10000);
 8000a1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4944      	ldr	r1, [pc, #272]	; (8000b34 <main+0x474>)
 8000a22:	4845      	ldr	r0, [pc, #276]	; (8000b38 <main+0x478>)
 8000a24:	f002 fc4a 	bl	80032bc <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_UART_Receive(&huart1, data, 1, 10000) == HAL_OK) {
 8000a28:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4941      	ldr	r1, [pc, #260]	; (8000b34 <main+0x474>)
 8000a30:	4841      	ldr	r0, [pc, #260]	; (8000b38 <main+0x478>)
 8000a32:	f002 fcc6 	bl	80033c2 <HAL_UART_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14f      	bne.n	8000adc <main+0x41c>
		  ajustarVelocidad(valor);
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <main+0x47c>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fdeb 	bl	800061c <ajustarVelocidad>
	  		  switch (data[0]) {
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <main+0x474>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	3b41      	subs	r3, #65	; 0x41
 8000a4c:	2b12      	cmp	r3, #18
 8000a4e:	d841      	bhi.n	8000ad4 <main+0x414>
 8000a50:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <main+0x398>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000acd 	.word	0x08000acd
 8000a5c:	08000ac5 	.word	0x08000ac5
 8000a60:	08000ad5 	.word	0x08000ad5
 8000a64:	08000ad5 	.word	0x08000ad5
 8000a68:	08000ad5 	.word	0x08000ad5
 8000a6c:	08000aa5 	.word	0x08000aa5
 8000a70:	08000ad5 	.word	0x08000ad5
 8000a74:	08000ad5 	.word	0x08000ad5
 8000a78:	08000ad5 	.word	0x08000ad5
 8000a7c:	08000ad5 	.word	0x08000ad5
 8000a80:	08000ad5 	.word	0x08000ad5
 8000a84:	08000abd 	.word	0x08000abd
 8000a88:	08000ad5 	.word	0x08000ad5
 8000a8c:	08000ad5 	.word	0x08000ad5
 8000a90:	08000ad5 	.word	0x08000ad5
 8000a94:	08000ad5 	.word	0x08000ad5
 8000a98:	08000ad5 	.word	0x08000ad5
 8000a9c:	08000ab5 	.word	0x08000ab5
 8000aa0:	08000aad 	.word	0x08000aad
	  			              case 'F':
	  			                  carState = 1;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <main+0x480>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
	  			                  break;
 8000aaa:	e017      	b.n	8000adc <main+0x41c>
	  			              case 'S':
	  			            	carState = 0;
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <main+0x480>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
	  			                  break;
 8000ab2:	e013      	b.n	8000adc <main+0x41c>
	  			              case 'R':
	  			            	carState = 2;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <main+0x480>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	701a      	strb	r2, [r3, #0]
	  			            	 break;
 8000aba:	e00f      	b.n	8000adc <main+0x41c>
	  			              case 'L':
	  			            	carState = 3;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <main+0x480>)
 8000abe:	2203      	movs	r2, #3
 8000ac0:	701a      	strb	r2, [r3, #0]
	  			            	  break;
 8000ac2:	e00b      	b.n	8000adc <main+0x41c>
	  			              case 'B':
	  			            	carState = 4;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <main+0x480>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	701a      	strb	r2, [r3, #0]
	  			            	  break;
 8000aca:	e007      	b.n	8000adc <main+0x41c>
	  			              case 'A':
	  			            	carState = 5;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <main+0x480>)
 8000ace:	2205      	movs	r2, #5
 8000ad0:	701a      	strb	r2, [r3, #0]
	  			            	  break;
 8000ad2:	e003      	b.n	8000adc <main+0x41c>
	  			              default:
	  			            	carState = 0;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <main+0x480>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	  			                  break;
 8000ada:	bf00      	nop
	  			    }


	  	   }
    /* USER CODE END WHILE */
      switch (carState) {
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <main+0x480>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d81e      	bhi.n	8000b22 <main+0x462>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <main+0x42c>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b0b 	.word	0x08000b0b
 8000af4:	08000b11 	.word	0x08000b11
 8000af8:	08000b17 	.word	0x08000b17
 8000afc:	08000b1d 	.word	0x08000b1d
 8000b00:	08000b29 	.word	0x08000b29
          case 0:
              stopWheels();
 8000b04:	f7ff fcba 	bl	800047c <stopWheels>
              break;
 8000b08:	e00f      	b.n	8000b2a <main+0x46a>
          case 1:
              moveForward();
 8000b0a:	f7ff fcc3 	bl	8000494 <moveForward>
              break;
 8000b0e:	e00c      	b.n	8000b2a <main+0x46a>
          case 2:
              rightWheel();
 8000b10:	f7ff fcd4 	bl	80004bc <rightWheel>
              break;
 8000b14:	e009      	b.n	8000b2a <main+0x46a>
          case 3:
              leftWheel();
 8000b16:	f7ff fce5 	bl	80004e4 <leftWheel>
              break;
 8000b1a:	e006      	b.n	8000b2a <main+0x46a>
          case 4:
              moveBackward();
 8000b1c:	f7ff fcf6 	bl	800050c <moveBackward>
              break;
 8000b20:	e003      	b.n	8000b2a <main+0x46a>
          case 5:
              //autonomousMode();
              break;
          default:
              stopWheels();
 8000b22:	f7ff fcab 	bl	800047c <stopWheels>
              break;
 8000b26:	e000      	b.n	8000b2a <main+0x46a>
              break;
 8000b28:	bf00      	nop
	  if (HAL_UART_Receive(&huart1, data, 1, 10000) == HAL_OK) {
 8000b2a:	e77d      	b.n	8000a28 <main+0x368>
 8000b2c:	40000400 	.word	0x40000400
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	2000019c 	.word	0x2000019c
 8000b38:	2000014c 	.word	0x2000014c
 8000b3c:	20000198 	.word	0x20000198
 8000b40:	20000197 	.word	0x20000197

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fe78 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b7a:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b80:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b82:	2306      	movs	r3, #6
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b96:	2300      	movs	r3, #0
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000ba0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f9da 	bl	8001f64 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bb6:	f000 f9cb 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fcf5 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000be0:	f000 f9b6 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LCD;
 8000be4:	2303      	movs	r3, #3
 8000be6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf2:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 ffaa 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c02:	f000 f9a5 	bl	8000f50 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3758      	adds	r7, #88	; 0x58
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c26:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <MX_ADC_Init+0xb0>)
 8000c28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000c8a:	f000 fb91 	bl	80013b0 <HAL_ADC_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000c94:	f000 f95c 	bl	8000f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_ADC_Init+0xac>)
 8000caa:	f000 fcc7 	bl	800163c <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000cb4:	f000 f94c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000003c 	.word	0x2000003c
 8000cc4:	40012400 	.word	0x40012400

08000cc8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <MX_LCD_Init+0x64>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_LCD_Init+0x60>)
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_LCD_Init+0x60>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_LCD_Init+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_LCD_Init+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_LCD_Init+0x60>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_LCD_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_LCD_Init+0x60>)
 8000d16:	f001 f845 	bl	8001da4 <HAL_LCD_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 f916 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000090 	.word	0x20000090
 8000d2c:	40002400 	.word	0x40002400

08000d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <MX_TIM3_Init+0x98>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d72:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d74:	f001 fff6 	bl	8002d64 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d7e:	f000 f8e7 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000d90:	f002 f827 	bl	8002de2 <HAL_TIM_ConfigClockSource>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f8d9 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM3_Init+0x94>)
 8000dac:	f002 f9d8 	bl	8003160 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000db6:	f000 f8cb 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000cc 	.word	0x200000cc
 8000dc8:	40000400 	.word	0x40000400

08000dcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <MX_TIM4_Init+0x98>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e0e:	4814      	ldr	r0, [pc, #80]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000e10:	f001 ffa8 	bl	8002d64 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 f899 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000e2c:	f001 ffd9 	bl	8002de2 <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f88b 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_TIM4_Init+0x94>)
 8000e48:	f002 f98a 	bl	8003160 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e52:	f000 f87d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000010c 	.word	0x2000010c
 8000e64:	40000800 	.word	0x40000800

08000e68 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <MX_USART1_UART_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000eac:	f002 f9b6 	bl	800321c <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f000 f84b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000014c 	.word	0x2000014c
 8000ec4:	40013800 	.word	0x40013800

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_GPIO_Init+0x80>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f3c:	f000 fdb2 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f6c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fd46 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0x74>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d123      	bne.n	8001026 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_ADC_MspInit+0x78>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_ADC_MspInit+0x78>)
 8000fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_ADC_MspInit+0x78>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_ADC_MspInit+0x78>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_ADC_MspInit+0x78>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_ADC_MspInit+0x78>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001012:	2303      	movs	r3, #3
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_ADC_MspInit+0x7c>)
 8001022:	f000 fd3f 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012400 	.word	0x40012400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a34      	ldr	r2, [pc, #208]	; (800112c <HAL_LCD_MspInit+0xf0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d162      	bne.n	8001124 <HAL_LCD_MspInit+0xe8>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	4a33      	ldr	r2, [pc, #204]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 8001064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001068:	6253      	str	r3, [r2, #36]	; 0x24
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_LCD_MspInit+0xf4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB8     ------> LCD_SEG16
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin
 80010be:	f640 73cf 	movw	r3, #4047	; 0xfcf
 80010c2:	61fb      	str	r3, [r7, #28]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin
                          |SEG22_Pin|SEG23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010d0:	230b      	movs	r3, #11
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <HAL_LCD_MspInit+0xf8>)
 80010dc:	f000 fce2 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 80010e0:	f248 730e 	movw	r3, #34574	; 0x870e
 80010e4:	61fb      	str	r3, [r7, #28]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010f2:	230b      	movs	r3, #11
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <HAL_LCD_MspInit+0xfc>)
 80010fe:	f000 fcd1 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 8001102:	f64f 7338 	movw	r3, #65336	; 0xff38
 8001106:	61fb      	str	r3, [r7, #28]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001114:	230b      	movs	r3, #11
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <HAL_LCD_MspInit+0x100>)
 8001120:	f000 fcc0 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	; 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40002400 	.word	0x40002400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400

08001140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_TIM_Base_MspInit+0x58>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10c      	bne.n	800116c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_TIM_Base_MspInit+0x5c>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_TIM_Base_MspInit+0x5c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6253      	str	r3, [r2, #36]	; 0x24
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_TIM_Base_MspInit+0x5c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800116a:	e010      	b.n	800118e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_TIM_Base_MspInit+0x60>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10b      	bne.n	800118e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_TIM_Base_MspInit+0x5c>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_TIM_Base_MspInit+0x5c>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6253      	str	r3, [r2, #36]	; 0x24
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_TIM_Base_MspInit+0x5c>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40000400 	.word	0x40000400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40000800 	.word	0x40000800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_UART_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_UART_MspInit+0x84>)
 8001212:	f000 fc47 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40013800 	.word	0x40013800
 8001224:	40023800 	.word	0x40023800
 8001228:	40020400 	.word	0x40020400

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f000 f881 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
	...

08001288 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff fff7 	bl	800127a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f002 fad1 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fa03 	bl	80006c0 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80012c4:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 80012c8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80012cc:	200001a8 	.word	0x200001a8

080012d0 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <COMP_IRQHandler>

080012d2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 fbad 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f80e 	bl	8001304 <HAL_InitTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f4:	f7ff fe32 	bl	8000f5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_InitTick+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d022      	beq.n	800135e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_InitTick+0x6c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_InitTick+0x68>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001324:	fbb1 f3f3 	udiv	r3, r1, r3
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fbac 	bl	8001a8a <HAL_SYSTICK_Config>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d809      	bhi.n	8001352 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133e:	2200      	movs	r2, #0
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	f04f 30ff 	mov.w	r0, #4294967295
 8001346:	f000 fb84 	bl	8001a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_InitTick+0x70>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	e007      	b.n	8001362 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e004      	b.n	8001362 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e001      	b.n	8001362 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000001c 	.word	0x2000001c
 8001370:	20000014 	.word	0x20000014
 8001374:	20000018 	.word	0x20000018

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4413      	add	r3, r2
 8001386:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x1c>)
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200001a4 	.word	0x200001a4
 8001398:	2000001c 	.word	0x2000001c

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200001a4 	.word	0x200001a4

080013b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e127      	b.n	8001620 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d115      	bne.n	800140a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ec:	4b8e      	ldr	r3, [pc, #568]	; (8001628 <HAL_ADC_Init+0x278>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a8d      	ldr	r2, [pc, #564]	; (8001628 <HAL_ADC_Init+0x278>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	4b8b      	ldr	r3, [pc, #556]	; (8001628 <HAL_ADC_Init+0x278>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fdd9 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 80ff 	bne.w	8001616 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001420:	f023 0302 	bic.w	r3, r3, #2
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800142c:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_ADC_Init+0x27c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	497c      	ldr	r1, [pc, #496]	; (800162c <HAL_ADC_Init+0x27c>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001446:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144e:	4619      	mov	r1, r3
 8001450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001454:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800146a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001470:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001492:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001496:	4313      	orrs	r3, r2
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80014aa:	4313      	orrs	r3, r2
 80014ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ae:	4313      	orrs	r3, r2
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014bc:	2b40      	cmp	r3, #64	; 0x40
 80014be:	d04f      	beq.n	8001560 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c6:	4313      	orrs	r3, r2
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014d2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6912      	ldr	r2, [r2, #16]
 80014d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_Init+0x136>
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6912      	ldr	r2, [r2, #16]
 80014e2:	2a01      	cmp	r2, #1
 80014e4:	d102      	bne.n	80014ec <HAL_ADC_Init+0x13c>
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	e000      	b.n	80014ee <HAL_ADC_Init+0x13e>
 80014ec:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80014ee:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014f2:	4313      	orrs	r3, r2
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d125      	bne.n	800154c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001506:	2b00      	cmp	r3, #0
 8001508:	d114      	bne.n	8001534 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	3b01      	subs	r3, #1
 8001510:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001514:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	fa92 f2a2 	rbit	r2, r2
 800151c:	617a      	str	r2, [r7, #20]
  return result;
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	fab2 f282 	clz	r2, r2
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	4093      	lsls	r3, r2
 8001528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800152c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800152e:	4313      	orrs	r3, r2
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
 8001532:	e00b      	b.n	800154c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_ADC_Init+0x280>)
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800155c:	430b      	orrs	r3, r1
 800155e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_ADC_Init+0x284>)
 8001568:	4013      	ands	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001570:	430b      	orrs	r3, r1
 8001572:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157c:	d003      	beq.n	8001586 <HAL_ADC_Init+0x1d6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d119      	bne.n	80015ba <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	3b01      	subs	r3, #1
 8001596:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800159a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	fa92 f2a2 	rbit	r2, r2
 80015a2:	60fa      	str	r2, [r7, #12]
  return result;
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	fa03 f202 	lsl.w	r2, r3, r2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	e007      	b.n	80015ca <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_ADC_Init+0x288>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d10b      	bne.n	80015f2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	f023 0303 	bic.w	r3, r3, #3
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f0:	e014      	b.n	800161c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f023 0312 	bic.w	r3, r3, #18
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001614:	e002      	b.n	800161c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800161c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001620:	4618      	mov	r0, r3
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40012700 	.word	0x40012700
 8001630:	fcfc16ff 	.word	0xfcfc16ff
 8001634:	c0fff18d 	.word	0xc0fff18d
 8001638:	bf80fffe 	.word	0xbf80fffe

0800163c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADC_ConfigChannel+0x20>
 8001658:	2302      	movs	r3, #2
 800165a:	e134      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x28a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b06      	cmp	r3, #6
 800166a:	d81c      	bhi.n	80016a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	3b05      	subs	r3, #5
 800167e:	221f      	movs	r2, #31
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	4019      	ands	r1, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	3b05      	subs	r3, #5
 8001698:	fa00 f203 	lsl.w	r2, r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
 80016a4:	e07e      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d81c      	bhi.n	80016e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b23      	subs	r3, #35	; 0x23
 80016c0:	221f      	movs	r2, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4019      	ands	r1, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	3b23      	subs	r3, #35	; 0x23
 80016da:	fa00 f203 	lsl.w	r2, r0, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80016e6:	e05d      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b12      	cmp	r3, #18
 80016ee:	d81c      	bhi.n	800172a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b41      	subs	r3, #65	; 0x41
 8001702:	221f      	movs	r2, #31
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	4019      	ands	r1, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	; 0x41
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
 8001728:	e03c      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b18      	cmp	r3, #24
 8001730:	d81c      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b5f      	subs	r3, #95	; 0x5f
 8001744:	221f      	movs	r2, #31
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	4019      	ands	r1, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b5f      	subs	r3, #95	; 0x5f
 800175e:	fa00 f203 	lsl.w	r2, r0, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
 800176a:	e01b      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b7d      	subs	r3, #125	; 0x7d
 800177e:	221f      	movs	r2, #31
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b7d      	subs	r3, #125	; 0x7d
 8001798:	fa00 f203 	lsl.w	r2, r0, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	d81a      	bhi.n	80017e2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6959      	ldr	r1, [r3, #20]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	2207      	movs	r2, #7
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4019      	ands	r1, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6898      	ldr	r0, [r3, #8]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	e042      	b.n	8001868 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b13      	cmp	r3, #19
 80017e8:	d81c      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6919      	ldr	r1, [r3, #16]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	3b1e      	subs	r3, #30
 80017fc:	2207      	movs	r2, #7
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	4019      	ands	r1, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6898      	ldr	r0, [r3, #8]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	3b1e      	subs	r3, #30
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	611a      	str	r2, [r3, #16]
 8001822:	e021      	b.n	8001868 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b1a      	cmp	r3, #26
 800182a:	d81c      	bhi.n	8001866 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68d9      	ldr	r1, [r3, #12]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	3b3c      	subs	r3, #60	; 0x3c
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6898      	ldr	r0, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	3b3c      	subs	r3, #60	; 0x3c
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	e000      	b.n	8001868 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001866:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b10      	cmp	r3, #16
 800186e:	d003      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001874:	2b11      	cmp	r3, #17
 8001876:	d121      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_ADC_ConfigChannel+0x294>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11b      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_ADC_ConfigChannel+0x294>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_ADC_ConfigChannel+0x294>)
 800188a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800188e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b10      	cmp	r3, #16
 8001896:	d111      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_ADC_ConfigChannel+0x298>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_ADC_ConfigChannel+0x29c>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9a      	lsrs	r2, r3, #18
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80018ae:	e002      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40012700 	.word	0x40012700
 80018d4:	20000014 	.word	0x20000014
 80018d8:	431bde83 	.word	0x431bde83

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff90 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff49 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff5e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffb0 	bl	80019f8 <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001aba:	e154      	b.n	8001d66 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8146 	beq.w	8001d60 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d017      	beq.n	8001b8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a0 	beq.w	8001d60 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	4b55      	ldr	r3, [pc, #340]	; (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c38:	4a53      	ldr	r2, [pc, #332]	; (8001d88 <HAL_GPIO_Init+0x2e4>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d019      	beq.n	8001c98 <HAL_GPIO_Init+0x1f4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_GPIO_Init+0x1f0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00d      	beq.n	8001c90 <HAL_GPIO_Init+0x1ec>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <HAL_GPIO_Init+0x1e8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_GPIO_Init+0x1e4>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e008      	b.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c88:	2305      	movs	r3, #5
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001caa:	4937      	ldr	r1, [pc, #220]	; (8001d88 <HAL_GPIO_Init+0x2e4>)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cdc:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f aea3 	bne.w	8001abc <HAL_GPIO_Init+0x18>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0a8      	b.n	8001f10 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff f932 	bl	800103c <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e00a      	b.n	8001e0c <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d9f1      	bls.n	8001df6 <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0204 	orr.w	r2, r2, #4
 8001e20:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <HAL_LCD_Init+0x174>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6851      	ldr	r1, [r2, #4]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6892      	ldr	r2, [r2, #8]
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	69d2      	ldr	r2, [r2, #28]
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6a12      	ldr	r2, [r2, #32]
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6992      	ldr	r2, [r2, #24]
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6053      	str	r3, [r2, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f85a 	bl	8001f1c <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fa7c 	bl	800139c <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001ea6:	e00c      	b.n	8001ec2 <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001ea8:	f7ff fa78 	bl	800139c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb6:	d904      	bls.n	8001ec2 <HAL_LCD_Init+0x11e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e026      	b.n	8001f10 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d1eb      	bne.n	8001ea8 <HAL_LCD_Init+0x104>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001ed0:	f7ff fa64 	bl	800139c <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001ed6:	e00c      	b.n	8001ef2 <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001ed8:	f7ff fa60 	bl	800139c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee6:	d904      	bls.n	8001ef2 <HAL_LCD_Init+0x14e>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2210      	movs	r2, #16
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e00e      	b.n	8001f10 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_LCD_Init+0x134>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	fc00000f 	.word	0xfc00000f

08001f1c <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001f28:	f7ff fa38 	bl	800139c <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001f2e:	e00c      	b.n	8001f4a <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001f30:	f7ff fa34 	bl	800139c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f3e:	d904      	bls.n	8001f4a <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e007      	b.n	8001f5a <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d1eb      	bne.n	8001f30 <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e31d      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f76:	4b94      	ldr	r3, [pc, #592]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f80:	4b91      	ldr	r3, [pc, #580]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d07b      	beq.n	800208e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d006      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b87      	ldr	r3, [pc, #540]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06a      	beq.n	800208c <HAL_RCC_OscConfig+0x128>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d166      	bne.n	800208c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e2f7      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x74>
 8001fca:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7e      	ldr	r2, [pc, #504]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e02d      	b.n	8002034 <HAL_RCC_OscConfig+0xd0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x96>
 8001fe0:	4b79      	ldr	r3, [pc, #484]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a78      	ldr	r2, [pc, #480]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0xd0>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0xb8>
 8002002:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a70      	ldr	r2, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6d      	ldr	r2, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xd0>
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff f9ae 	bl	800139c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff f9aa 	bl	800139c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e2ad      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xe0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff f99a 	bl	800139c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff f996 	bl	800139c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e299      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800207e:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x108>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d05a      	beq.n	8002150 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d005      	beq.n	80020ac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d119      	bne.n	80020da <HAL_RCC_OscConfig+0x176>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d116      	bne.n	80020da <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ac:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x160>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e276      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	493d      	ldr	r1, [pc, #244]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d8:	e03a      	b.n	8002150 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d020      	beq.n	8002124 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e2:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f958 	bl	800139c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff f954 	bl	800139c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e257      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	492a      	ldr	r1, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
 8002122:	e015      	b.n	8002150 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff f937 	bl	800139c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff f933 	bl	800139c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e236      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80b8 	beq.w	80022ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d170      	bne.n	8002246 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x218>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e21a      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002188:	429a      	cmp	r2, r3
 800218a:	d921      	bls.n	80021d0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fc7d 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e208      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4906      	ldr	r1, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	4901      	ldr	r1, [pc, #4]	; (80021c8 <HAL_RCC_OscConfig+0x264>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
 80021c6:	e020      	b.n	800220a <HAL_RCC_OscConfig+0x2a6>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4996      	ldr	r1, [pc, #600]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e2:	4b95      	ldr	r3, [pc, #596]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	061b      	lsls	r3, r3, #24
 80021f0:	4991      	ldr	r1, [pc, #580]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fc48 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1d3      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	0b5b      	lsrs	r3, r3, #13
 8002210:	3301      	adds	r3, #1
 8002212:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	6892      	ldr	r2, [r2, #8]
 800221e:	0912      	lsrs	r2, r2, #4
 8002220:	f002 020f 	and.w	r2, r2, #15
 8002224:	4985      	ldr	r1, [pc, #532]	; (800243c <HAL_RCC_OscConfig+0x4d8>)
 8002226:	5c8a      	ldrb	r2, [r1, r2]
 8002228:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800222a:	4a85      	ldr	r2, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 800222c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800222e:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_RCC_OscConfig+0x4e0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f866 	bl	8001304 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d045      	beq.n	80022ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e1b5      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d029      	beq.n	80022a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800224e:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x4e4>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff f8a2 	bl	800139c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225c:	f7ff f89e 	bl	800139c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1a1      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800226e:	4b72      	ldr	r3, [pc, #456]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227a:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	496c      	ldr	r1, [pc, #432]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228c:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	4967      	ldr	r1, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022a2:	4b69      	ldr	r3, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x4e4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff f878 	bl	800139c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b0:	f7ff f874 	bl	800139c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e177      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d030      	beq.n	800233c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b5a      	ldr	r3, [pc, #360]	; (800244c <HAL_RCC_OscConfig+0x4e8>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7ff f858 	bl	800139c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff f854 	bl	800139c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e157      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002302:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x38c>
 800230e:	e015      	b.n	800233c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002310:	4b4e      	ldr	r3, [pc, #312]	; (800244c <HAL_RCC_OscConfig+0x4e8>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7ff f841 	bl	800139c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231e:	f7ff f83d 	bl	800139c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e140      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80b5 	beq.w	80024b4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	4a36      	ldr	r2, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6253      	str	r3, [r2, #36]	; 0x24
 8002366:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCC_OscConfig+0x4ec>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <HAL_RCC_OscConfig+0x4ec>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a32      	ldr	r2, [pc, #200]	; (8002450 <HAL_RCC_OscConfig+0x4ec>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff f805 	bl	800139c <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff f801 	bl	800139c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e104      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x466>
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6353      	str	r3, [r2, #52]	; 0x34
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x4c2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x488>
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023dc:	6353      	str	r3, [r2, #52]	; 0x34
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023e8:	6353      	str	r3, [r2, #52]	; 0x34
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x4c2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x4aa>
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6353      	str	r3, [r2, #52]	; 0x34
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x4c2>
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002418:	6353      	str	r3, [r2, #52]	; 0x34
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	4a06      	ldr	r2, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x4d4>)
 8002420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002424:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d024      	beq.n	8002478 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe ffb5 	bl	800139c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002434:	e019      	b.n	800246a <HAL_RCC_OscConfig+0x506>
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	080038c4 	.word	0x080038c4
 8002440:	20000014 	.word	0x20000014
 8002444:	20000018 	.word	0x20000018
 8002448:	42470020 	.word	0x42470020
 800244c:	42470680 	.word	0x42470680
 8002450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7fe ffa2 	bl	800139c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0a3      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800246a:	4b54      	ldr	r3, [pc, #336]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ee      	beq.n	8002454 <HAL_RCC_OscConfig+0x4f0>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe ff90 	bl	800139c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe ff8c 	bl	800139c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e08d      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	4a43      	ldr	r2, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d079      	beq.n	80025b0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d056      	beq.n	8002570 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d13b      	bne.n	8002542 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x65c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe ff64 	bl	800139c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe ff60 	bl	800139c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e063      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	4319      	orrs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	430b      	orrs	r3, r1
 800250e:	492b      	ldr	r1, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x65c>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe ff3f 	bl	800139c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe ff3b 	bl	800139c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e03e      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x5be>
 8002540:	e036      	b.n	80025b0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_RCC_OscConfig+0x65c>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe ff28 	bl	800139c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff24 	bl	800139c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e027      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x5ec>
 800256e:	e01f      	b.n	80025b0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e01a      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_RCC_OscConfig+0x658>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	429a      	cmp	r2, r3
 800258e:	d10d      	bne.n	80025ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470060 	.word	0x42470060

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e11a      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b8f      	ldr	r3, [pc, #572]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d919      	bls.n	800261a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x34>
 80025ec:	4b8a      	ldr	r3, [pc, #552]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a89      	ldr	r2, [pc, #548]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b87      	ldr	r3, [pc, #540]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 0201 	bic.w	r2, r3, #1
 8002600:	4985      	ldr	r1, [pc, #532]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002608:	4b83      	ldr	r3, [pc, #524]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0f9      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	497a      	ldr	r1, [pc, #488]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 808e 	beq.w	8002762 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264e:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d121      	bne.n	800269e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0d7      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002666:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0cb      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0bf      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0b7      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	495c      	ldr	r1, [pc, #368]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fe74 	bl	800139c <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d112      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fe6c 	bl	800139c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e09b      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d1ee      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xfc>
 80026e2:	e03e      	b.n	8002762 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d112      	bne.n	8002712 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ee:	f7fe fe55 	bl	800139c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e084      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002704:	4b45      	ldr	r3, [pc, #276]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d1ee      	bne.n	80026ee <HAL_RCC_ClockConfig+0x12a>
 8002710:	e027      	b.n	8002762 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d11d      	bne.n	8002756 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fe3e 	bl	800139c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e06d      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d1ee      	bne.n	800271c <HAL_RCC_ClockConfig+0x158>
 800273e:	e010      	b.n	8002762 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe fe2c 	bl	800139c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e05b      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d219      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d105      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1be>
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0201 	bic.w	r2, r3, #1
 800278a:	4923      	ldr	r1, [pc, #140]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_ClockConfig+0x254>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e034      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4917      	ldr	r1, [pc, #92]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490f      	ldr	r1, [pc, #60]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f823 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_ClockConfig+0x258>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490b      	ldr	r1, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x264>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fd7e 	bl	8001304 <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
 800280a:	72fb      	strb	r3, [r7, #11]

  return status;
 800280c:	7afb      	ldrb	r3, [r7, #11]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00
 800281c:	40023800 	.word	0x40023800
 8002820:	080038c4 	.word	0x080038c4
 8002824:	20000014 	.word	0x20000014
 8002828:	20000018 	.word	0x20000018

0800282c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	b092      	sub	sp, #72	; 0x48
 8002832:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800283a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d00d      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x34>
 8002844:	2b0c      	cmp	r3, #12
 8002846:	f200 80d5 	bhi.w	80029f4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d002      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x28>
 800284e:	2b08      	cmp	r3, #8
 8002850:	d003      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x2e>
 8002852:	e0cf      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002858:	e0da      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800285a:	4b72      	ldr	r3, [pc, #456]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800285e:	e0d7      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	0d9b      	lsrs	r3, r3, #22
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	3301      	adds	r3, #1
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287a:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d05d      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2200      	movs	r2, #0
 800288a:	4618      	mov	r0, r3
 800288c:	4611      	mov	r1, r2
 800288e:	4604      	mov	r4, r0
 8002890:	460d      	mov	r5, r1
 8002892:	4622      	mov	r2, r4
 8002894:	462b      	mov	r3, r5
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	0159      	lsls	r1, r3, #5
 80028a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a4:	0150      	lsls	r0, r2, #5
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4621      	mov	r1, r4
 80028ac:	1a51      	subs	r1, r2, r1
 80028ae:	6139      	str	r1, [r7, #16]
 80028b0:	4629      	mov	r1, r5
 80028b2:	eb63 0301 	sbc.w	r3, r3, r1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c4:	4659      	mov	r1, fp
 80028c6:	018b      	lsls	r3, r1, #6
 80028c8:	4651      	mov	r1, sl
 80028ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ce:	4651      	mov	r1, sl
 80028d0:	018a      	lsls	r2, r1, #6
 80028d2:	46d4      	mov	ip, sl
 80028d4:	ebb2 080c 	subs.w	r8, r2, ip
 80028d8:	4659      	mov	r1, fp
 80028da:	eb63 0901 	sbc.w	r9, r3, r1
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028f2:	4690      	mov	r8, r2
 80028f4:	4699      	mov	r9, r3
 80028f6:	4623      	mov	r3, r4
 80028f8:	eb18 0303 	adds.w	r3, r8, r3
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	462b      	mov	r3, r5
 8002900:	eb49 0303 	adc.w	r3, r9, r3
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002912:	4629      	mov	r1, r5
 8002914:	024b      	lsls	r3, r1, #9
 8002916:	4620      	mov	r0, r4
 8002918:	4629      	mov	r1, r5
 800291a:	4604      	mov	r4, r0
 800291c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002920:	4601      	mov	r1, r0
 8002922:	024a      	lsls	r2, r1, #9
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	2200      	movs	r2, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
 800292e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002934:	f7fd fc22 	bl	800017c <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4613      	mov	r3, r2
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
 8002940:	e055      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2200      	movs	r2, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	627a      	str	r2, [r7, #36]	; 0x24
 800294a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002960:	0150      	lsls	r0, r2, #5
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	46c4      	mov	ip, r8
 8002968:	ebb2 0a0c 	subs.w	sl, r2, ip
 800296c:	4640      	mov	r0, r8
 800296e:	4649      	mov	r1, r9
 8002970:	468c      	mov	ip, r1
 8002972:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002982:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002986:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800298a:	ebb2 040a 	subs.w	r4, r2, sl
 800298e:	eb63 050b 	sbc.w	r5, r3, fp
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	00eb      	lsls	r3, r5, #3
 800299c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a0:	00e2      	lsls	r2, r4, #3
 80029a2:	4614      	mov	r4, r2
 80029a4:	461d      	mov	r5, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	18e3      	adds	r3, r4, r3
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	460b      	mov	r3, r1
 80029ae:	eb45 0303 	adc.w	r3, r5, r3
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c0:	4629      	mov	r1, r5
 80029c2:	028b      	lsls	r3, r1, #10
 80029c4:	4620      	mov	r0, r4
 80029c6:	4629      	mov	r1, r5
 80029c8:	4604      	mov	r4, r0
 80029ca:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80029ce:	4601      	mov	r1, r0
 80029d0:	028a      	lsls	r2, r1, #10
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	2200      	movs	r2, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	61fa      	str	r2, [r7, #28]
 80029de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e2:	f7fd fbcb 	bl	800017c <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4613      	mov	r3, r2
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80029ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80029f2:	e00d      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0b5b      	lsrs	r3, r3, #13
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	3301      	adds	r3, #1
 8002a04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3748      	adds	r7, #72	; 0x48
 8002a16:	46bd      	mov	sp, r7
 8002a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200
 8002a28:	080038b8 	.word	0x080038b8

08002a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	20000014 	.word	0x20000014

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff2 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	080038d4 	.word	0x080038d4

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffde 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0adb      	lsrs	r3, r3, #11
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	080038d4 	.word	0x080038d4

08002a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d12c      	bne.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aa8:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e016      	b.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6253      	str	r3, [r2, #36]	; 0x24
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ae0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002af4:	d105      	bne.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002afc:	d101      	bne.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002afe:	2301      	movs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0201 	bic.w	r2, r3, #1
 8002b1c:	490b      	ldr	r1, [pc, #44]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	40023c00 	.word	0x40023c00

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ed 	beq.w	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4b78      	ldr	r3, [pc, #480]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b75      	ldr	r3, [pc, #468]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	4a74      	ldr	r2, [pc, #464]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6253      	str	r3, [r2, #36]	; 0x24
 8002b8e:	4b72      	ldr	r3, [pc, #456]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b6c      	ldr	r3, [pc, #432]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6b      	ldr	r2, [pc, #428]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fbf1 	bl	800139c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe fbed 	bl	800139c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	; 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0be      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002be4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d00f      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c0e:	d108      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c10:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e095      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d041      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d02d      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d027      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c66:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c6e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c76:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002c7c:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d014      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fb86 	bl	800139c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c92:	e00a      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fb82 	bl	800139c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e051      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cce:	d10a      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002ce0:	491d      	ldr	r1, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf2:	4919      	ldr	r1, [pc, #100]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d10:	d10a      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002d22:	490d      	ldr	r1, [pc, #52]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d34:	4908      	ldr	r1, [pc, #32]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	424706dc 	.word	0x424706dc

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e031      	b.n	8002dda <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe f9d8 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f8e4 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_ConfigClockSource+0x1c>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0b4      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x186>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d03e      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0xd4>
 8002e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3c:	f200 8087 	bhi.w	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	f000 8086 	beq.w	8002f54 <HAL_TIM_ConfigClockSource+0x172>
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d87f      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	2b70      	cmp	r3, #112	; 0x70
 8002e50:	d01a      	beq.n	8002e88 <HAL_TIM_ConfigClockSource+0xa6>
 8002e52:	2b70      	cmp	r3, #112	; 0x70
 8002e54:	d87b      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e56:	2b60      	cmp	r3, #96	; 0x60
 8002e58:	d050      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x11a>
 8002e5a:	2b60      	cmp	r3, #96	; 0x60
 8002e5c:	d877      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e5e:	2b50      	cmp	r3, #80	; 0x50
 8002e60:	d03c      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xfa>
 8002e62:	2b50      	cmp	r3, #80	; 0x50
 8002e64:	d873      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d058      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x13a>
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d86f      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e6e:	2b30      	cmp	r3, #48	; 0x30
 8002e70:	d064      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x15a>
 8002e72:	2b30      	cmp	r3, #48	; 0x30
 8002e74:	d86b      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d060      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x15a>
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d867      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d05c      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x15a>
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d05a      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x15a>
 8002e86:	e062      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e98:	f000 f943 	bl	8003122 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]
      break;
 8002eb4:	e04f      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ec6:	f000 f92c 	bl	8003122 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed8:	609a      	str	r2, [r3, #8]
      break;
 8002eda:	e03c      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f000 f8a3 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2150      	movs	r1, #80	; 0x50
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f8fa 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002efa:	e02c      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f000 f8c1 	bl	8003090 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2160      	movs	r1, #96	; 0x60
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f8ea 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002f1a:	e01c      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f000 f883 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2140      	movs	r1, #64	; 0x40
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f8da 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 f8d1 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x28>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <TIM_Base_SetConfig+0xb0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x28>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a24      	ldr	r2, [pc, #144]	; (8003024 <TIM_Base_SetConfig+0xb4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d013      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <TIM_Base_SetConfig+0xb0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <TIM_Base_SetConfig+0xb4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <TIM_Base_SetConfig+0xbc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <TIM_Base_SetConfig+0xc0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	615a      	str	r2, [r3, #20]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40010800 	.word	0x40010800
 800302c:	40010c00 	.word	0x40010c00
 8003030:	40011000 	.word	0x40011000

08003034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 030a 	bic.w	r3, r3, #10
 8003070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0210 	bic.w	r2, r3, #16
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	031b      	lsls	r3, r3, #12
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	f043 0307 	orr.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800313c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	431a      	orrs	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	609a      	str	r2, [r3, #8]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003174:	2302      	movs	r3, #2
 8003176:	e046      	b.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d00e      	beq.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a10      	ldr	r2, [pc, #64]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10c      	bne.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800
 8003218:	40010800 	.word	0x40010800

0800321c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e042      	b.n	80032b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd ffae 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fa0d 	bl	8003680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d16d      	bne.n	80033b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Transmit+0x2c>
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e066      	b.n	80033ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2221      	movs	r2, #33	; 0x21
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fa:	f7fe f84f 	bl	800139c <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d108      	bne.n	8003328 <HAL_UART_Transmit+0x6c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e003      	b.n	8003330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003330:	e02a      	b.n	8003388 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8f7 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e036      	b.n	80033ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3302      	adds	r3, #2
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e007      	b.n	800337a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	3301      	adds	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1cf      	bne.n	8003332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	2140      	movs	r1, #64	; 0x40
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f8c7 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e006      	b.n	80033ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b08a      	sub	sp, #40	; 0x28
 80033c6:	af02      	add	r7, sp, #8
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d17c      	bne.n	80034dc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_Receive+0x2c>
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e075      	b.n	80034de <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2222      	movs	r2, #34	; 0x22
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003406:	f7fd ffc9 	bl	800139c <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d108      	bne.n	8003434 <HAL_UART_Receive+0x72>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e003      	b.n	800343c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800343c:	e043      	b.n	80034c6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	2120      	movs	r1, #32
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f871 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e042      	b.n	80034de <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346a:	b29a      	uxth	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	3302      	adds	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e01f      	b.n	80034b8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d007      	beq.n	8003492 <HAL_UART_Receive+0xd0>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_UART_Receive+0xde>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e008      	b.n	80034b2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1b6      	bne.n	800343e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d112      	bne.n	8003526 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Receive_IT+0x26>
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e00b      	b.n	8003528 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	461a      	mov	r2, r3
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f875 	bl	800360c <UART_Start_Receive_IT>
 8003522:	4603      	mov	r3, r0
 8003524:	e000      	b.n	8003528 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b090      	sub	sp, #64	; 0x40
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	e050      	b.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d04c      	beq.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x30>
 8003550:	f7fd ff24 	bl	800139c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800355c:	429a      	cmp	r2, r3
 800355e:	d241      	bcs.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	330c      	adds	r3, #12
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003580:	637a      	str	r2, [r7, #52]	; 0x34
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e5      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3314      	adds	r3, #20
 800359a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	613b      	str	r3, [r7, #16]
   return(result);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3314      	adds	r3, #20
 80035b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b4:	623a      	str	r2, [r7, #32]
 80035b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e5      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e00f      	b.n	8003604 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d09f      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3740      	adds	r7, #64	; 0x40
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2222      	movs	r2, #34	; 0x22
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003650:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
	...

08003680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036c0:	f023 030c 	bic.w	r3, r3, #12
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	430b      	orrs	r3, r1
 80036cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a55      	ldr	r2, [pc, #340]	; (8003840 <UART_SetConfig+0x1c0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d103      	bne.n	80036f6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036ee:	f7ff f9bb 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	e002      	b.n	80036fc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036f6:	f7ff f9a3 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 80036fa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003704:	d14c      	bne.n	80037a0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	4a49      	ldr	r2, [pc, #292]	; (8003844 <UART_SetConfig+0x1c4>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	0119      	lsls	r1, r3, #4
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <UART_SetConfig+0x1c4>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2064      	movs	r0, #100	; 0x64
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <UART_SetConfig+0x1c4>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800375e:	4419      	add	r1, r3
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009a      	lsls	r2, r3, #2
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fbb2 f2f3 	udiv	r2, r2, r3
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <UART_SetConfig+0x1c4>)
 8003778:	fba3 0302 	umull	r0, r3, r3, r2
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	2064      	movs	r0, #100	; 0x64
 8003780:	fb00 f303 	mul.w	r3, r0, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	3332      	adds	r3, #50	; 0x32
 800378a:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <UART_SetConfig+0x1c4>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	f003 0207 	and.w	r2, r3, #7
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	440a      	add	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800379e:	e04a      	b.n	8003836 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	4a23      	ldr	r2, [pc, #140]	; (8003844 <UART_SetConfig+0x1c4>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	0119      	lsls	r1, r3, #4
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <UART_SetConfig+0x1c4>)
 80037d8:	fba3 0302 	umull	r0, r3, r3, r2
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	2064      	movs	r0, #100	; 0x64
 80037e0:	fb00 f303 	mul.w	r3, r0, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	3332      	adds	r3, #50	; 0x32
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <UART_SetConfig+0x1c4>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f6:	4419      	add	r1, r3
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009a      	lsls	r2, r3, #2
 8003802:	441a      	add	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	fbb2 f2f3 	udiv	r2, r2, r3
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <UART_SetConfig+0x1c4>)
 8003810:	fba3 0302 	umull	r0, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	2064      	movs	r0, #100	; 0x64
 8003818:	fb00 f303 	mul.w	r3, r0, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	3332      	adds	r3, #50	; 0x32
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <UART_SetConfig+0x1c4>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	440a      	add	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40013800 	.word	0x40013800
 8003844:	51eb851f 	.word	0x51eb851f

08003848 <memset>:
 8003848:	4603      	mov	r3, r0
 800384a:	4402      	add	r2, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	2600      	movs	r6, #0
 800385c:	4d0c      	ldr	r5, [pc, #48]	; (8003890 <__libc_init_array+0x38>)
 800385e:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	f000 f81a 	bl	80038a0 <_init>
 800386c:	2600      	movs	r6, #0
 800386e:	4d0a      	ldr	r5, [pc, #40]	; (8003898 <__libc_init_array+0x40>)
 8003870:	4c0a      	ldr	r4, [pc, #40]	; (800389c <__libc_init_array+0x44>)
 8003872:	1b64      	subs	r4, r4, r5
 8003874:	10a4      	asrs	r4, r4, #2
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	080038e4 	.word	0x080038e4
 8003894:	080038e4 	.word	0x080038e4
 8003898:	080038e4 	.word	0x080038e4
 800389c:	080038e8 	.word	0x080038e8

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
