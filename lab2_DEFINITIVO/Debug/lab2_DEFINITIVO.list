
lab2_DEFINITIVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e38  08002e38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002e4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002e4c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008dfe  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a88  00000000  00000000  00028e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0002a900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000789  00000000  00000000  0002b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001412c  00000000  00000000  0002ba81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b072  00000000  00000000  0003fbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000807ee  00000000  00000000  0004ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000289c  00000000  00000000  000cb410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000cdcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002dfc 	.word	0x08002dfc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002dfc 	.word	0x08002dfc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <stopWheels>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void stopWheels(void) {
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    // Stop both motors
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9) << 16;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <stopWheels+0x14>)
 8000482:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
 8000486:	619a      	str	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40020800 	.word	0x40020800

08000494 <moveForward>:
void moveForward(void) {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
    // Move both motors forward
    GPIOC->BSRR = GPIO_PIN_6 | GPIO_PIN_8;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <moveForward+0x1c>)
 800049a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800049e:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = (GPIO_PIN_7 | GPIO_PIN_9) << 16;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <moveForward+0x1c>)
 80004a2:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 80004a6:	619a      	str	r2, [r3, #24]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40020800 	.word	0x40020800

080004b4 <rightWheel>:

void rightWheel(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    // Turn right by moving right motor forward and left motor backward
	GPIOC->BSRR = GPIO_PIN_9;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <rightWheel+0x1c>)
 80004ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004be:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = GPIO_PIN_6 | GPIO_PIN_8;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <rightWheel+0x1c>)
 80004c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004c6:	619a      	str	r2, [r3, #24]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40020800 	.word	0x40020800

080004d4 <leftWheel>:

void leftWheel(void) {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    // Turn left by moving left motor forward and right motor backward
	GPIOC->BSRR = GPIO_PIN_7;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <leftWheel+0x1c>)
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = GPIO_PIN_6 | GPIO_PIN_8;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <leftWheel+0x1c>)
 80004e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004e4:	619a      	str	r2, [r3, #24]

}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40020800 	.word	0x40020800

080004f4 <EXTI1_IRQHandler>:
void moveBackward(void) {
    // Move both motors backward
    GPIOC->BSRR = GPIO_PIN_7 | GPIO_PIN_9;
    GPIOC->BSRR = (GPIO_PIN_6 | GPIO_PIN_8) << 16;
}
void EXTI1_IRQHandler(void){  //for the right sensor
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	if(EXTI -> PR == (1<<1)){
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <EXTI1_IRQHandler+0x28>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d108      	bne.n	8000512 <EXTI1_IRQHandler+0x1e>
		SENSOR_1 = 1;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <EXTI1_IRQHandler+0x2c>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= (1<<1); // clean the flags with a 1
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <EXTI1_IRQHandler+0x28>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a04      	ldr	r2, [pc, #16]	; (800051c <EXTI1_IRQHandler+0x28>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	6153      	str	r3, [r2, #20]
	}

}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40010400 	.word	0x40010400
 8000520:	200000f8 	.word	0x200000f8

08000524 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){  //for the left sensor
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	if(EXTI -> PR == (1<<2)){
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <EXTI2_IRQHandler+0x28>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	2b04      	cmp	r3, #4
 800052e:	d108      	bne.n	8000542 <EXTI2_IRQHandler+0x1e>
		SENSOR_2 = 1;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <EXTI2_IRQHandler+0x2c>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
			EXTI -> PR |= (1<<2); //clean the flags with a 1
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <EXTI2_IRQHandler+0x28>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <EXTI2_IRQHandler+0x28>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6153      	str	r3, [r2, #20]
		}

}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40010400 	.word	0x40010400
 8000550:	200000f9 	.word	0x200000f9

08000554 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	if((TIM4->SR & (1<<1))!=0){
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <TIM4_IRQHandler+0x44>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	2b00      	cmp	r3, #0
 8000562:	d015      	beq.n	8000590 <TIM4_IRQHandler+0x3c>
	if(state == 0){
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <TIM4_IRQHandler+0x48>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <TIM4_IRQHandler+0x20>
		state = 1;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <TIM4_IRQHandler+0x48>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	e002      	b.n	800057a <TIM4_IRQHandler+0x26>
	}
	else{
		state = 0;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <TIM4_IRQHandler+0x48>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	}

	TIM4->CCR1 += 250;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <TIM4_IRQHandler+0x44>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <TIM4_IRQHandler+0x44>)
 8000580:	33fa      	adds	r3, #250	; 0xfa
 8000582:	6353      	str	r3, [r2, #52]	; 0x34

	TIM4->SR &= ~(1<<1);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <TIM4_IRQHandler+0x44>)
 8000586:	691b      	ldr	r3, [r3, #16]
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <TIM4_IRQHandler+0x44>)
 800058a:	f023 0302 	bic.w	r3, r3, #2
 800058e:	6113      	str	r3, [r2, #16]
}
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40000800 	.word	0x40000800
 800059c:	200000fa 	.word	0x200000fa

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fc73 	bl	8000e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f942 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fa8a 	bl	8000ac4 <MX_GPIO_Init>
  MX_ADC_Init();
 80005b0:	f000 f9a6 	bl	8000900 <MX_ADC_Init>
  MX_LCD_Init();
 80005b4:	f000 f9fe 	bl	80009b4 <MX_LCD_Init>
  MX_TS_Init();
 80005b8:	f000 fa7e 	bl	8000ab8 <MX_TS_Init>
  MX_TIM4_Init();
 80005bc:	f000 fa2e 	bl	8000a1c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // PC6, PC7, PC8, and PC9 as digital outputs (01)
    GPIOC->MODER &= ~(1 << (6*2+1));
 80005c0:	4b92      	ldr	r3, [pc, #584]	; (800080c <main+0x26c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a91      	ldr	r2, [pc, #580]	; (800080c <main+0x26c>)
 80005c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80005ca:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (6*2));
 80005cc:	4b8f      	ldr	r3, [pc, #572]	; (800080c <main+0x26c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a8e      	ldr	r2, [pc, #568]	; (800080c <main+0x26c>)
 80005d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d6:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (7*2+1));
 80005d8:	4b8c      	ldr	r3, [pc, #560]	; (800080c <main+0x26c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a8b      	ldr	r2, [pc, #556]	; (800080c <main+0x26c>)
 80005de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005e2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (7*2));
 80005e4:	4b89      	ldr	r3, [pc, #548]	; (800080c <main+0x26c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a88      	ldr	r2, [pc, #544]	; (800080c <main+0x26c>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (8*2+1));
 80005f0:	4b86      	ldr	r3, [pc, #536]	; (800080c <main+0x26c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a85      	ldr	r2, [pc, #532]	; (800080c <main+0x26c>)
 80005f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005fa:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (8*2));
 80005fc:	4b83      	ldr	r3, [pc, #524]	; (800080c <main+0x26c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a82      	ldr	r2, [pc, #520]	; (800080c <main+0x26c>)
 8000602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000606:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (9*2+1));
 8000608:	4b80      	ldr	r3, [pc, #512]	; (800080c <main+0x26c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a7f      	ldr	r2, [pc, #508]	; (800080c <main+0x26c>)
 800060e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000612:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (9*2));
 8000614:	4b7d      	ldr	r3, [pc, #500]	; (800080c <main+0x26c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a7c      	ldr	r2, [pc, #496]	; (800080c <main+0x26c>)
 800061a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800061e:	6013      	str	r3, [r2, #0]

    // PC1 & PC2 as digital input (00)
    GPIOC->MODER &= ~(1 << (1*2+1));
 8000620:	4b7a      	ldr	r3, [pc, #488]	; (800080c <main+0x26c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a79      	ldr	r2, [pc, #484]	; (800080c <main+0x26c>)
 8000626:	f023 0308 	bic.w	r3, r3, #8
 800062a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (1*2));
 800062c:	4b77      	ldr	r3, [pc, #476]	; (800080c <main+0x26c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a76      	ldr	r2, [pc, #472]	; (800080c <main+0x26c>)
 8000632:	f023 0304 	bic.w	r3, r3, #4
 8000636:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(1 << (2*2+1));
 8000638:	4b74      	ldr	r3, [pc, #464]	; (800080c <main+0x26c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a73      	ldr	r2, [pc, #460]	; (800080c <main+0x26c>)
 800063e:	f023 0320 	bic.w	r3, r3, #32
 8000642:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (2*2));
 8000644:	4b71      	ldr	r3, [pc, #452]	; (800080c <main+0x26c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a70      	ldr	r2, [pc, #448]	; (800080c <main+0x26c>)
 800064a:	f023 0310 	bic.w	r3, r3, #16
 800064e:	6013      	str	r3, [r2, #0]

    //Configure the EXTI1
    //Hacemos la interrupcion del primer infrarrojo
    SYSCFG -> EXTICR[0] = 0;
 8000650:	4b6f      	ldr	r3, [pc, #444]	; (8000810 <main+0x270>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    EXTI -> IMR |= (1<<1);
 8000656:	4b6f      	ldr	r3, [pc, #444]	; (8000814 <main+0x274>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a6e      	ldr	r2, [pc, #440]	; (8000814 <main+0x274>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6013      	str	r3, [r2, #0]
    EXTI -> RTSR |= (1<<1);
 8000662:	4b6c      	ldr	r3, [pc, #432]	; (8000814 <main+0x274>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4a6b      	ldr	r2, [pc, #428]	; (8000814 <main+0x274>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6093      	str	r3, [r2, #8]
    EXTI -> FTSR |= (1<<1);
 800066e:	4b69      	ldr	r3, [pc, #420]	; (8000814 <main+0x274>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	4a68      	ldr	r2, [pc, #416]	; (8000814 <main+0x274>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0] |= (1 << 7);  //EXTI1 posicion 7
 800067a:	4b67      	ldr	r3, [pc, #412]	; (8000818 <main+0x278>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a66      	ldr	r2, [pc, #408]	; (8000818 <main+0x278>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6013      	str	r3, [r2, #0]


     //Configure the EXTI2
    SYSCFG -> EXTICR[0] = 0;
 8000686:	4b62      	ldr	r3, [pc, #392]	; (8000810 <main+0x270>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
    EXTI -> IMR |= (1<<2);
 800068c:	4b61      	ldr	r3, [pc, #388]	; (8000814 <main+0x274>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a60      	ldr	r2, [pc, #384]	; (8000814 <main+0x274>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6013      	str	r3, [r2, #0]
    EXTI -> RTSR |= (1<<2);
 8000698:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <main+0x274>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a5d      	ldr	r2, [pc, #372]	; (8000814 <main+0x274>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6093      	str	r3, [r2, #8]
    EXTI -> FTSR |= (1<<2);
 80006a4:	4b5b      	ldr	r3, [pc, #364]	; (8000814 <main+0x274>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a5a      	ldr	r2, [pc, #360]	; (8000814 <main+0x274>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[0] |= (1 << 8); //EXTI2 posicion 8
 80006b0:	4b59      	ldr	r3, [pc, #356]	; (8000818 <main+0x278>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a58      	ldr	r2, [pc, #352]	; (8000818 <main+0x278>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6013      	str	r3, [r2, #0]


     //Configure buzzer
     GPIOB->MODER &= ~(1 << (8 * 2));
 80006bc:	4b57      	ldr	r3, [pc, #348]	; (800081c <main+0x27c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a56      	ldr	r2, [pc, #344]	; (800081c <main+0x27c>)
 80006c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006c6:	6013      	str	r3, [r2, #0]
     GPIOB->MODER |= (1 << (8 * 2+1));
 80006c8:	4b54      	ldr	r3, [pc, #336]	; (800081c <main+0x27c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a53      	ldr	r2, [pc, #332]	; (800081c <main+0x27c>)
 80006ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d2:	6013      	str	r3, [r2, #0]
     //TIMERS
     TIM4->CR1 = 0;
 80006d4:	4b52      	ldr	r3, [pc, #328]	; (8000820 <main+0x280>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
     TIM4->CR2 = 0;
 80006da:	4b51      	ldr	r3, [pc, #324]	; (8000820 <main+0x280>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
     TIM4->SMCR = 0;
 80006e0:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <main+0x280>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]

     TIM4->CNT = 0;
 80006e6:	4b4e      	ldr	r3, [pc, #312]	; (8000820 <main+0x280>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
     TIM4->PSC = 31999;
 80006ec:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <main+0x280>)
 80006ee:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
     TIM4->ARR = 0xFFFF;
 80006f4:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <main+0x280>)
 80006f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
     TIM4->CCR1 = 250;
 80006fc:	4b48      	ldr	r3, [pc, #288]	; (8000820 <main+0x280>)
 80006fe:	22fa      	movs	r2, #250	; 0xfa
 8000700:	635a      	str	r2, [r3, #52]	; 0x34

     TIM4->CCMR1 = 0;
 8000702:	4b47      	ldr	r3, [pc, #284]	; (8000820 <main+0x280>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
     TIM4->CCMR2 = 0;
 8000708:	4b45      	ldr	r3, [pc, #276]	; (8000820 <main+0x280>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
     TIM4->CCER = 0;
 800070e:	4b44      	ldr	r3, [pc, #272]	; (8000820 <main+0x280>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

     TIM4->DIER = (1<<1);
 8000714:	4b42      	ldr	r3, [pc, #264]	; (8000820 <main+0x280>)
 8000716:	2202      	movs	r2, #2
 8000718:	60da      	str	r2, [r3, #12]

     TIM4->EGR |= 0x0001;
 800071a:	4b41      	ldr	r3, [pc, #260]	; (8000820 <main+0x280>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a40      	ldr	r2, [pc, #256]	; (8000820 <main+0x280>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6153      	str	r3, [r2, #20]
     TIM4->SR = 0;
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <main+0x280>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
     TIM4->CR1 |= 0x0001;
 800072c:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <main+0x280>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <main+0x280>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

     NVIC->ISER[0] |= (1 << 30);
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <main+0x278>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a36      	ldr	r2, [pc, #216]	; (8000818 <main+0x278>)
 800073e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000742:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(((GPIOC->IDR&(1<<1))!=0) && ((GPIOC->IDR&(1<<2))!=0)){
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <main+0x26c>)
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00c      	beq.n	800076a <main+0x1ca>
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <main+0x26c>)
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <main+0x1ca>
	  	stopWheels();
 800075c:	f7ff fe8e 	bl	800047c <stopWheels>
	  	GPIOB->MODER = (1<<(8*2));
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <main+0x27c>)
 8000762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e049      	b.n	80007fe <main+0x25e>
	  	  }
	  	  else if(((GPIOC->IDR&(1<<1))!=0) && ((GPIOC->IDR&(1<<2))==0)){
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <main+0x26c>)
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	2b00      	cmp	r3, #0
 8000774:	d015      	beq.n	80007a2 <main+0x202>
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <main+0x26c>)
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10f      	bne.n	80007a2 <main+0x202>
	  		  rightWheel();
 8000782:	f7ff fe97 	bl	80004b4 <rightWheel>
	  		 if(state == 1){
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <main+0x284>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d104      	bne.n	8000798 <main+0x1f8>
	  			GPIOB->MODER = (1<<(8*2));
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <main+0x27c>)
 8000790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000794:	601a      	str	r2, [r3, #0]
	  		 if(state == 1){
 8000796:	e032      	b.n	80007fe <main+0x25e>
	  					 	  }
	  					 	  else{
	  					 		GPIOB->MODER = ~(1<<(8*2));
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <main+0x27c>)
 800079a:	f46f 3280 	mvn.w	r2, #65536	; 0x10000
 800079e:	601a      	str	r2, [r3, #0]
	  		 if(state == 1){
 80007a0:	e02d      	b.n	80007fe <main+0x25e>
	  					 	  }

	  	  }
	  	  else if(((GPIOC->IDR&(1<<1))==0) && ((GPIOC->IDR&(1<<2))!=0)){
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <main+0x26c>)
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d115      	bne.n	80007da <main+0x23a>
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <main+0x26c>)
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00f      	beq.n	80007da <main+0x23a>
	  		  leftWheel();
 80007ba:	f7ff fe8b 	bl	80004d4 <leftWheel>
	  		 if(state == 1){
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <main+0x284>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d104      	bne.n	80007d0 <main+0x230>
	  			GPIOB->MODER = (1<<(8*2));
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <main+0x27c>)
 80007c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007cc:	601a      	str	r2, [r3, #0]
	  		 if(state == 1){
 80007ce:	e016      	b.n	80007fe <main+0x25e>
	  					 	  }
	  					 	  else{
	  					 		GPIOB->MODER = ~(1<<(8*2));
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <main+0x27c>)
 80007d2:	f46f 3280 	mvn.w	r2, #65536	; 0x10000
 80007d6:	601a      	str	r2, [r3, #0]
	  		 if(state == 1){
 80007d8:	e011      	b.n	80007fe <main+0x25e>
	  					 	  }
	  	  }
	  	  else if(((GPIOC->IDR&(1<<1))==0) && ((GPIOC->IDR&(1<<2))==0)){
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <main+0x26c>)
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10b      	bne.n	80007fe <main+0x25e>
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <main+0x26c>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d105      	bne.n	80007fe <main+0x25e>
	  		  moveForward();
 80007f2:	f7ff fe4f 	bl	8000494 <moveForward>
	  		GPIOB->MODER = ~(1<<(8*2));
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <main+0x27c>)
 80007f8:	f46f 3280 	mvn.w	r2, #65536	; 0x10000
 80007fc:	601a      	str	r2, [r3, #0]
	  	  }
	  SENSOR_1=0;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <main+0x288>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	  SENSOR_2=0;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <main+0x28c>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
	  if(((GPIOC->IDR&(1<<1))!=0) && ((GPIOC->IDR&(1<<2))!=0)){
 800080a:	e79b      	b.n	8000744 <main+0x1a4>
 800080c:	40020800 	.word	0x40020800
 8000810:	40010000 	.word	0x40010000
 8000814:	40010400 	.word	0x40010400
 8000818:	e000e100 	.word	0xe000e100
 800081c:	40020400 	.word	0x40020400
 8000820:	40000800 	.word	0x40000800
 8000824:	200000fa 	.word	0x200000fa
 8000828:	200000f8 	.word	0x200000f8
 800082c:	200000f9 	.word	0x200000f9

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b096      	sub	sp, #88	; 0x58
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2234      	movs	r2, #52	; 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fab0 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <SystemClock_Config+0xcc>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <SystemClock_Config+0xcc>)
 8000868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800086c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800086e:	2306      	movs	r3, #6
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000872:	2301      	movs	r3, #1
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000876:	2301      	movs	r3, #1
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	2310      	movs	r3, #16
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000882:	2300      	movs	r3, #0
 8000884:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000886:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800088c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000890:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f95a 	bl	8001b50 <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80008a2:	f000 f98b 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2303      	movs	r3, #3
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fc75 	bl	80021b0 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008cc:	f000 f976 	bl	8000bbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LCD;
 80008d0:	2303      	movs	r3, #3
 80008d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008de:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fef8 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ee:	f000 f965 	bl	8000bbc <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3758      	adds	r7, #88	; 0x58
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_ADC_Init+0xac>)
 8000912:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <MX_ADC_Init+0xb0>)
 8000914:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <MX_ADC_Init+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_ADC_Init+0xac>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_ADC_Init+0xac>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_ADC_Init+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_ADC_Init+0xac>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_ADC_Init+0xac>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_ADC_Init+0xac>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_ADC_Init+0xac>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_ADC_Init+0xac>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_ADC_Init+0xac>)
 8000950:	2201      	movs	r2, #1
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_ADC_Init+0xac>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_ADC_Init+0xac>)
 800095e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_ADC_Init+0xac>)
 8000966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_ADC_Init+0xac>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_ADC_Init+0xac>)
 8000976:	f000 faf9 	bl	8000f6c <HAL_ADC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000980:	f000 f91c 	bl	8000bbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000984:	2304      	movs	r3, #4
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_ADC_Init+0xac>)
 8000996:	f000 fc2f 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80009a0:	f000 f90c 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000028 	.word	0x20000028
 80009b0:	40012400 	.word	0x40012400

080009b4 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_LCD_Init+0x60>)
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <MX_LCD_Init+0x64>)
 80009bc:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_LCD_Init+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_LCD_Init+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_LCD_Init+0x60>)
 80009cc:	220c      	movs	r2, #12
 80009ce:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_LCD_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_LCD_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_LCD_Init+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_LCD_Init+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_LCD_Init+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_LCD_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_LCD_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_LCD_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_LCD_Init+0x60>)
 8000a02:	f000 ffc5 	bl	8001990 <HAL_LCD_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f8d6 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000007c 	.word	0x2000007c
 8000a18:	40002400 	.word	0x40002400

08000a1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <MX_TIM4_Init+0x98>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a5e:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a60:	f001 ff44 	bl	80028ec <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f8a7 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a7c:	f001 ff75 	bl	800296a <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 f899 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a98:	f002 f926 	bl	8002ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000aa2:	f000 f88b 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000b8 	.word	0x200000b8
 8000ab4:	40000800 	.word	0x40000800

08000ab8 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a33      	ldr	r2, [pc, #204]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b31      	ldr	r3, [pc, #196]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a27      	ldr	r2, [pc, #156]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MX_GPIO_Init+0xe8>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000b28:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <MX_GPIO_Init+0xec>)
 8000b2a:	f000 ff19 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	21c0      	movs	r1, #192	; 0xc0
 8000b32:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <MX_GPIO_Init+0xf0>)
 8000b34:	f000 ff14 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <MX_GPIO_Init+0xec>)
 8000b4c:	f000 fd88 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4619      	mov	r1, r3
 8000b64:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <MX_GPIO_Init+0xf4>)
 8000b66:	f000 fd7b 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <MX_GPIO_Init+0xec>)
 8000b84:	f000 fd6c 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000b88:	23c0      	movs	r3, #192	; 0xc0
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_GPIO_Init+0xf0>)
 8000ba0:	f000 fd5e 	bl	8001660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40020000 	.word	0x40020000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd8:	6253      	str	r3, [r2, #36]	; 0x24
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x5c>)
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6213      	str	r3, [r2, #32]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x5c>)
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x5c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6253      	str	r3, [r2, #36]	; 0x24
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x5c>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f000 fcee 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <HAL_ADC_MspInit+0x74>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d123      	bne.n	8000c92 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c54:	6213      	str	r3, [r2, #32]
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_ADC_MspInit+0x78>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_ADC_MspInit+0x7c>)
 8000c8e:	f000 fce7 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40012400 	.word	0x40012400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a34      	ldr	r2, [pc, #208]	; (8000d98 <HAL_LCD_MspInit+0xf0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d162      	bne.n	8000d90 <HAL_LCD_MspInit+0xe8>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd4:	6253      	str	r3, [r2, #36]	; 0x24
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_LCD_MspInit+0xf4>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB8     ------> LCD_SEG16
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin
 8000d2a:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8000d2e:	61fb      	str	r3, [r7, #28]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin
                          |SEG22_Pin|SEG23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4816      	ldr	r0, [pc, #88]	; (8000da0 <HAL_LCD_MspInit+0xf8>)
 8000d48:	f000 fc8a 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 8000d4c:	f248 730e 	movw	r3, #34574	; 0x870e
 8000d50:	61fb      	str	r3, [r7, #28]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	480e      	ldr	r0, [pc, #56]	; (8000da4 <HAL_LCD_MspInit+0xfc>)
 8000d6a:	f000 fc79 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 8000d6e:	f64f 7338 	movw	r3, #65336	; 0xff38
 8000d72:	61fb      	str	r3, [r7, #28]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000d80:	230b      	movs	r3, #11
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <HAL_LCD_MspInit+0x100>)
 8000d8c:	f000 fc68 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	; 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40002400 	.word	0x40002400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_TIM_Base_MspInit+0x34>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10b      	bne.n	8000dd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x38>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_TIM_Base_MspInit+0x38>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6253      	str	r3, [r2, #36]	; 0x24
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_TIM_Base_MspInit+0x38>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	40000800 	.word	0x40000800
 8000de4:	40023800 	.word	0x40023800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 f881 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff fff7 	bl	8000e36 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4a:	490c      	ldr	r1, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e60:	4c09      	ldr	r4, [pc, #36]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f001 ffa1 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e72:	f7ff fb95 	bl	80005a0 <main>
  bx lr
 8000e76:	4770      	bx	lr
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e80:	08002e40 	.word	0x08002e40
  ldr r2, =_sbss
 8000e84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e88:	20000100 	.word	0x20000100

08000e8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_IRQHandler>

08000e8e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 fbad 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f80e 	bl	8000ec0 <HAL_InitTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	e001      	b.n	8000eb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb0:	f7ff fe8a 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_InitTick+0x68>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d022      	beq.n	8000f1a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_InitTick+0x6c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_InitTick+0x68>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fbac 	bl	8001646 <HAL_SYSTICK_Config>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10f      	bne.n	8000f14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b0f      	cmp	r3, #15
 8000ef8:	d809      	bhi.n	8000f0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	2200      	movs	r2, #0
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	f000 fb84 	bl	800160e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_InitTick+0x70>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e007      	b.n	8000f1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e004      	b.n	8000f1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x1c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_IncTick+0x1c>)
 8000f44:	6013      	str	r3, [r2, #0]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000fc 	.word	0x200000fc
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <HAL_GetTick+0x10>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	200000fc 	.word	0x200000fc

08000f6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e127      	b.n	80011dc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d115      	bne.n	8000fc6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa8:	4b8e      	ldr	r3, [pc, #568]	; (80011e4 <HAL_ADC_Init+0x278>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4a8d      	ldr	r2, [pc, #564]	; (80011e4 <HAL_ADC_Init+0x278>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6213      	str	r3, [r2, #32]
 8000fb4:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <HAL_ADC_Init+0x278>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fe31 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 80ff 	bne.w	80011d2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fdc:	f023 0302 	bic.w	r3, r3, #2
 8000fe0:	f043 0202 	orr.w	r2, r3, #2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000fe8:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <HAL_ADC_Init+0x27c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	497c      	ldr	r1, [pc, #496]	; (80011e8 <HAL_ADC_Init+0x27c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001002:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100a:	4619      	mov	r1, r3
 800100c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001010:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001026:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800102c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800104e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001052:	4313      	orrs	r3, r2
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105a:	2b10      	cmp	r3, #16
 800105c:	d007      	beq.n	800106e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001066:	4313      	orrs	r3, r2
 8001068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106a:	4313      	orrs	r3, r2
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001078:	2b40      	cmp	r3, #64	; 0x40
 800107a:	d04f      	beq.n	800111c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	4313      	orrs	r3, r2
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800108e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6912      	ldr	r2, [r2, #16]
 8001094:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001098:	d003      	beq.n	80010a2 <HAL_ADC_Init+0x136>
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6912      	ldr	r2, [r2, #16]
 800109e:	2a01      	cmp	r2, #1
 80010a0:	d102      	bne.n	80010a8 <HAL_ADC_Init+0x13c>
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	e000      	b.n	80010aa <HAL_ADC_Init+0x13e>
 80010a8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80010aa:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ae:	4313      	orrs	r3, r2
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d125      	bne.n	8001108 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d114      	bne.n	80010f0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80010d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	fa92 f2a2 	rbit	r2, r2
 80010d8:	617a      	str	r2, [r7, #20]
  return result;
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	fab2 f282 	clz	r2, r2
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ea:	4313      	orrs	r3, r2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
 80010ee:	e00b      	b.n	8001108 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f043 0220 	orr.w	r2, r3, #32
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001100:	f043 0201 	orr.w	r2, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_ADC_Init+0x280>)
 8001110:	4013      	ands	r3, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001118:	430b      	orrs	r3, r1
 800111a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_ADC_Init+0x284>)
 8001124:	4013      	ands	r3, r2
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800112c:	430b      	orrs	r3, r1
 800112e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001138:	d003      	beq.n	8001142 <HAL_ADC_Init+0x1d6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d119      	bne.n	8001176 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	3b01      	subs	r3, #1
 8001152:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001156:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	fa92 f2a2 	rbit	r2, r2
 800115e:	60fa      	str	r2, [r7, #12]
  return result;
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	fab2 f282 	clz	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	fa03 f202 	lsl.w	r2, r3, r2
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
 8001174:	e007      	b.n	8001186 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_ADC_Init+0x288>)
 800118e:	4013      	ands	r3, r2
 8001190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001192:	429a      	cmp	r2, r3
 8001194:	d10b      	bne.n	80011ae <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	f023 0303 	bic.w	r3, r3, #3
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ac:	e014      	b.n	80011d8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f023 0312 	bic.w	r3, r3, #18
 80011b6:	f043 0210 	orr.w	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011d0:	e002      	b.n	80011d8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40012700 	.word	0x40012700
 80011ec:	fcfc16ff 	.word	0xfcfc16ff
 80011f0:	c0fff18d 	.word	0xc0fff18d
 80011f4:	bf80fffe 	.word	0xbf80fffe

080011f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x20>
 8001214:	2302      	movs	r3, #2
 8001216:	e134      	b.n	8001482 <HAL_ADC_ConfigChannel+0x28a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b06      	cmp	r3, #6
 8001226:	d81c      	bhi.n	8001262 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	221f      	movs	r2, #31
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	4019      	ands	r1, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b05      	subs	r3, #5
 8001254:	fa00 f203 	lsl.w	r2, r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
 8001260:	e07e      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d81c      	bhi.n	80012a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b23      	subs	r3, #35	; 0x23
 800127c:	221f      	movs	r2, #31
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4019      	ands	r1, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b23      	subs	r3, #35	; 0x23
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80012a2:	e05d      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d81c      	bhi.n	80012e6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	3b41      	subs	r3, #65	; 0x41
 80012be:	221f      	movs	r2, #31
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4019      	ands	r1, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b41      	subs	r3, #65	; 0x41
 80012d8:	fa00 f203 	lsl.w	r2, r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
 80012e4:	e03c      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b18      	cmp	r3, #24
 80012ec:	d81c      	bhi.n	8001328 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b5f      	subs	r3, #95	; 0x5f
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	4019      	ands	r1, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3b5f      	subs	r3, #95	; 0x5f
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
 8001326:	e01b      	b.n	8001360 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b7d      	subs	r3, #125	; 0x7d
 800133a:	221f      	movs	r2, #31
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	4019      	ands	r1, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b7d      	subs	r3, #125	; 0x7d
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d81a      	bhi.n	800139e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6959      	ldr	r1, [r3, #20]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	2207      	movs	r2, #7
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	4019      	ands	r1, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	fa00 f203 	lsl.w	r2, r0, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	e042      	b.n	8001424 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b13      	cmp	r3, #19
 80013a4:	d81c      	bhi.n	80013e0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6919      	ldr	r1, [r3, #16]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	3b1e      	subs	r3, #30
 80013b8:	2207      	movs	r2, #7
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	4019      	ands	r1, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6898      	ldr	r0, [r3, #8]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	3b1e      	subs	r3, #30
 80013d2:	fa00 f203 	lsl.w	r2, r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	e021      	b.n	8001424 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b1a      	cmp	r3, #26
 80013e6:	d81c      	bhi.n	8001422 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68d9      	ldr	r1, [r3, #12]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b3c      	subs	r3, #60	; 0x3c
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	3b3c      	subs	r3, #60	; 0x3c
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	e000      	b.n	8001424 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001422:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b10      	cmp	r3, #16
 800142a:	d003      	beq.n	8001434 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001430:	2b11      	cmp	r3, #17
 8001432:	d121      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_ADC_ConfigChannel+0x294>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d11b      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_ADC_ConfigChannel+0x294>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_ADC_ConfigChannel+0x294>)
 8001446:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b10      	cmp	r3, #16
 8001452:	d111      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_ADC_ConfigChannel+0x298>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_ADC_ConfigChannel+0x29c>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9a      	lsrs	r2, r3, #18
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800146a:	e002      	b.n	8001472 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3b01      	subs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f9      	bne.n	800146c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40012700 	.word	0x40012700
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff49 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb0 	bl	80015b4 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001676:	e154      	b.n	8001922 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8146 	beq.w	800191c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d005      	beq.n	80016a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d130      	bne.n	800170a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80016de:	2201      	movs	r2, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f003 0201 	and.w	r2, r3, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b03      	cmp	r3, #3
 8001714:	d017      	beq.n	8001746 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d123      	bne.n	800179a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0203 	and.w	r2, r3, #3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a0 	beq.w	800191c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017dc:	4b58      	ldr	r3, [pc, #352]	; (8001940 <HAL_GPIO_Init+0x2e0>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_GPIO_Init+0x2e0>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_GPIO_Init+0x2e0>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80017f4:	4a53      	ldr	r2, [pc, #332]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d019      	beq.n	8001854 <HAL_GPIO_Init+0x1f4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4a      	ldr	r2, [pc, #296]	; (800194c <HAL_GPIO_Init+0x2ec>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x1f0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a49      	ldr	r2, [pc, #292]	; (8001950 <HAL_GPIO_Init+0x2f0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a48      	ldr	r2, [pc, #288]	; (8001954 <HAL_GPIO_Init+0x2f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a47      	ldr	r2, [pc, #284]	; (8001958 <HAL_GPIO_Init+0x2f8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1e4>
 8001840:	2304      	movs	r3, #4
 8001842:	e008      	b.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001844:	2305      	movs	r3, #5
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001848:	2303      	movs	r3, #3
 800184a:	e004      	b.n	8001856 <HAL_GPIO_Init+0x1f6>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001854:	2300      	movs	r3, #0
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001866:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_GPIO_Init+0x2fc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001898:	4a30      	ldr	r2, [pc, #192]	; (800195c <HAL_GPIO_Init+0x2fc>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_GPIO_Init+0x2fc>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018c2:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_GPIO_Init+0x2fc>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_GPIO_Init+0x2fc>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <HAL_GPIO_Init+0x2fc>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_GPIO_Init+0x2fc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_GPIO_Init+0x2fc>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f aea3 	bne.w	8001678 <HAL_GPIO_Init+0x18>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40010000 	.word	0x40010000
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0a8      	b.n	8001afc <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff f972 	bl	8000ca8 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e00a      	b.n	80019f8 <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	3304      	adds	r3, #4
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	d9f1      	bls.n	80019e2 <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0204 	orr.w	r2, r2, #4
 8001a0c:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_LCD_Init+0x174>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6851      	ldr	r1, [r2, #4]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6892      	ldr	r2, [r2, #8]
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a26:	4311      	orrs	r1, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	69d2      	ldr	r2, [r2, #28]
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6a12      	ldr	r2, [r2, #32]
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6992      	ldr	r2, [r2, #24]
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	6053      	str	r3, [r2, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f85a 	bl	8001b08 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001a8c:	f7ff fa64 	bl	8000f58 <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001a92:	e00c      	b.n	8001aae <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001a94:	f7ff fa60 	bl	8000f58 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	d904      	bls.n	8001aae <HAL_LCD_Init+0x11e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e026      	b.n	8001afc <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d1eb      	bne.n	8001a94 <HAL_LCD_Init+0x104>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001abc:	f7ff fa4c 	bl	8000f58 <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001ac2:	e00c      	b.n	8001ade <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001ac4:	f7ff fa48 	bl	8000f58 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad2:	d904      	bls.n	8001ade <HAL_LCD_Init+0x14e>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e00e      	b.n	8001afc <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_LCD_Init+0x134>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	fc00000f 	.word	0xfc00000f

08001b08 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8001b14:	f7ff fa20 	bl	8000f58 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001b1a:	e00c      	b.n	8001b36 <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001b1c:	f7ff fa1c 	bl	8000f58 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b2a:	d904      	bls.n	8001b36 <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e007      	b.n	8001b46 <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d1eb      	bne.n	8001b1c <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e31d      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b62:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d07b      	beq.n	8001c7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d006      	beq.n	8001b96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d10f      	bne.n	8001bae <HAL_RCC_OscConfig+0x5e>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d10b      	bne.n	8001bae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b96:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06a      	beq.n	8001c78 <HAL_RCC_OscConfig+0x128>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d166      	bne.n	8001c78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e2f7      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x74>
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7e      	ldr	r2, [pc, #504]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e02d      	b.n	8001c20 <HAL_RCC_OscConfig+0xd0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x96>
 8001bcc:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0xd0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xb8>
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a70      	ldr	r2, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6d      	ldr	r2, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xd0>
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a66      	ldr	r2, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff f996 	bl	8000f58 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f992 	bl	8000f58 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e2ad      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c42:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f982 	bl	8000f58 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f97e 	bl	8000f58 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e299      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c6a:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x108>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d05a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d119      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x176>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d116      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x160>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e276      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	493d      	ldr	r1, [pc, #244]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc4:	e03a      	b.n	8001d3c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d020      	beq.n	8001d10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <HAL_RCC_OscConfig+0x268>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f940 	bl	8000f58 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f93c 	bl	8000f58 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e257      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	492a      	ldr	r1, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_RCC_OscConfig+0x268>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f91f 	bl	8000f58 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f91b 	bl	8000f58 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e236      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80b8 	beq.w	8001eba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d170      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x218>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e21a      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d921      	bls.n	8001dbc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fc4b 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e208      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	4901      	ldr	r1, [pc, #4]	; (8001db4 <HAL_RCC_OscConfig+0x264>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
 8001db2:	e020      	b.n	8001df6 <HAL_RCC_OscConfig+0x2a6>
 8001db4:	40023800 	.word	0x40023800
 8001db8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbc:	4b99      	ldr	r3, [pc, #612]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4996      	ldr	r1, [pc, #600]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dce:	4b95      	ldr	r3, [pc, #596]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	4991      	ldr	r1, [pc, #580]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fc16 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1d3      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e06:	4a87      	ldr	r2, [pc, #540]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001e08:	6892      	ldr	r2, [r2, #8]
 8001e0a:	0912      	lsrs	r2, r2, #4
 8001e0c:	f002 020f 	and.w	r2, r2, #15
 8001e10:	4985      	ldr	r1, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x4d8>)
 8001e12:	5c8a      	ldrb	r2, [r1, r2]
 8001e14:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e16:	4a85      	ldr	r2, [pc, #532]	; (800202c <HAL_RCC_OscConfig+0x4dc>)
 8001e18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x4e0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f84e 	bl	8000ec0 <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d045      	beq.n	8001eba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	e1b5      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d029      	beq.n	8001e8e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e3a:	4b7e      	ldr	r3, [pc, #504]	; (8002034 <HAL_RCC_OscConfig+0x4e4>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff f88a 	bl	8000f58 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e48:	f7ff f886 	bl	8000f58 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1a1      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e5a:	4b72      	ldr	r3, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e66:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	496c      	ldr	r1, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	4967      	ldr	r1, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e8e:	4b69      	ldr	r3, [pc, #420]	; (8002034 <HAL_RCC_OscConfig+0x4e4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f860 	bl	8000f58 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f85c 	bl	8000f58 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e177      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eae:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d030      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f840 	bl	8000f58 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff f83c 	bl	8000f58 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e157      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x38c>
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f829 	bl	8000f58 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f825 	bl	8000f58 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e140      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f1c:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80b5 	beq.w	80020a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10d      	bne.n	8001f62 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	4a36      	ldr	r2, [pc, #216]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6253      	str	r3, [r2, #36]	; 0x24
 8001f52:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b33      	ldr	r3, [pc, #204]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a32      	ldr	r2, [pc, #200]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe ffed 	bl	8000f58 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7fe ffe9 	bl	8000f58 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e104      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x466>
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6353      	str	r3, [r2, #52]	; 0x34
 8001fb4:	e02d      	b.n	8002012 <HAL_RCC_OscConfig+0x4c2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x488>
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	6353      	str	r3, [r2, #52]	; 0x34
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fd4:	6353      	str	r3, [r2, #52]	; 0x34
 8001fd6:	e01c      	b.n	8002012 <HAL_RCC_OscConfig+0x4c2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4aa>
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	6353      	str	r3, [r2, #52]	; 0x34
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ff8:	e00b      	b.n	8002012 <HAL_RCC_OscConfig+0x4c2>
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8002000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002004:	6353      	str	r3, [r2, #52]	; 0x34
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_RCC_OscConfig+0x4d4>)
 800200c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002010:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d024      	beq.n	8002064 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe ff9d 	bl	8000f58 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002020:	e019      	b.n	8002056 <HAL_RCC_OscConfig+0x506>
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	08002e20 	.word	0x08002e20
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004
 8002034:	42470020 	.word	0x42470020
 8002038:	42470680 	.word	0x42470680
 800203c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7fe ff8a 	bl	8000f58 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e0a3      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0ee      	beq.n	8002040 <HAL_RCC_OscConfig+0x4f0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe ff78 	bl	8000f58 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7fe ff74 	bl	8000f58 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e08d      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ee      	bne.n	800206c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	4a43      	ldr	r2, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 800209a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d079      	beq.n	800219c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d056      	beq.n	800215c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d13b      	bne.n	800212e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_OscConfig+0x65c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff4c 	bl	8000f58 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe ff48 	bl	8000f58 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e063      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	4319      	orrs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	430b      	orrs	r3, r1
 80020fa:	492b      	ldr	r1, [pc, #172]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x65c>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe ff27 	bl	8000f58 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe ff23 	bl	8000f58 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e03e      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x5be>
 800212c:	e036      	b.n	800219c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_RCC_OscConfig+0x65c>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe ff10 	bl	8000f58 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe ff0c 	bl	8000f58 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e027      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x5ec>
 800215a:	e01f      	b.n	800219c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_RCC_OscConfig+0x658>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	429a      	cmp	r2, r3
 800217a:	d10d      	bne.n	8002198 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470060 	.word	0x42470060

080021b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e11a      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d919      	bls.n	8002206 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x34>
 80021d8:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a89      	ldr	r2, [pc, #548]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b87      	ldr	r3, [pc, #540]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 0201 	bic.w	r2, r3, #1
 80021ec:	4985      	ldr	r1, [pc, #532]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f4:	4b83      	ldr	r3, [pc, #524]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0f9      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002212:	4b7d      	ldr	r3, [pc, #500]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	497a      	ldr	r1, [pc, #488]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 808e 	beq.w	800234e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d121      	bne.n	800228a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0d7      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002252:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0cb      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226a:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0bf      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0b7      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	495c      	ldr	r1, [pc, #368]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7fe fe5c 	bl	8000f58 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fe54 	bl	8000f58 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e09b      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c2:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d1ee      	bne.n	80022ac <HAL_RCC_ClockConfig+0xfc>
 80022ce:	e03e      	b.n	800234e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d112      	bne.n	80022fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022da:	f7fe fe3d 	bl	8000f58 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e084      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f0:	4b45      	ldr	r3, [pc, #276]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_ClockConfig+0x12a>
 80022fc:	e027      	b.n	800234e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d11d      	bne.n	8002342 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fe26 	bl	8000f58 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e06d      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800231e:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d1ee      	bne.n	8002308 <HAL_RCC_ClockConfig+0x158>
 800232a:	e010      	b.n	800234e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7fe fe14 	bl	8000f58 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e05b      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d219      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_ClockConfig+0x1be>
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0201 	bic.w	r2, r3, #1
 8002376:	4923      	ldr	r1, [pc, #140]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_RCC_ClockConfig+0x254>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e034      	b.n	80023fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4917      	ldr	r1, [pc, #92]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490f      	ldr	r1, [pc, #60]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f823 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_ClockConfig+0x258>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490b      	ldr	r1, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x25c>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fd66 	bl	8000ec0 <HAL_InitTick>
 80023f4:	4603      	mov	r3, r0
 80023f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023c00 	.word	0x40023c00
 8002408:	40023800 	.word	0x40023800
 800240c:	08002e20 	.word	0x08002e20
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b092      	sub	sp, #72	; 0x48
 800241e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d00d      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x34>
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f200 80d5 	bhi.w	80025e0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002436:	2b04      	cmp	r3, #4
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x28>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x2e>
 800243e:	e0cf      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002442:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002444:	e0da      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002446:	4b72      	ldr	r3, [pc, #456]	; (8002610 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800244a:	e0d7      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245c:	0d9b      	lsrs	r3, r3, #22
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002466:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d05d      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	2200      	movs	r2, #0
 8002476:	4618      	mov	r0, r3
 8002478:	4611      	mov	r1, r2
 800247a:	4604      	mov	r4, r0
 800247c:	460d      	mov	r5, r1
 800247e:	4622      	mov	r2, r4
 8002480:	462b      	mov	r3, r5
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002490:	0150      	lsls	r0, r2, #5
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4621      	mov	r1, r4
 8002498:	1a51      	subs	r1, r2, r1
 800249a:	6139      	str	r1, [r7, #16]
 800249c:	4629      	mov	r1, r5
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b0:	4659      	mov	r1, fp
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	4651      	mov	r1, sl
 80024b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ba:	4651      	mov	r1, sl
 80024bc:	018a      	lsls	r2, r1, #6
 80024be:	46d4      	mov	ip, sl
 80024c0:	ebb2 080c 	subs.w	r8, r2, ip
 80024c4:	4659      	mov	r1, fp
 80024c6:	eb63 0901 	sbc.w	r9, r3, r1
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024de:	4690      	mov	r8, r2
 80024e0:	4699      	mov	r9, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	eb18 0303 	adds.w	r3, r8, r3
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	462b      	mov	r3, r5
 80024ec:	eb49 0303 	adc.w	r3, r9, r3
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024fe:	4629      	mov	r1, r5
 8002500:	024b      	lsls	r3, r1, #9
 8002502:	4620      	mov	r0, r4
 8002504:	4629      	mov	r1, r5
 8002506:	4604      	mov	r4, r0
 8002508:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800250c:	4601      	mov	r1, r0
 800250e:	024a      	lsls	r2, r1, #9
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002516:	2200      	movs	r2, #0
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 800251a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800251c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002520:	f7fd fe2c 	bl	800017c <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	647b      	str	r3, [r7, #68]	; 0x44
 800252c:	e055      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	627a      	str	r2, [r7, #36]	; 0x24
 8002536:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800253a:	4642      	mov	r2, r8
 800253c:	464b      	mov	r3, r9
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	46c4      	mov	ip, r8
 8002554:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	468c      	mov	ip, r1
 800255e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800256e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002572:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002576:	ebb2 040a 	subs.w	r4, r2, sl
 800257a:	eb63 050b 	sbc.w	r5, r3, fp
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	00eb      	lsls	r3, r5, #3
 8002588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258c:	00e2      	lsls	r2, r4, #3
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	4603      	mov	r3, r0
 8002594:	18e3      	adds	r3, r4, r3
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	460b      	mov	r3, r1
 800259a:	eb45 0303 	adc.w	r3, r5, r3
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ac:	4629      	mov	r1, r5
 80025ae:	028b      	lsls	r3, r1, #10
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	4604      	mov	r4, r0
 80025b6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80025ba:	4601      	mov	r1, r0
 80025bc:	028a      	lsls	r2, r1, #10
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	2200      	movs	r2, #0
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	61fa      	str	r2, [r7, #28]
 80025ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ce:	f7fd fdd5 	bl	800017c <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4613      	mov	r3, r2
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80025da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80025de:	e00d      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0b5b      	lsrs	r3, r3, #13
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	3301      	adds	r3, #1
 80025f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80025fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3748      	adds	r7, #72	; 0x48
 8002602:	46bd      	mov	sp, r7
 8002604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200
 8002614:	08002e14 	.word	0x08002e14

08002618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d12c      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e016      	b.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6253      	str	r3, [r2, #36]	; 0x24
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002668:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002674:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800267c:	d105      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002684:	d101      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002686:	2301      	movs	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 0201 	bic.w	r2, r3, #1
 80026a4:	490b      	ldr	r1, [pc, #44]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80ed 	beq.w	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b78      	ldr	r3, [pc, #480]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	4a74      	ldr	r2, [pc, #464]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6253      	str	r3, [r2, #36]	; 0x24
 8002716:	4b72      	ldr	r3, [pc, #456]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fe fc0b 	bl	8000f58 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fe fc07 	bl	8000f58 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	; 0x64
 8002752:	d901      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0be      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b62      	ldr	r3, [pc, #392]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002764:	4b5e      	ldr	r3, [pc, #376]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800276c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d106      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	429a      	cmp	r2, r3
 8002788:	d00f      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002796:	d108      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002798:	4b51      	ldr	r3, [pc, #324]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e095      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80027aa:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d041      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d005      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d02d      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d027      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027f6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d014      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fba0 	bl	8000f58 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281a:	e00a      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fb9c 	bl	8000f58 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e051      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ee      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002856:	d10a      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002868:	491d      	ldr	r1, [pc, #116]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287a:	4919      	ldr	r1, [pc, #100]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800287c:	4313      	orrs	r3, r2
 800287e:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002898:	d10a      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80028aa:	490d      	ldr	r1, [pc, #52]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000
 80028e8:	424706dc 	.word	0x424706dc

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e031      	b.n	8002962 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fa4a 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 f8e4 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_TIM_ConfigClockSource+0x1c>
 8002982:	2302      	movs	r3, #2
 8002984:	e0b4      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x186>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029be:	d03e      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xd4>
 80029c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c4:	f200 8087 	bhi.w	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	f000 8086 	beq.w	8002adc <HAL_TIM_ConfigClockSource+0x172>
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d87f      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029d6:	2b70      	cmp	r3, #112	; 0x70
 80029d8:	d01a      	beq.n	8002a10 <HAL_TIM_ConfigClockSource+0xa6>
 80029da:	2b70      	cmp	r3, #112	; 0x70
 80029dc:	d87b      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029de:	2b60      	cmp	r3, #96	; 0x60
 80029e0:	d050      	beq.n	8002a84 <HAL_TIM_ConfigClockSource+0x11a>
 80029e2:	2b60      	cmp	r3, #96	; 0x60
 80029e4:	d877      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029e6:	2b50      	cmp	r3, #80	; 0x50
 80029e8:	d03c      	beq.n	8002a64 <HAL_TIM_ConfigClockSource+0xfa>
 80029ea:	2b50      	cmp	r3, #80	; 0x50
 80029ec:	d873      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d058      	beq.n	8002aa4 <HAL_TIM_ConfigClockSource+0x13a>
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d86f      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029f6:	2b30      	cmp	r3, #48	; 0x30
 80029f8:	d064      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0x15a>
 80029fa:	2b30      	cmp	r3, #48	; 0x30
 80029fc:	d86b      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d060      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0x15a>
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d867      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d05c      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d05a      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0e:	e062      	b.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a20:	f000 f943 	bl	8002caa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]
      break;
 8002a3c:	e04f      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a4e:	f000 f92c 	bl	8002caa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a60:	609a      	str	r2, [r3, #8]
      break;
 8002a62:	e03c      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a70:	461a      	mov	r2, r3
 8002a72:	f000 f8a3 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2150      	movs	r1, #80	; 0x50
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f8fa 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002a82:	e02c      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a90:	461a      	mov	r2, r3
 8002a92:	f000 f8c1 	bl	8002c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2160      	movs	r1, #96	; 0x60
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f8ea 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002aa2:	e01c      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f000 f883 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f8da 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002ac2:	e00c      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 f8d1 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e003      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8002ada:	e000      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002adc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0e:	d007      	beq.n	8002b20 <TIM_Base_SetConfig+0x28>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <TIM_Base_SetConfig+0xb0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0x28>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a24      	ldr	r2, [pc, #144]	; (8002bac <TIM_Base_SetConfig+0xb4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d013      	beq.n	8002b62 <TIM_Base_SetConfig+0x6a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <TIM_Base_SetConfig+0xb0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00f      	beq.n	8002b62 <TIM_Base_SetConfig+0x6a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <TIM_Base_SetConfig+0xb4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <TIM_Base_SetConfig+0x6a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_Base_SetConfig+0x6a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <TIM_Base_SetConfig+0xbc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x6a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	615a      	str	r2, [r3, #20]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	40011000 	.word	0x40011000

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 030a 	bic.w	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0210 	bic.w	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f043 0307 	orr.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e046      	b.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d00e      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10c      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40010800 	.word	0x40010800

08002da4 <memset>:
 8002da4:	4603      	mov	r3, r0
 8002da6:	4402      	add	r2, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	2600      	movs	r6, #0
 8002db8:	4d0c      	ldr	r5, [pc, #48]	; (8002dec <__libc_init_array+0x38>)
 8002dba:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	f000 f81a 	bl	8002dfc <_init>
 8002dc8:	2600      	movs	r6, #0
 8002dca:	4d0a      	ldr	r5, [pc, #40]	; (8002df4 <__libc_init_array+0x40>)
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <__libc_init_array+0x44>)
 8002dce:	1b64      	subs	r4, r4, r5
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08002e38 	.word	0x08002e38
 8002df0:	08002e38 	.word	0x08002e38
 8002df4:	08002e38 	.word	0x08002e38
 8002df8:	08002e3c 	.word	0x08002e3c

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
